diff --git b/R/intersect.R a/R/intersect.R
index ccdee010..81a349e4 100644
--- b/R/intersect.R
+++ a/R/intersect.R
@@ -1,10 +1,45 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname intersect.duckplyr_df
 #' @export
 intersect.duckplyr_df <- function(x, y, ...) {
   # Our implementation
-  rel_try(NULL,
-    "No relational implementation for intersect()" = TRUE,
+  check_dots_empty()
+  check_compatible(x, y)
+
+  x_names <- names(x)
+  y_names <- names(y)
+  if (identical(x_names, y_names)) {
+    # Ensure identical() is very cheap
+    y_names <- x_names
+  }
+
+  rel_try(list(name = "intersect", x = x, y = y),
+    #' @section Fallbacks:
+    #' You cannot use `intersect.duckplyr_df`
+    #' - if column names are duplicated in one of the tables
+    #' - if column names are different in both tables.
+    #'
+    #' If you do the code will fall back to `dplyr::intersect()` without any error.
+    "No duplicate names" = !identical(x_names, y_names) && anyDuplicated(x_names) && anyDuplicated(y_names),
+    "Tables of different width" = length(x_names) != length(y_names),
+    "Name mismatch" = !identical(x_names, y_names) && !all(y_names %in% x_names),
     {
+      if (oo_force()) {
+        both <- semi_join(x, y, by = x_names)
+        out <- distinct(both)
+      } else {
+        x_rel <- duckdb_rel_from_df(x)
+        y_rel <- duckdb_rel_from_df(y)
+        if (!identical(x_names, y_names)) {
+          # FIXME: Select by position
+          exprs <- nexprs_from_loc(x_names, set_names(seq_along(x_names), x_names))
+          y_rel <- rel_project(y_rel, exprs)
+        }
+
+        rel <- rel_set_intersect(x_rel, y_rel)
+        out <- rel_to_df(rel)
+        out <- dplyr_reconstruct(out, x)
+      }
       return(out)
     }
   )
