diff --git b/R/select.R a/R/select.R
index 8cd902b3..9c6fffe5 100644
--- b/R/select.R
+++ a/R/select.R
@@ -1,14 +1,37 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname select.duckplyr_df
 #' @export
 select.duckplyr_df <- function(.data, ...) {
-  # Our implementation
-  rel_try(NULL,
-    "No relational implementation for select()" = TRUE,
+  force(.data)
+
+  error_call <- dplyr_error_call()
+
+  loc <- tidyselect::eval_select(
+    expr(c(...)),
+    data = .data,
+    error_call = error_call
+  )
+
+  exprs <- exprs_from_loc(.data, loc)
+
+  rel_try(list(name = "select", x = .data, args = try_list(dots = enquos(...))),
+    # We could count and create a zero-col data frame, but we can't
+    # create a duckplyr frame from it anyway.
+    #' @section Fallbacks:
+    #' You cannot use `select.duckplyr_df`
+    #' - with no expression,
+    #' - nor with a selection that returns no columns:
+    #'
+    #' If you do the code will fall back to `dplyr::select()` without any error.
+    "Can't use relational with zero-column result set." = (length(exprs) == 0),
     {
+      rel <- duckdb_rel_from_df(.data)
+      out <- exprs_project(rel, exprs, .data)
       return(out)
     }
   )
 
+
   # dplyr forward
   select <- dplyr$select.data.frame
   out <- select(.data, ...)
