diff --git b/R/pull.R a/R/pull.R
--- b/R/pull.R
+++ a/R/pull.R
@@ -1,10 +1,31 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname pull.duckplyr_df
 #' @export
 pull.duckplyr_df <- function(.data, var = -1, name = NULL, ...) {
-  # Our implementation
-  duckplyr_error <- rel_try(NULL,
-    "No relational implementation for {.code pull()}" = TRUE,
+  # dplyr implementation
+  my_var <- tidyselect::vars_pull(names(.data), !!enquo(var))
+  my_name <- enquo(name)
+  if (!quo_is_null(my_name)) {
+    my_name <- tidyselect::vars_pull(names(.data), !!my_name)
+    my_var <- c(my_name, my_var)
+  }
+
+  loc <- set_names(match(my_var, names(.data)), my_var)
+
+  exprs <- exprs_from_loc(.data, loc)
+
+  duckplyr_error <- rel_try(list(name = "pull", .data = .data),
+    #' @section Fallbacks:
+    #' There is no DuckDB translation in `pull.duckplyr_df()`
+    #' - with a selection that returns no columns.
+    #'
+    #' These features fall back to [dplyr::pull()], see `vignette("fallback")` for details.
+    "Zero-column result set not supported." = (length(exprs) == 0),
     {
+      rel <- duckdb_rel_from_df(.data)
+      out_rel <- rel_project(rel, exprs)
+      out <- rel_to_df(out_rel)
+      out <- tibble::deframe(out)
       return(out)
     }
   )
