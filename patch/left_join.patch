diff --git b/R/left_join.R a/R/left_join.R
index e06f3dbb..c622e040 100644
--- b/R/left_join.R
+++ a/R/left_join.R
@@ -1,17 +1,33 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname left_join.duckplyr_df
 #' @export
 left_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ..., keep = NULL, na_matches = c("na", "never"), multiple = "all", unmatched = "drop", relationship = NULL) {
+  check_dots_empty0(...)
+  error_call <- caller_env()
+  y <- auto_copy(x, y, copy = copy)
+
   # Our implementation
-  rel_try(NULL,
-    "No relational implementation for left_join()" = TRUE,
+  rel_try(list(name = "left_join", x = x, y = y, args = try_list(by = if (!is.null(by) && !is_cross_by(by)) as_join_by(by), copy = copy, keep = keep, na_matches = na_matches, multiple = multiple, unmatched = unmatched, relationship = relationship)),
+    #' @section Fallbacks:
+    #' You cannot use `left_join.duckplyr_df`
+    #' - for an implicit cross join,
+    #' - for a value of the `multiple` argument that isn't the default `"all"`.
+    #' - for a value of the `unmatched` argument that isn't the default `"drop"`.
+    #'
+    #' If you do the code will fall back to `dplyr::left_join()` without any error.
+
+    "No implicit cross joins for left_join()" = is_cross_by(by),
+    "`multiple` not supported" = !identical(multiple, "all"),
+    "`unmatched` not supported" = !identical(unmatched, "drop"),
     {
+      out <- rel_join_impl(x, y, by, "left", na_matches, suffix, keep, error_call)
       return(out)
     }
   )
 
   # dplyr forward
   left_join <- dplyr$left_join.data.frame
-  out <- left_join(x, y, by, copy, suffix, ..., keep = keep, na_matches = na_matches, multiple = multiple, unmatched = unmatched, relationship = relationship)
+  out <- left_join(x, y, by, copy = FALSE, suffix, ..., keep = keep, na_matches = na_matches, multiple = multiple, unmatched = unmatched, relationship = relationship)
   return(out)
 
   # dplyr implementation
