diff --git b/R/semi_join.R a/R/semi_join.R
--- b/R/semi_join.R
+++ a/R/semi_join.R
@@ -1,10 +1,19 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname semi_join.duckplyr_df
 #' @export
 semi_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, ..., na_matches = c("na", "never")) {
+  check_dots_empty0(...)
+  error_call <- caller_env()
+  y <- auto_copy(x, y, copy = copy)
+
+  # https://github.com/duckdb/duckdb/issues/6597
+  na_matches <- check_na_matches(na_matches, error_call = error_call)
+
   # Our implementation
-  duckplyr_error <- rel_try(NULL,
-    "No relational implementation for {.code semi_join()}" = TRUE,
+  duckplyr_error <- rel_try(list(name = "semi_join", x = x, y = y, args = try_list(by = if (!is.null(by) && !is_cross_by(by)) as_join_by(by), copy = copy, na_matches = na_matches)),
+    "No restrictions" = FALSE,
     {
+      out <- rel_join_impl(x, y, by, "semi", na_matches, error_call = error_call)
       return(out)
     }
   )
@@ -13,7 +22,7 @@ semi_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, ..., na_matches
   check_funneled(x, duckplyr_error)
 
   semi_join <- dplyr$semi_join.data.frame
-  out <- semi_join(x, y, by, copy, ..., na_matches = na_matches)
+  out <- semi_join(x, y, by, copy = FALSE, ..., na_matches = na_matches)
   return(out)
 
   # dplyr implementation
