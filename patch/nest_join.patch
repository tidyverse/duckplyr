diff --git b/R/nest_join.R a/R/nest_join.R
--- b/R/nest_join.R
+++ a/R/nest_join.R
@@ -1,6 +1,16 @@
 # Generated by 02-duckplyr_df-methods.R
 #' @export
 nest_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, keep = NULL, name = NULL, ..., na_matches = c("na", "never"), unmatched = "drop") {
+  # from dplyr implementation
+  check_keep(keep)
+  na_matches <- check_na_matches(na_matches)
+
+  if (is.null(name)) {
+    name <- as_label(enexpr(y))
+  } else {
+    check_string(name)
+  }
+
   # Our implementation
   duckplyr_error <- rel_try(NULL,
     "No relational implementation for {.code nest_join()}" = TRUE,
@@ -12,8 +22,13 @@ nest_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, keep = NULL, na
   # dplyr forward
   check_funneled(x, duckplyr_error)
 
+  x_df <- x
+  class(x_df) <- setdiff(class(x_df), "duckplyr_df")
+  y_df <- y
+  class(y_df) <- setdiff(class(y_df), "duckplyr_df")
   nest_join <- dplyr$nest_join.data.frame
-  out <- nest_join(x, {{ y }}, by, copy, keep, name, ..., na_matches = na_matches, unmatched = unmatched)
+  out <- nest_join(x_df, y_df, by, copy, keep, name, ..., na_matches = na_matches, unmatched = unmatched)
+  out <- dplyr_reconstruct(out, x)
   return(out)
 
   # dplyr implementation
@@ -100,7 +115,13 @@ nest_join.duckplyr_df <- function(x, y, by = NULL, copy = FALSE, keep = NULL, na
   dplyr_reconstruct(out, x)
 }
 
-duckplyr_nest_join <- function(x, y, ...) {
+duckplyr_nest_join <- function(x, y, by = NULL, copy = FALSE, keep = NULL, name = NULL, ...) {
+  if (is.null(name)) {
+    name <- as_label(enexpr(y))
+  } else {
+    check_string(name)
+  }
+
   try_fetch(
     {
       x <- as_duckplyr_df_impl(x)
@@ -110,7 +131,7 @@ duckplyr_nest_join <- function(x, y, ...) {
       testthat::skip(conditionMessage(e))
     }
   )
-  out <- nest_join(x, y, ...)
+  out <- nest_join(x, y, by, copy, keep, name, ...)
   class(out) <- setdiff(class(out), "duckplyr_df")
   out
 }
