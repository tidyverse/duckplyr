diff --git b/R/arrange.R a/R/arrange.R
index d678d674..c26aecb2 100644
--- b/R/arrange.R
+++ a/R/arrange.R
@@ -1,10 +1,53 @@
 # Generated by 02-duckplyr_df-methods.R
+#' @rdname arrange.duckplyr_df
 #' @export
 arrange.duckplyr_df <- function(.data, ..., .by_group = FALSE, .locale = NULL) {
-  # Our implementation
-  rel_try(NULL,
-    "No relational implementation for arrange()" = TRUE,
+  force(.data)
+
+  dots <- enquos(...)
+  dots <- unname(dots)
+
+  rel_try(list(name = "arrange", x = .data, args = try_list(dots = dots, .by_group = .by_group)),
+    #' @section Fallbacks:
+    #' You cannot use `arrange.duckplyr_df` when:
+    #' - `.by_group = TRUE`,
+    #' - providing a value for the `.locale` argument,
+    #' - providing a value for the `dplyr.legacy_locale` option.
+    #'
+    #' If you do the code will fall back to `dplyr::arrange()` without any error.
+    ".by_group = TRUE not supported" = !identical(.by_group, FALSE),
+    ".locale argument not supported" = !is.null(.locale),
+    "dplyr.legacy_locale not supported" = isTRUE(getOption("dplyr.legacy_locale")),
     {
+      # Translate to df before early exit, so that we can bail out for subclasses
+      rel <- duckdb_rel_from_df(.data)
+      if (length(dots) == 0) {
+        return(.data)
+      }
+
+      dots_ascending <- handle_desc(dots)
+      dots <- dots_ascending$dots
+      ascending <- dots_ascending$ascending
+
+      exprs <- rel_translate_dots(dots, .data)
+
+      if (oo_force()) {
+        rel <- oo_prep(rel, force = TRUE)
+        exprs <- c(exprs, list(relexpr_reference("___row_number")))
+        ascending <- c(ascending, TRUE)
+      }
+
+      rel <- rel_order(rel, exprs, ascending)
+
+      # Don't need to sort here, already sorting by ___row_number
+      if (oo_force()) {
+        out_rel <- oo_restore_cols(rel)
+      } else {
+        out_rel <- rel
+      }
+
+      out <- rel_to_df(out_rel)
+      out <- dplyr_reconstruct(out, .data)
       return(out)
     }
   )
