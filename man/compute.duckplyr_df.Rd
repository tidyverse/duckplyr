% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute-rd.R, R/compute.R
\name{compute.duckplyr_df}
\alias{compute.duckplyr_df}
\title{Compute results}
\usage{
\method{compute}{duckplyr_df}(x, ..., lazy = NULL, name = NULL, schema_name = NULL, temporary = TRUE)
}
\arguments{
\item{x}{A data frame, data frame extension (e.g. a tibble), or a lazy
data frame (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for more
details.}

\item{...}{Arguments passed on to methods}

\item{lazy}{Set to \code{TRUE} to return a lazy or \code{FALSE} to return an eager data frame,
see the "Eager and lazy" section in \code{\link[=duckdb_tibble]{duckdb_tibble()}}.
The default is to inherit the lazyness of the input.}

\item{name}{The name of the table to store the result in.}

\item{schema_name}{The schema to store the result in, defaults to the current schema.}

\item{temporary}{Set to \code{FALSE} to store the result in a permanent table.}
}
\description{
This is a method for the \code{\link[dplyr:compute]{dplyr::compute()}} generic.
For a (lazy) duckplyr frame,
\code{compute()} executes a query but stores it in a (temporary) table,
or in a Parquet or CSV file.
The result is a duckplyr frame that can be used with subsequent dplyr verbs.
}
\examples{
library(duckplyr)
df <- duckdb_tibble(x = c(1, 2))
df <- mutate(df, y = 2)
explain(df)
df <- compute(df)
explain(df)
}
\seealso{
\code{\link[dplyr:compute]{dplyr::collect()}}
}
