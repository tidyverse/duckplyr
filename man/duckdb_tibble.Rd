% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ducktbl.R
\name{duckdb_tibble}
\alias{duckdb_tibble}
\alias{as_duckdb_tibble}
\alias{is_duckdb_tibble}
\title{duckplyr data frames}
\usage{
duckdb_tibble(..., .collect = c("automatic", "only_small", "always_manual"))

as_duckdb_tibble(
  x,
  ...,
  collect = c("automatic", "only_small", "always_manual")
)

is_duckdb_tibble(x)
}
\arguments{
\item{...}{For \code{duckdb_tibble()}, passed on to \code{\link[tibble:tibble]{tibble::tibble()}}.
For \code{as_duckdb_tibble()}, passed on to methods.}

\item{.collect, collect}{Either a string:
\itemize{
\item \code{"always_manual"}:  a frugal data frame,
\item \code{"automatic"}: a lavish data frame,
\item \code{"only_small"}: allow the materialization up to a maximum size of 1 million cells.
}

Or a named vector with at least one of
\itemize{
\item \code{cells} (numeric)
\item \code{rows} (numeric)
}

to allow materialization for data up to a certain size,
measured in cells (values) and rows in the resulting data frame.
The equivalent of \code{"only_small"} is \code{c(cells = 1e6)}.

If \code{cells} is specified but not \code{rows}, \code{rows} is \code{Inf}.
If \code{rows} is specified but not \code{cells}, \code{cells} is \code{Inf}.

The default is to inherit the prudence of the input.}

\item{x}{The object to convert or to test.}
}
\value{
For \code{duckdb_tibble()} and \code{as_duckdb_tibble()}, an object with the following classes:
\itemize{
\item \code{"prudent_duckplyr_df"} if \code{.collect} is not \code{"automatic"}
\item \code{"duckplyr_df"}
\item Classes of a \link[tibble:tibble]{tibble::tibble}
}

For \code{is_duckdb_tibble()}, a scalar logical.
}
\description{
Data frames backed by duckplyr have a special class, \code{"duckplyr_df"},
in addition to the default classes.
This ensures that dplyr methods are dispatched correctly.
For such objects,
dplyr verbs such as \code{\link[dplyr:mutate]{dplyr::mutate()}}, \code{\link[dplyr:select]{dplyr::select()}} or \code{\link[dplyr:filter]{dplyr::filter()}}  will use DuckDB.

\code{duckdb_tibble()} works like \code{\link[tibble:tibble]{tibble::tibble()}}, returning a lavish duckplyr data frame by default.
See \code{vignette("funnel")} for details.

\code{as_duckdb_tibble()} converts a data frame or a dplyr lazy table to a duckplyr data frame.
This is a generic function that can be overridden for custom classes.

\code{is_duckdb_tibble()} returns \code{TRUE} if \code{x} is a duckplyr data frame.
}
\examples{
x <- duckdb_tibble(a = 1)
x

library(dplyr)
x \%>\%
  mutate(b = 2)

x$a

y <- duckdb_tibble(a = 1, .collect = "always_manual")
y
try(length(y$a))
length(collect(y)$a)
}
