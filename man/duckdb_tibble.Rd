% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ducktbl.R
\name{duckdb_tibble}
\alias{duckdb_tibble}
\alias{as_duckdb_tibble}
\alias{is_duckdb_tibble}
\title{duckplyr data frames}
\usage{
duckdb_tibble(..., .collect = "any_size")

as_duckdb_tibble(x, ..., collect = "any_size")

is_duckdb_tibble(x)
}
\arguments{
\item{...}{For \code{duckdb_tibble()}, passed on to \code{\link[tibble:tibble]{tibble::tibble()}}.
For \code{as_duckdb_tibble()}, passed on to methods.}

\item{.collect, collect}{Either a logical:
\itemize{
\item Set to \code{TRUE} to return a frugal data frame.
\item Set to \code{FALSE} to return an lavish data frame.
}

Or a named vector with at least one of
\itemize{
\item \code{cells} (numeric)
\item \code{rows} (numeric)
}

to allow materialization for data up to a certain size,
measured in cells (values) and rows in the resulting data frame.

If \code{cells} is specified but not \code{rows}, \code{rows} is \code{Inf}.
If \code{rows} is specified but not \code{cells}, \code{cells} is \code{Inf}.

The default is to inherit the prudence of the input.
see the "Prudence" section.}

\item{x}{The object to convert or to test.}
}
\value{
For \code{duckdb_tibble()} and \code{as_duckdb_tibble()}, an object with the following classes:
\itemize{
\item \code{"frugal_duckplyr_df"} if \code{.collect} is \code{TRUE}
\item \code{"duckplyr_df"}
\item Classes of a \link[tibble:tibble]{tibble::tibble}
}

For \code{is_duckdb_tibble()}, a scalar logical.
}
\description{
Data frames backed by duckplyr have a special class, \code{"duckplyr_df"},
in addition to the default classes.
This ensures that dplyr methods are dispatched correctly.
For such objects,
dplyr verbs such as \code{\link[dplyr:mutate]{dplyr::mutate()}}, \code{\link[dplyr:select]{dplyr::select()}} or \code{\link[dplyr:filter]{dplyr::filter()}}  will use DuckDB.

\code{duckdb_tibble()} works like \code{\link[tibble:tibble]{tibble::tibble()}}, returning an "lavish" duckplyr data frame by default.
See the "Prudence" section below.

\code{as_duckdb_tibble()} converts a data frame or a dplyr lazy table to a duckplyr data frame.
This is a generic function that can be overridden for custom classes.

\code{is_duckdb_tibble()} returns \code{TRUE} if \code{x} is a duckplyr data frame.
}
\section{Prudence}{

Data frames backed by duckplyr, with class \code{"duckplyr_df"},
behave as regular data frames in almost all respects.
In particular, direct column access like \code{df$x},
or retrieving the number of rows with \code{\link[=nrow]{nrow()}}, works identically.
Conceptually, duckplyr frames are "eager": from a user's perspective,
they behave like regular data frames.
Under the hood, two key differences provide improved performance and usability:
lazy materialization and prudence.

For a duckplyr frame that is the result of a dplyr operation,
accessing column data or retrieving the number of rows will trigger a computation
that is carried out by DuckDB, not dplyr.
In this sense, duckplyr frames are also "lazy":
the computation is deferred until the last possible moment,
allowing DuckDB to optimize the whole pipeline.
This is similar to lazy tables in \pkg{dbplyr} and \pkg{dtplyr},
but different from \pkg{dplyr} where each intermediate step is computed.

Being both "eager" and "lazy" at the same time introduces a challenge:
it is too easy to accidentally trigger computation,
which may be prohibitive if an intermediate result is too large.
This is where prudence comes in.
\itemize{
\item For lavish duckplyr frames, the underlying DuckDB computation is carried out
upon the first request.
Once the results are computed, they are cached and subsequent requests are fast.
This is a good choice for small to medium-sized data,
where DuckDB can provide a nice speedup but materializing the data is affordable
at any stage.
This is the default for \code{duckdb_tibble()} and \code{as_duckdb_tibble()}.
\item For frugal duckplyr frames, accessing a column or requesting the number of rows
triggers an error, either unconditionally, or if the result exceeds a certain size.
This is a good choice for large data sets where the cost of materializing the data
may be prohibitive due to size or computation time,
and the user wants to control when the computation is carried out.
The default for the ingestion functions like \code{\link[=read_parquet_duckdb]{read_parquet_duckdb()}}
is to limit the result size to one million cells (values in the resulting data frame).
}

Frugal duckplyr frames behave like \href{https://dtplyr.tidyverse.org/reference/lazy_dt.html}{\code{dtplyr}'s lazy frames},
or dbplyr's lazy frames:
the computation only starts when you \strong{explicitly} request it with a "collect"
function.
In dtplyr and dbplyr, there are no lavish frames: collection always needs to be
explicit.

A frugal duckplyr frame can be converted to an lavish one with \code{as_duckdb_tibble(collect = "any_size")}.
The \code{\link[=collect.duckplyr_df]{collect.duckplyr_df()}} method triggers computation and converts to a plain tibble.
Other useful methods include \code{\link[=compute_file]{compute_file()}} for storing results in a file,
and \code{\link[=compute.duckplyr_df]{compute.duckplyr_df()}} for storing results in temporary storage on disk.

Beyond safety regarding memory usage, frugal frames also allow you
to check that all operations are supported by DuckDB:
for a frugal frame with \code{collect = "always_manual"}, fallbacks to dplyr are not possible.
As a reminder, computing via DuckDB is currently not always possible,
see \code{vignette("limits")} for the supported operations.
In such cases, the original dplyr implementation is used, see \link{fallback} for details.
As the original dplyr implementation accesses columns directly,
the data must be materialized before a fallback can be executed.
This means that automatic fallback is only possible for "lavish" duckplyr frames,
while for "frugal" duckplyr frames, one of the aforementioned collection methods must be used first.
}

\examples{
x <- duckdb_tibble(a = 1)
x

library(dplyr)
x \%>\%
  mutate(b = 2)

x$a

y <- duckdb_tibble(a = 1, .collect = "always_manual")
y
try(length(y$a))
length(collect(y)$a)
}
