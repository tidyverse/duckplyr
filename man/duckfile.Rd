% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/io2.R
\name{duckfile}
\alias{duckfile}
\alias{duckparquet}
\alias{duckcsv}
\alias{duckjson}
\title{Read Parquet, CSV, and other files using DuckDB}
\usage{
duckparquet(path, ..., lazy = TRUE, options = list())

duckcsv(path, ..., lazy = TRUE, options = list())

duckjson(path, ..., lazy = TRUE, options = list())

duckfile(path, table_function, ..., lazy = TRUE, options = list())
}
\arguments{
\item{path}{Path to files, glob patterns \code{*} and \verb{?} are supported.}

\item{...}{These dots are for future extensions and must be empty.}

\item{lazy}{Logical, whether to create a lazy duckplyr frame.
If \code{TRUE} (the default), \code{\link[=collect]{collect()}} must be called before the data can be accessed.}

\item{options}{Arguments to the DuckDB function
indicated by \code{table_function}.}

\item{table_function}{The name of a table-valued
DuckDB function such as \code{"read_parquet"},
\code{"read_csv"}, \code{"read_csv_auto"} or \code{"read_json"}.}
}
\value{
A duckplyr frame, see \code{\link[=as_ducktbl]{as_ducktbl()}} for details.
}
\description{
These functions ingest data from a file.
In many cases, these functions return immediately because they only read the metadata.
The actual data is only read when it is actually processed.

\code{duckparquet()} reads a CSV file using DuckDB's \code{read_parquet()} table function.

\code{duckcsv()} reads a CSV file using DuckDB's \code{read_csv_auto()} table function.

\code{duckjson()} reads a JSON file using DuckDB's \code{read_json()} table function.

\code{duckfile()} uses arbitrary readers to read data.
See \url{https://duckdb.org/docs/data/overview} for a documentation
of the available functions and their options.
To read multiple files with the same schema,
pass a wildcard or a character vector to the \code{path} argument,
}
\details{
By default, a lazy duckplyr frame is created.
This means that all the data can be shown and all dplyr verbs can be used,
but attempting to access the columns of the data frame or using an unsupported verb,
data type, or function will result in an error.
Pass \code{lazy = FALSE} to transparently switch to local processing as needed,
or use \code{\link[=collect]{collect()}} to explicitly materialize and continue local processing.
}
\examples{
# Create simple CSV file
path <- tempfile("duckplyr_test_", fileext = ".csv")
write.csv(data.frame(a = 1:3, b = letters[4:6]), path, row.names = FALSE)

# Reading is immediate
df <- duckcsv(path)

# Names are always available
names(df)

# Materialization upon access is turned off by default
try(print(df$a))

# Materialize explicitly
collect(df)$a

# Automatic materialization with lazy = FALSE
df <- duckcsv(path, lazy = FALSE)
df$a

# Specify column types
duckcsv(
  path,
  options = list(delim = ",", types = list(c("DOUBLE", "VARCHAR")))
)

# Create and read a simple JSON file
path <- tempfile("duckplyr_test_", fileext = ".json")
writeLines('[{"a": 1, "b": "x"}, {"a": 2, "b": "y"}]', path)

# Reading needs the json extension
duckplyr_execute("INSTALL json")
duckplyr_execute("LOAD json")
duckjson(path)
}
