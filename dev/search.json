[{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to duckplyr","title":"Contributing to duckplyr","text":"outlines propose change duckplyr. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to duckplyr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to duckplyr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to duckplyr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"tidyverse/duckplyr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Please edit NEWS.md.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to duckplyr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"new-translations-for-functions","dir":"","previous_headings":"","what":"New translations for functions","title":"Contributing to duckplyr","text":"functions used dplyr verbs, translations must provided. code lives translate.R . New translations must change code two places: switch() rel_find_call() needs new entry, together package home function. top 60 functions, ranked importance, already part switch(), comment implemented yet. actual translation must implemented rel_translate_lang(). easy functions similar functions already translated, harder others. part code clear yet, particular, argument matching name available functions generalized. Test implementation console code form: Add test new translation mutate = section test_extra_arg_map 00-funs.R. (point want specific tests translations, now, .) Run 03-tests.R, commit changes generated code version control.","code":"rel_translate(quo(a + 1), data.frame(a = 1)) |>   constructive::construct()"},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-more-options-for-verbs","dir":"","previous_headings":"","what":"Support more options for verbs","title":"Contributing to duckplyr","text":"verbs wrap code rel_try({}) call fall back dplyr case failure. rel_try() function takes named arguments describe conditions early drop-, corresponding error message. add support condition drop-defined, roughly following steps necessary: Remove drop-condition. Run tests, take note failures. Provide implementation fixes failures. Add test verb works DUCKPLYR_FORCE = TRUE new conditions. Run 02-duckplyr_df-methods.R update corresponding patch file.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-verbs","dir":"","previous_headings":"","what":"Support new verbs","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-column-data-types","dir":"","previous_headings":"","what":"Support new column data types","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-data-frame-types","dir":"","previous_headings":"","what":"Support new data frame types","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-generation-and-synchronization","dir":"","previous_headings":"","what":"Code generation and synchronization","title":"Contributing to duckplyr","text":"duckplyr package “long-running fork dplyr”, code generate parts implementation tests, synchronize changes duckplyr codebase. main synchronization script tools/99-sync.R, also contains instructions set new clone. script run whenever implementation verbs changes substantial way. Watch # Generated ... headers top source files.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to duckplyr","text":"Please note duckplyr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 duckplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"use-of-duckplyr-for-individual-data-frames","dir":"Articles","previous_headings":"","what":"Use of duckplyr for individual data frames","title":"Use of duckplyr in other packages","text":"enable duckplyr individual data frames instead session wide, load duckplyr library(). use duckplyr::as_duckplyr_tibble() first step pipe, without attaching package. example illustrates usage duckplyr individual data frames. Use duckplyr::as_duckplyr_tibble() enable processing duckdb: result tibble, class. duckdb responsible eventually carrying operations. Despite late filter, summary computed Gentoo species. data frame operations supported. Computation happens upon first request. computation carried , results available immediately:","code":"out <-   palmerpenguins::penguins %>%   # CAVEAT: factor columns are not supported yet   mutate(across(where(is.factor), as.character)) %>%   duckplyr::as_duckplyr_tibble() %>%   mutate(bill_area = bill_length_mm * bill_depth_mm) %>%   summarize(.by = c(species, sex), mean_bill_area = mean(bill_area)) %>%   filter(species != \"Gentoo\") #> The duckplyr package is configured to fall back to dplyr when it #> encounters an incompatibility. Fallback events can be collected and #> uploaded for analysis to guide future development. By default, no data #> will be collected or uploaded. #> → Run `duckplyr::fallback_sitrep()` to review the current settings. #> Warning: `as_duckplyr_tibble()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `as_ducktbl()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. class(out) #> [1] \"duckplyr_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" names(out) #> [1] \"species\"        \"sex\"            \"mean_bill_area\" out %>%   explain() #> ┌───────────────────────────┐ #> │       HASH_GROUP_BY       │ #> │    ────────────────────   │ #> │          Groups:          │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │    Aggregates: mean(#2)   │ #> │                           │ #> │          ~34 Rows         │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │         PROJECTION        │ #> │    ────────────────────   │ #> │          species          │ #> │            sex            │ #> │         bill_area         │ #> │                           │ #> │          ~68 Rows         │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │         PROJECTION        │ #> │    ────────────────────   │ #> │          species          │ #> │            sex            │ #> │         bill_area         │ #> │                           │ #> │          ~68 Rows         │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │           FILTER          │ #> │    ────────────────────   │ #> │   \"r_base::!=\"(species,   │ #> │         'Gentoo')         │ #> │                           │ #> │          ~68 Rows         │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │     R_DATAFRAME_SCAN      │ #> │    ────────────────────   │ #> │         data.frame        │ #> │                           │ #> │        Projections:       │ #> │          species          │ #> │       bill_length_mm      │ #> │       bill_depth_mm       │ #> │            sex            │ #> │                           │ #> │         ~344 Rows         │ #> └───────────────────────────┘ out$mean_bill_area #> [1] 656.8523 819.7503 770.2627 694.9360 984.2279 out #> # A duckplyr data frame: 3 variables #>   species   sex    mean_bill_area #>   <chr>     <chr>           <dbl> #> 1 Adelie    female           657. #> 2 Chinstrap female           820. #> 3 Adelie    male             770. #> 4 Adelie    NA               695. #> 5 Chinstrap male             984."},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"extensibility","dir":"Articles","previous_headings":"","what":"Extensibility","title":"Use of duckplyr in other packages","text":"duckplyr also defines set generics provide low-level implementer’s interface dplyr’s high-level user interface. packages may implement methods generics.","code":"library(conflicted) library(dplyr) conflict_prefer(\"filter\", \"dplyr\") #> [conflicted] Removing existing preference. #> [conflicted] Will prefer dplyr::filter over any other package. library(duckplyr) #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`. #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`. # Create a relational to be used by examples below new_dfrel <- function(x) {   stopifnot(is.data.frame(x))   new_relational(list(x), class = \"dfrel\") } mtcars_rel <- new_dfrel(mtcars[1:5, 1:4])  # Example 1: return a data.frame rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                    mpg cyl disp  hp #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Datsun 710        22.8   4  108  93 #> Hornet 4 Drive    21.4   6  258 110 #> Hornet Sportabout 18.7   8  360 175  # Example 2: A (random) filter rel_filter.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the predicates defined   # by the exprs argument   new_dfrel(df[sample.int(nrow(df), 3, replace = TRUE), ]) }  rel_filter(   mtcars_rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))     )   ) ) #> [[1]] #>                      mpg cyl disp  hp #> Hornet Sportabout   18.7   8  360 175 #> Hornet 4 Drive      21.4   6  258 110 #> Hornet Sportabout.1 18.7   8  360 175 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 3: A custom projection rel_project.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, base::ncol(df)))]) }  rel_project(   mtcars_rel,   list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\")) ) #> [[1]] #>                    mpg cyl disp #> Mazda RX4         21.0   6  160 #> Mazda RX4 Wag     21.0   6  160 #> Datsun 710        22.8   4  108 #> Hornet 4 Drive    21.4   6  258 #> Hornet Sportabout 18.7   8  360 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 4: A custom ordering (eg, ascending by mpg) rel_order.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[order(df[[1]]), ]) }  rel_order(   mtcars_rel,   list(relexpr_reference(\"mpg\")) ) #> [[1]] #>                    mpg cyl disp  hp #> Hornet Sportabout 18.7   8  360 175 #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Hornet 4 Drive    21.4   6  258 110 #> Datsun 710        22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 5: A custom join rel_join.dfrel <- function(left, right, conds, join, ...) {   left_df <- unclass(left)[[1]]   right_df <- unclass(right)[[1]]    # A real implementation would evaluate the expressions   # defined by the conds argument,   # use different join types based on the join argument,   # and implement the join itself instead of relaying to left_join().   new_dfrel(dplyr::left_join(left_df, right_df)) }  rel_join(new_dfrel(data.frame(mpg = 21)), mtcars_rel) #> Joining with `by = join_by(mpg)` #> The duckplyr package is configured to fall back to dplyr when it #> encounters an incompatibility. Fallback events can be collected and #> uploaded for analysis to guide future development. By default, no data #> will be collected or uploaded. ℹ A fallback situation just occurred. The #> following information would have been recorded: #> {\"version\":\"0.4.1\",\"message\":\"Need data frame without row names to #> convert to relational, got\\ncharacter row #> names.\",\"name\":\"left_join\",\"x\":{\"...1\":\"numeric\"},\"y\":{\"...1\":\"numeric\",\"...2\":\"numeric\",\"...3\":\"numeric\",\"...4\":\"numeric\"},\"args\":{\"copy\":false,\"na_matches\":[\"na\",\"never\"],\"multiple\":\"all\",\"unmatched\":\"drop\"}} #> → Run `duckplyr::fallback_sitrep()` to review the current settings. → Run #> `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)` to enable fallback logging, #> and `Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = TRUE)` in addition to enable #> printing of fallback situations to the console. → Run #> `duckplyr::fallback_review()` to review the available reports, and #> `duckplyr::fallback_upload()` to upload them. ℹ See #> `?duckplyr::fallback()` for details. ℹ This message will be displayed #> once every eight hours. #> Joining with `by = join_by(mpg)` #> [[1]] #>   mpg cyl disp  hp #> 1  21   6  160 110 #> 2  21   6  160 110 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 6: Limit the maximum rows returned rel_limit.dfrel <- function(rel, n, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[seq_len(n), ]) }  rel_limit(mtcars_rel, 3) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 7: Suppress duplicate rows #  (ignoring row names) rel_distinct.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[!duplicated(df), ]) }  rel_distinct(new_dfrel(mtcars[1:3, 1:4])) #> [[1]] #>             mpg cyl disp  hp #> Mazda RX4  21.0   6  160 110 #> Datsun 710 22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  # Example 8: Return column names rel_names.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    names(df) }  rel_names(mtcars_rel) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"verbs","dir":"Articles","previous_headings":"","what":"Verbs","title":"Translations","text":"dplyr verbs implemented within duckplyr. unsupported verbs, duckplyr automatically falls back dplyr. See ?-supported list verbs duckplyr provide method. See reference index list verbs corresponding duckplyr methods. Refer contributing guide learn suggest addition new verb.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"functions-within-verbs","dir":"Articles","previous_headings":"","what":"Functions within verbs","title":"Translations","text":"functions used dplyr verbs, translations must provided. now, translations provided: Parentheses: ( (?Paren) Comparison operators: ==, >, !=, <, >=, <= (?Comparison) Basic arithmetics: +, /, -, * (?Arithmetic) Math functions: log10(), log(), abs() Logical operators: !, &, | Branching conversion: .na(), dplyr::if_else(), .integer(), strftime() String manipulation: grepl(), substr() Date manipulation: lubridate::hour(), lubridate::minute(), lubridate::second(), lubridate::wday() Aggregation sum(), dplyr::n(), dplyr::n_distinct() mean(), median(), sd() min(), max() () dplyr::first(), dplyr::last(), dplyr::nth() Ranking dplyr::row_number() rank(), dplyr::min_rank(), dplyr::dense_rank() dplyr::percent_rank(), dplyr::cume_dist() dplyr::ntile() Shifting: dplyr::lag(), dplyr::lead() Special cases $ (?Extract) implemented LHS .data .env %% (?match) implemented RHS constant 100 values dplyr::desc() implemented context dplyr::arrange() suppressWarnings() -op Refer contributing guide learn contribute new translations.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannes Mühleisen. Author. Kirill Müller. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mühleisen H, Müller K (2024). duckplyr: 'DuckDB'-Backed Version 'dplyr'. R package version 0.4.1.9007, https://github.com/tidyverse/duckplyr, https://duckplyr.tidyverse.org.","code":"@Manual{,   title = {duckplyr: A 'DuckDB'-Backed Version of 'dplyr'},   author = {Hannes Mühleisen and Kirill Müller},   year = {2024},   note = {R package version 0.4.1.9007, https://github.com/tidyverse/duckplyr},   url = {https://duckplyr.tidyverse.org}, }"},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"duckplyr-","dir":"","previous_headings":"","what":"A DuckDB-Backed Version of dplyr","title":"A DuckDB-Backed Version of dplyr","text":"drop-replacement dplyr, powered DuckDB fast operation. dplyr grammar data manipulation tidyverse. duckplyr package run existing dplyr code identical results, using DuckDB possible compute results faster. addition, can analyze larger--memory datasets straight files disk S3 storage. new dplyr, best place start data transformation chapter R Data Science.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A DuckDB-Backed Version of dplyr","text":"Install duckplyr CRAN : can also install development version duckplyr R-universe: GitHub :","code":"install.packages(\"duckplyr\") install.packages(\"duckplyr\", repos = c(\"https://tidyverse.r-universe.dev\", \"https://cloud.r-project.org\")) # install.packages(\"pak\", repos = sprintf(\"https://r-lib.github.io/p/pak/stable/%s/%s/%s\", .Platform$pkgType, R.Version()$os, R.Version()$arch)) pak::pak(\"tidyverse/duckplyr\")"},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A DuckDB-Backed Version of dplyr","text":"Calling library(duckplyr) overwrites dplyr methods, enabling duckplyr instead entire session. turn , call methods_restore(). See also companion demo repository use case large dataset. example illustrates usage duckplyr data frames R session (“session-wide”). Use library(duckplyr) duckplyr::methods_overwrite() overwrite dplyr methods enable processing duckdb data frames: result plain tibble now: Querying number rows also starts computation: Restart R, call duckplyr::methods_restore() revert default dplyr implementation. dplyr active :","code":"library(conflicted) library(dplyr) conflict_prefer(\"filter\", \"dplyr\", quiet = TRUE) library(duckplyr) duckplyr::methods_overwrite() out <-   palmerpenguins::penguins %>%   # CAVEAT: factor columns are not supported yet   mutate(across(where(is.factor), as.character)) %>%   mutate(bill_area = bill_length_mm * bill_depth_mm) %>%   summarize(.by = c(species, sex), mean_bill_area = mean(bill_area)) %>%   filter(species != \"Gentoo\") class(out) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" nrow(out) #> [1] 5 duckplyr::methods_restore() #> ℹ Restoring dplyr methods. palmerpenguins::penguins %>%   # CAVEAT: factor columns are not supported yet   mutate(across(where(is.factor), as.character)) %>%   mutate(bill_area = bill_length_mm * bill_depth_mm) %>%   summarize(.by = c(species, sex), mean_bill_area = mean(bill_area)) %>%   filter(species != \"Gentoo\") #> # A tibble: 5 × 3 #>   species   sex    mean_bill_area #>   <chr>     <chr>           <dbl> #> 1 Adelie    male             770. #> 2 Adelie    female           657. #> 3 Adelie    NA                NA  #> 4 Chinstrap female           820. #> 5 Chinstrap male             984."},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"using-duckplyr-in-other-packages","dir":"","previous_headings":"","what":"Using duckplyr in other packages","title":"A DuckDB-Backed Version of dplyr","text":"Refer vignette(\"developers\", package = \"duckplyr\").","code":""},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"telemetry","dir":"","previous_headings":"","what":"Telemetry","title":"A DuckDB-Backed Version of dplyr","text":"like guide efforts towards improving duckplyr, focusing features impact. end, duckplyr collects uploads telemetry data, permitted user: collection happen unless user explicitly opts . Uploads done upon request . option automatically upload package loaded, also opt-. data collected contains: package version error message input data frames, structure included (column types ), column names data first time package encounters unsupported function, data type, operation, instructions printed console.","code":"palmerpenguins::penguins %>%   duckplyr::as_duckplyr_tibble() %>%   transmute(bill_area = bill_length_mm * bill_depth_mm) %>%   head(3) #> The duckplyr package is configured to fall back to dplyr when it encounters an #> incompatibility. Fallback events can be collected and uploaded for analysis to #> guide future development. By default, no data will be collected or uploaded. #> ℹ A fallback situation just occurred. The following information would have been #>   recorded: #>   {\"version\":\"0.4.1\",\"message\":\"Can't convert columns of class <factor> to #>   relational. Affected #>   column:\\n`...1`.\",\"name\":\"transmute\",\"x\":{\"...1\":\"factor\",\"...2\":\"factor\",\"...3\":\"numeric\",\"...4\":\"numeric\",\"...5\":\"integer\",\"...6\":\"integer\",\"...7\":\"factor\",\"...8\":\"integer\"},\"args\":{\"dots\":{\"...9\":\"...3 #>   * ...4\"}}} #> → Run `duckplyr::fallback_sitrep()` to review the current settings. #> → Run `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)` to enable fallback logging, #>   and `Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = TRUE)` in addition to enable #>   printing of fallback situations to the console. #> → Run `duckplyr::fallback_review()` to review the available reports, and #>   `duckplyr::fallback_upload()` to upload them. #> ℹ See `?duckplyr::fallback()` for details. #> ℹ This message will be displayed once every eight hours. #> # A duckplyr data frame: 1 variable #>   bill_area #>       <dbl> #> 1      731. #> 2      687. #> 3      725."},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"how-is-this-different-from-dbplyr","dir":"","previous_headings":"","what":"How is this different from dbplyr?","title":"A DuckDB-Backed Version of dplyr","text":"duckplyr package dplyr backend uses DuckDB, high-performance, embeddable analytical database. designed fully compatible drop-replacement dplyr, exactly syntax semantics: Input output data frames tibbles. dplyr verbs supported, fallback. R data types functions supported, fallback. SQL generated. dbplyr package dplyr backend connects SQL databases, designed work various databases support SQL, including DuckDB. Data must copied collected database, syntax semantics similar identical plain dplyr.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Anti join — anti_join.duckplyr_df","title":"Anti join — anti_join.duckplyr_df","text":"method dplyr::anti_join() generic. anti_join() returns rows x without match y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anti join — anti_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' anti_join(x, y, by = NULL, copy = FALSE, ..., na_matches = c(\"na\", \"never\"))"},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anti join — anti_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . ... parameters passed onto methods. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anti join — anti_join.duckplyr_df","text":"","code":"library(\"dplyr\") # for the data #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(\"duckplyr\") band_members %>% anti_join(band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 1 × 2 #>   name  band   #>   <chr> <chr>  #> 1 Mick  Stones"},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange.duckplyr_df","title":"Order rows using column values — arrange.duckplyr_df","text":"method dplyr::arrange() generic. See \"Fallbacks\" section differences implementation. arrange() orders rows data frame values selected columns. Unlike dplyr verbs, arrange() largely ignores grouping; need explicitly mention grouping variables (use  .by_group = TRUE) order group , functions variables evaluated per data frame, per group.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' arrange(.data, ..., .by_group = FALSE, .locale = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Variables, functions variables. Use desc() sort variable descending order. .by_group TRUE, sort first grouping variable. Applies grouped data frames . .locale locale sort character vectors . NULL, default, uses \"C\" locale unless dplyr.legacy_locale global option escape hatch active. See dplyr-locale help page details. single string stringi::stri_locale_list() supplied, used locale sort . example, \"en\" sort American English locale. requires stringi package. \"C\" supplied, character vectors always sorted C locale. require stringi often much faster supplying locale identifier. C locale English locales, \"en\", particularly comes data containing mix upper lower case letters. explained detail locale help page Default locale section.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Order rows using column values — arrange.duckplyr_df","text":"use arrange.duckplyr_df : .by_group = TRUE, providing value .locale argument, providing value dplyr.legacy_locale option. code fall back dplyr::arrange() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange.duckplyr_df","text":"","code":"library(\"duckplyr\") arrange(mtcars, cyl, disp) #> The duckplyr package is configured to fall back to dplyr when it #> encounters an incompatibility. Fallback events can be collected and #> uploaded for analysis to guide future development. By default, no data #> will be collected or uploaded. #> ℹ A fallback situation just occurred. The following information would #>   have been recorded: #>   {\"version\":\"0.4.1\",\"message\":\"Need data frame without row names to #>   convert to relational, got\\ncharacter row #>   names.\",\"name\":\"arrange\",\"x\":{\"...1\":\"numeric\",\"...2\":\"numeric\",\"...3\":\"numeric\",\"...4\":\"numeric\",\"...5\":\"numeric\",\"...6\":\"numeric\",\"...7\":\"numeric\",\"...8\":\"numeric\",\"...9\":\"numeric\",\"...10\":\"numeric\",\"...11\":\"numeric\"},\"args\":{\"dots\":[\"...2\",\"...3\"],\".by_group\":false}} #> → Run `duckplyr::fallback_sitrep()` to review the current settings. #> → Run `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)` to enable fallback #>   logging, and `Sys.setenv(DUCKPLYR_FALLBACK_VERBOSE = TRUE)` in addition #>   to enable printing of fallback situations to the console. #> → Run `duckplyr::fallback_review()` to review the available reports, and #>   `duckplyr::fallback_upload()` to upload them. #> ℹ See `?duckplyr::fallback()` for details. #> ℹ This message will be displayed once every eight hours. #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 arrange(mtcars, desc(disp)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a duckplyr data frame — as_duckplyr_df","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"functions convert data-frame-like input object class \"duckpylr_df\". objects, dplyr verbs mutate(), select() filter()  attempt use DuckDB. possible, original dplyr implementation used. as_duckplyr_df() requires input plain data frame tibble, fail classes, including subclasses \"data.frame\" \"tbl_df\". behavior likely change, rely . as_duckplyr_tibble() converts input tibble duckplyr data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"","code":"as_duckplyr_df(.data)  as_duckplyr_tibble(.data)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":".data data frame tibble transform","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"as_duckplyr_df(), object class \"duckplyr_df\", inheriting classes .data argument. as_duckplyr_tibble(), object class c(\"duckplyr_df\", class(tibble())) .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"Set DUCKPLYR_FALLBACK_INFO DUCKPLYR_FORCE environment variables control behavior, see config details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"","code":"tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  tibble(a = 1:3) %>%   as_duckplyr_df() %>%   mutate(b = a + 1) #> Warning: `as_duckplyr_df()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `as_ducktbl()` instead. #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration options — config","title":"Configuration options — config","text":"behavior duckplyr can fine-tuned several environment variables, one option.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":"environment-variables","dir":"Reference","previous_headings":"","what":"Environment variables","title":"Configuration options — config","text":"DUCKPLYR_OUTPUT_ORDER: TRUE, row output order preserved. default may change row order dplyr keep stable. DUCKPLYR_FORCE: TRUE, fail duckdb handle request. DUCKPLYR_FALLBACK_INFO: TRUE, print message fallback dplyr occurs duckdb handle request. DUCKPLYR_CHECK_ROUNDTRIP: TRUE, check columns roundtripped perfectly creating relational object data frame, slow, mostly useful debugging. default check roundtrip attributes. DUCKPLYR_EXPERIMENTAL: TRUE, pass experimental = TRUE certain duckdb functions. Currently unused. DUCKPLYR_METHODS_OVERWRITE: TRUE, call methods_overwrite() package loaded. See fallback options related logging uploading fallback events.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configuration options — config","text":"","code":"# Sys.setenv(DUCKPLYR_OUTPUT_ORDER = TRUE) data.frame(a = 3:1) %>%   as_duckplyr_df() %>%   inner_join(data.frame(a = 1:4), by = \"a\") #>   a #> 1 1 #> 2 2 #> 3 3  withr::with_envvar(c(DUCKPLYR_OUTPUT_ORDER = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckplyr_df() %>%     inner_join(data.frame(a = 1:4), by = \"a\") }) #>   a #> 1 3 #> 2 2 #> 3 1  # Sys.setenv(DUCKPLYR_FORCE = TRUE) add_one <- function(x) {   x + 1 }  data.frame(a = 3:1) %>%   as_duckplyr_df() %>%   mutate(b = add_one(a)) #>   a b #> 1 3 4 #> 2 2 3 #> 3 1 2  try(withr::with_envvar(c(DUCKPLYR_FORCE = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckplyr_df() %>%     mutate(b = add_one(a)) })) #> Error in rel_find_call(expr[[1]], env) :  #>   No translation for function `add_one`.  # Sys.setenv(DUCKPLYR_FALLBACK_INFO = TRUE) withr::with_envvar(c(DUCKPLYR_FALLBACK_INFO = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckplyr_df() %>%     mutate(b = add_one(a)) }) #> Error processing with relational. #> Caused by error in `rel_find_call()` at duckplyr/R/translate.R:160:3: #> ! No translation for function `add_one`. #>   a b #> 1 3 4 #> 2 2 3 #> 3 1 2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count.duckplyr_df","title":"Count the observations in each group — count.duckplyr_df","text":"method dplyr::count() generic. See \"Fallbacks\" section differences implementation. count() lets quickly count unique values one variables: df %>% count(, b) roughly equivalent df %>% group_by(, b) %>% summarise(n = n()). count() paired tally(), lower-level helper equivalent df %>% summarise(n = n()). Supply wt perform weighted counts, switching summary n = n() n = sum(wt).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = group_by_drop_default(x) )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count.duckplyr_df","text":"x data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <data-masking> Variables group . wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, use nn. column called n nn, 'll use nnn, , adding ns gets new name. .drop Handling factor levels appear data, passed group_by(). count(): FALSE include counts empty groups (.e. levels factors exist data). add_count(): deprecated since actually affect output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Count the observations in each group — count.duckplyr_df","text":"use count.duckplyr_df complex expressions ..., .drop = FALSE, sort = TRUE. code fall back dplyr::count() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — count.duckplyr_df","text":"","code":"library(\"duckplyr\") count(mtcars, am) #>   am  n #> 1  0 19 #> 2  1 13"},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Parquet, CSV, and other files using DuckDB — df_from_file","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"df_from_file() uses arbitrary table functions read data. See https://duckdb.org/docs/data/overview documentation available functions options. read multiple files schema, pass wildcard character vector path argument, duckplyr_df_from_file() thin wrapper around df_from_file() calls as_duckplyr_df() output. functions ingest data file using table function. results transparently converted data frame, data read resulting data frame actually accessed. df_from_csv() reads CSV file using read_csv_auto() table function. duckplyr_df_from_csv() thin wrapper around df_from_csv() calls as_duckplyr_df() output. df_from_parquet() reads Parquet file using read_parquet() table function. duckplyr_df_from_parquet() thin wrapper around df_from_parquet() calls as_duckplyr_df() output. df_to_parquet() writes data frame Parquet file via DuckDB. data frame duckplyr_df, materialization occurs outside R. existing file overwritten. function requires duckdb >= 0.10.0.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"","code":"df_from_file(path, table_function, ..., options = list(), class = NULL)  duckplyr_df_from_file(   path,   table_function,   ...,   options = list(),   class = NULL )  df_from_csv(path, ..., options = list(), class = NULL)  duckplyr_df_from_csv(path, ..., options = list(), class = NULL)  df_from_parquet(path, ..., options = list(), class = NULL)  duckplyr_df_from_parquet(path, ..., options = list(), class = NULL)  df_to_parquet(data, path)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"path Path files, glob patterns * ? supported. table_function name table-valued DuckDB function \"read_parquet\", \"read_csv\", \"read_csv_auto\" \"read_json\". ... dots future extensions must empty. options Arguments DuckDB function indicated table_function. class class output. default, tibble created. returned object always data frame. Use class = \"data.frame\" class = character() create plain data frame. data data frame written disk.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"data frame df_from_file(), duckplyr_df duckplyr_df_from_file(), extended provided class.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"","code":"# Create simple CSV file path <- tempfile(\"duckplyr_test_\", fileext = \".csv\") write.csv(data.frame(a = 1:3, b = letters[4:6]), path, row.names = FALSE)  # Reading is immediate df <- df_from_csv(path)  # Materialization only upon access names(df) #> [1] \"a\" \"b\" df$a #> [1] 1 2 3  # Return as tibble, specify column types: df_from_file(   path,   \"read_csv\",   options = list(delim = \",\", types = list(c(\"DOUBLE\", \"VARCHAR\"))),   class = class(tibble()) ) #> # A tibble: 3 × 2 #>       a b     #>   <dbl> <chr> #> 1     1 d     #> 2     2 e     #> 3     3 f      # Read multiple file at once path2 <- tempfile(\"duckplyr_test_\", fileext = \".csv\") write.csv(data.frame(a = 4:6, b = letters[7:9]), path2, row.names = FALSE)  duckplyr_df_from_csv(file.path(tempdir(), \"duckplyr_test_*.csv\")) #> # A duckplyr data frame: 2 variables #>       a b     #>   <dbl> <chr> #> 1     4 g     #> 2     5 h     #> 3     6 i     #> 4     1 d     #> 5     2 e     #> 6     3 f      unlink(c(path, path2))  # Write a Parquet file: path_parquet <- tempfile(fileext = \".parquet\") df_to_parquet(df, path_parquet) #> NULL  # With a duckplyr_df, the materialization occurs outside of R: df %>%   as_duckplyr_df() %>%   mutate(b = a + 1) %>%   df_to_parquet(path_parquet) #> NULL  duckplyr_df_from_parquet(path_parquet) #> # A duckplyr data frame: 2 variables #>       a     b #>   <dbl> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  unlink(path_parquet)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep distinct/unique rows — distinct.duckplyr_df","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"method dplyr::distinct() generic. Keep unique/distinct rows data frame. similar unique.data.frame() considerably faster.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' distinct(.data, ..., .keep_all = FALSE)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Optional variables use determining uniqueness. multiple rows given combination inputs, first row preserved. omitted, use variables data frame. .keep_all TRUE, keep variables .data. combination ... distinct, keeps first row values.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"","code":"df <- tibble(   x = sample(10, 100, rep = TRUE),   y = sample(10, 100, rep = TRUE) ) nrow(df) #> [1] 100 nrow(distinct(df)) #> [1] 59"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","title":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","text":"drop-replacement 'dplyr', powered 'DuckDB' performance. Also defines set generics provide low-level implementer's interface high-level user interface 'dplyr'.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) Authors: Hannes Mühleisen (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a statement for the default connection — duckplyr_execute","title":"Execute a statement for the default connection — duckplyr_execute","text":"duckplyr package relies DBI connection -memory database. duckplyr_execute() function allows running SQL statements connection , e.g., set credentials attach databases.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a statement for the default connection — duckplyr_execute","text":"","code":"duckplyr_execute(sql)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a statement for the default connection — duckplyr_execute","text":"sql statement run.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a statement for the default connection — duckplyr_execute","text":"return value DBI::dbExecute() call, invisibly.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a statement for the default connection — duckplyr_execute","text":"","code":"duckplyr_execute(\"SET threads TO 2\")"},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":null,"dir":"Reference","previous_headings":"","what":"duckplyr data frames — ducktbl","title":"duckplyr data frames — ducktbl","text":"Data frames backed duckplyr special class, \"duckplyr_df\", addition default classes. ensures dplyr methods dispatched correctly. objects, dplyr verbs mutate(), select() filter()  attempt use DuckDB. possible, original dplyr implementation used. ducktbl() works like tibble(). contrast dbplyr, duckplyr data frames \"eager\" default. avoid unwanted expensive computation, can converted \"lazy\" duckplyr frames collect() needs called explicitly. as_ducktbl() converts data frame dplyr lazy table duckplyr data frame. generic function can overridden custom classes. is_ducktbl() returns TRUE x duckplyr data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"duckplyr data frames — ducktbl","text":"","code":"ducktbl(..., .lazy = FALSE)  as_ducktbl(x, ..., .lazy = FALSE)  is_ducktbl(x)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"duckplyr data frames — ducktbl","text":"... ducktbl(), passed tibble(). as_ducktbl(), passed methods. .lazy Logical, whether create lazy duckplyr frame x object convert test.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"duckplyr data frames — ducktbl","text":"ducktbl() as_ducktbl(), object following classes: \"lazy_duckplyr_df\" .lazy TRUE \"duckplyr_df\" Classes tibble is_ducktbl(), scalar logical.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"duckplyr data frames — ducktbl","text":"Set DUCKPLYR_FALLBACK_INFO DUCKPLYR_FORCE environment variables control behavior, see config details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/ducktbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"duckplyr data frames — ducktbl","text":"","code":"x <- ducktbl(a = 1) x #> # A duckplyr data frame: 1 variable #>       a #>   <dbl> #> 1     1  library(dplyr) x %>%   mutate(b = 2) #> # A duckplyr data frame: 2 variables #>       a     b #>   <dbl> <dbl> #> 1     1     2  x$a #> [1] 1  y <- ducktbl(a = 1, .lazy = TRUE) y #> # A duckplyr data frame: 1 variable #>       a #>   <dbl> #> 1     1 try(length(y$a)) #> Error : Materialization is disabled, use collect() or as_tibble() to materialize length(collect(y)$a) #> [1] 1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain details of a tbl — explain.duckplyr_df","title":"Explain details of a tbl — explain.duckplyr_df","text":"method dplyr::explain() generic. generic function gives details object print(), focused human readable output str().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain details of a tbl — explain.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' explain(x, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain details of a tbl — explain.duckplyr_df","text":"x object explain ... parameters possibly used generic","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain details of a tbl — explain.duckplyr_df","text":"","code":"lahman_s <- dbplyr::lahman_sqlite() #> Error in (function (cond) .Internal(C_tryCatchHelper(addr, 1L, cond)))(structure(list(message = \"there is no package called ‘RSQLite’\",     call = loadNamespace(x), package = \"RSQLite\", lib.loc = NULL), class = c(\"packageNotFoundError\", \"error\", \"condition\"))): error in evaluating the argument 'drv' in selecting a method for function 'dbConnect': there is no package called ‘RSQLite’ batting <- tbl(lahman_s, \"Batting\") #> Error: object 'lahman_s' not found explain(batting) #> Error: object 'batting' not found"},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":null,"dir":"Reference","previous_headings":"","what":"Fallback to dplyr — fallback","title":"Fallback to dplyr — fallback","text":"duckplyr package aims providing fully compatible drop-replacement dplyr. achieve , carefully selected subset dplyr's operations, R functions, R data types implemented. Whenever duckplyr encounters incompatibility, falls back dplyr. assist future development, fallback situations can logged console local file uploaded analysis. default, duckplyr log upload anything. functions environment variables page control process. fallback_sitrep() prints current settings fallback logging uploading, number reports ready upload, location logs. fallback_review() prints available reports review console. fallback_upload() uploads available reports central server analysis. server hosted AWS reports stored private S3 bucket. authorized personnel access reports. fallback_purge() deletes available reports.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fallback to dplyr — fallback","text":"","code":"fallback_sitrep()  fallback_review(oldest = NULL, newest = NULL, detail = TRUE)  fallback_upload(oldest = NULL, newest = NULL, strict = TRUE)  fallback_purge(oldest = NULL, newest = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fallback to dplyr — fallback","text":"oldest, newest number oldest newest reports review. specified, reports dispayed. detail Print full content reports. Set FALSE print file names. strict TRUE, function aborts reports fail upload. FALSE, message printed.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fallback to dplyr — fallback","text":"Logging uploading opt-. default, logging, message printed console first time session every 8 hours. following environment variables control logging uploading: DUCKPLYR_FALLBACK_COLLECT controls logging, set 1 greater enable logging. value 0, logging disabled. Future versions duckplyr may start logging additional data thus require higher value enable logging. Set 99 enable logging future versions. Use usethis::edit_r_environ() edit environment file. DUCKPLYR_FALLBACK_VERBOSE controls printing, set TRUE FALSE enable disable printing. value TRUE, message printed console fallback situation. setting relevant logging enabled. DUCKPLYR_FALLBACK_AUTOUPLOAD controls uploading, set 1 greater enable uploading. value 0, uploading disabled. Currently, uploading active value 1 greater. Future versions duckplyr may start logging additional data thus require higher value enable uploading. Set 99 enable uploading future versions. Use usethis::edit_r_environ() edit environment file. DUCKPLYR_FALLBACK_LOG_DIR controls location logs. must point directory (existing ) logs written. default, logs written directory user's cache directory returned tools::R_user_dir(\"duckplyr\", \"cache\"). code related fallback logging uploading fallback.R telemetry.R files.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fallback to dplyr — fallback","text":"","code":"fallback_sitrep() #> The duckplyr package is configured to fall back to dplyr when it #> encounters an incompatibility. Fallback events can be collected and #> uploaded for analysis to guide future development. By default, no data #> will be collected or uploaded. #> ℹ Fallback logging is not controlled and therefore disabled. Enable it #>   with `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 1)`, disable it with #>   `Sys.setenv(DUCKPLYR_FALLBACK_COLLECT = 0)`. #> ℹ Fallback uploading is not controlled and therefore disabled. Enable it #>   with `Sys.setenv(DUCKPLYR_FALLBACK_AUTOUPLOAD = 1)`, disable it with #>   `Sys.setenv(DUCKPLYR_FALLBACK_AUTOUPLOAD = 0)`. #> ℹ See `?duckplyr::fallback()` for details."},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter.duckplyr_df","title":"Keep rows that match a condition — filter.duckplyr_df","text":"method dplyr::select() generic. See \"Fallbacks\" section differences implementation. filter() function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' filter(.data, ..., .by = NULL, .preserve = FALSE)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Keep rows that match a condition — filter.duckplyr_df","text":"use filter.duckplyr_df filter conditions, grouped operation (.set). code fall back dplyr::filter() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter.duckplyr_df","text":"","code":"filter(mtcars, mpg > 30) #>                 mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Fiat 128       32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic    30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1 #> Lotus Europa   30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Full join — full_join.duckplyr_df","title":"Full join — full_join.duckplyr_df","text":"method dplyr::full_join() generic. See \"Fallbacks\" section differences implementation. full_join() keeps observations x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full join — full_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full join — full_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Full join — full_join.duckplyr_df","text":"use full_join.duckplyr_df implicit cross join, value multiple argument default \"\". code fall back dplyr::full_join() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full join — full_join.duckplyr_df","text":"","code":"library(\"dplyr\") full_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 4 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Mick  Stones  NA     #> 4 Keith NA      guitar"},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First Parts of an Object — head.duckplyr_df","title":"Return the First Parts of an Object — head.duckplyr_df","text":"method head() generic. See \"Fallbacks\" section differences implementation. Return first rows data.frame","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First Parts of an Object — head.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' head(x, n = 6L, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First Parts of an Object — head.duckplyr_df","text":"x data.frame n positive integer, many rows return. ... used yet.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Return the First Parts of an Object — head.duckplyr_df","text":"use head.duckplyr_df negative n. code fall back head() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the First Parts of an Object — head.duckplyr_df","text":"","code":"head(mtcars, 2) #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner join — inner_join.duckplyr_df","title":"Inner join — inner_join.duckplyr_df","text":"method dplyr::inner_join() generic. See \"Fallbacks\" section differences implementation. inner_join() keeps observations x matching key y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner join — inner_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner join — inner_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Inner join — inner_join.duckplyr_df","text":"use inner_join.duckplyr_df implicit crossjoin, value multiple argument default \"\". value unmatched argument default \"drop\". code fall back dplyr::inner_join() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner join — inner_join.duckplyr_df","text":"","code":"library(\"dplyr\") inner_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 2 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass"},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect — intersect.duckplyr_df","title":"Intersect — intersect.duckplyr_df","text":"method dplyr::intersect() generic. See \"Fallbacks\" section differences implementation. intersect(x, y) finds rows x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect — intersect.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' intersect(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect — intersect.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Intersect — intersect.duckplyr_df","text":"use intersect.duckplyr_df column names duplicated one tables column names different tables. code fall back dplyr::intersect() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersect — intersect.duckplyr_df","text":"","code":"df1 <- tibble(x = 1:3) df2 <- tibble(x = 3:5) intersect(df1, df2) #> # A tibble: 1 × 1 #>       x #>   <int> #> 1     3"},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Class predicate for duckplyr data frames — is_duckplyr_df","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"Tests input object class \"duckplyr_df\".","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"","code":"is_duckplyr_df(.data)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":".data object test","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"TRUE input object class \"duckplyr_df\", otherwise FALSE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"","code":"tibble(a = 1:3) %>%   is_duckplyr_df() #> Warning: `is_duckplyr_df()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `is_ducktbl()` instead. #> [1] FALSE  tibble(a = 1:3) %>%   as_duckplyr_df() %>%   is_duckplyr_df() #> [1] TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve details about the most recent computation — last_rel","title":"Retrieve details about the most recent computation — last_rel","text":"result computed, specified \"relation\" object. function retrieves object last computation led materialization data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve details about the most recent computation — last_rel","text":"","code":"last_rel()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve details about the most recent computation — last_rel","text":"duckdb \"relation\" object, NULL computation performed yet.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Left join — left_join.duckplyr_df","title":"Left join — left_join.duckplyr_df","text":"method dplyr::left_join() generic. See \"Fallbacks\" section differences implementation. left_join() keeps observations x.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left join — left_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left join — left_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Left join — left_join.duckplyr_df","text":"use left_join.duckplyr_df implicit cross join, value multiple argument default \"\". value unmatched argument default \"drop\". code fall back dplyr::left_join() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left join — left_join.duckplyr_df","text":"","code":"library(\"dplyr\") left_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 3 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Mick  Stones  NA"},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward all dplyr methods to duckplyr — methods_overwrite","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"calling methods_overwrite(), dplyr methods redirected duckplyr duraton session, call methods_restore(). methods_overwrite() function called automatically package loaded environment variable DUCKPLYR_METHODS_OVERWRITE set TRUE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"","code":"methods_overwrite()  methods_restore()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"Called side effects.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"","code":"tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  methods_overwrite() #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`.  tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  methods_restore() #> ℹ Restoring dplyr methods.  tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns (duckplyr) — mutate.duckplyr_df","title":"Create, modify, and delete columns (duckplyr) — mutate.duckplyr_df","text":"method dplyr::mutate() generic. mutate() creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns (duckplyr) — mutate.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' mutate(   .data,   ...,   .by = NULL,   .keep = c(\"all\", \"used\", \"unused\", \"none\"),   .before = NULL,   .after = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns (duckplyr) — mutate.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .keep Control columns .data retained output. Grouping columns columns created ... always kept. \"\" retains columns .data. default. \"used\" retains columns used ... create new columns. useful checking work, displays inputs outputs side--side. \"unused\" retains columns used ... create new columns. useful generate new columns, longer need columns used generate . \"none\" retain extra columns .data. grouping variables columns created ... kept. ., .<tidy-select> Optionally, control new columns appear (default add right hand side). See relocate() details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns (duckplyr) — mutate.duckplyr_df","text":"","code":"library(\"duckplyr\") df <- data.frame(x = c(1, 2), row.names = c(\"a\", \"b\")) df <- mutate(df, y = 2) df #>   x y #> a 1 2 #> b 2 2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational implementer's interface — new_relational","title":"Relational implementer's interface — new_relational","text":"constructor generics described define class helps separating dplyr's user interface actual underlying operations. longer term, help packages implement dplyr interface (dbplyr, dtplyr, arrow similar) focus core details functionality, rather intricacies dplyr's user interface. new_relational() constructs object class \"relational\". Users encouraged provide class argument. typical use case create wrapper function. rel_to_df() extracts data frame representation relational object, used dplyr::collect(). rel_filter() keeps rows match predicate, used dplyr::filter(). rel_project() selects columns creates new columns, used dplyr::select(), dplyr::rename(), dplyr::mutate(), dplyr::relocate(), others. rel_aggregate() combines several rows one, used dplyr::summarize(). rel_order() reorders rows columns expressions, used dplyr::arrange(). rel_join() joins merges two tables, used dplyr::left_join(), dplyr::right_join(), dplyr::inner_join(), dplyr::full_join(), dplyr::cross_join(), dplyr::semi_join(), dplyr::anti_join(). rel_limit() limits number rows table, used utils::head(). rel_distinct() keeps distinct rows table, used dplyr::distinct(). rel_set_intersect() returns rows present tables, used intersect(). rel_set_diff() returns rows present tables, used setdiff(). rel_set_symdiff() returns rows present tables, used dplyr::symdiff(). rel_union_all() returns rows present tables, used dplyr::union_all(). rel_explain() prints explanation plan executed relational object. rel_alias() returns alias name relational object. rel_set_alias() sets alias name relational object. rel_names() returns column names character vector, used colnames().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational implementer's interface — new_relational","text":"","code":"new_relational(..., class = NULL)  rel_to_df(rel, ...)  rel_filter(rel, exprs, ...)  rel_project(rel, exprs, ...)  rel_aggregate(rel, groups, aggregates, ...)  rel_order(rel, orders, ascending, ...)  rel_join(   left,   right,   conds,   join = c(\"inner\", \"left\", \"right\", \"outer\", \"cross\", \"semi\", \"anti\"),   join_ref_type = c(\"regular\", \"natural\", \"cross\", \"positional\", \"asof\"),   ... )  rel_limit(rel, n, ...)  rel_distinct(rel, ...)  rel_set_intersect(rel_a, rel_b, ...)  rel_set_diff(rel_a, rel_b, ...)  rel_set_symdiff(rel_a, rel_b, ...)  rel_union_all(rel_a, rel_b, ...)  rel_explain(rel, ...)  rel_alias(rel, ...)  rel_set_alias(rel, alias, ...)  rel_names(rel, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational implementer's interface — new_relational","text":"... Reserved future extensions, must empty. class Classes added front \"relational\" base class. rel, rel_a, rel_b, left, right relational object. exprs list \"relational_relexpr\" objects filter , created new_relexpr(). groups list expressions group . aggregates list expressions aggregates compute. orders list expressions order . ascending logical vector describing sort order. conds list expressions use join. join type join. join_ref_type ref type join. n number rows. alias new alias","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational implementer's interface — new_relational","text":"new_relational() returns new relational object. rel_to_df() returns data frame. rel_names() returns character vector. generics return modified relational object.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational implementer's interface — new_relational","text":"","code":"new_dfrel <- function(x) {   stopifnot(is.data.frame(x))   new_relational(list(x), class = \"dfrel\") } mtcars_rel <- new_dfrel(mtcars[1:5, 1:4])  rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                    mpg cyl disp  hp #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Datsun 710        22.8   4  108  93 #> Hornet 4 Drive    21.4   6  258 110 #> Hornet Sportabout 18.7   8  360 175  rel_filter.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the predicates defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, nrow(df))), ]) }  rel_filter(   mtcars_rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))     )   ) ) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_project.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, ncol(df)))]) }  rel_project(   mtcars_rel,   list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\")) ) #> [[1]] #>                    mpg cyl disp #> Mazda RX4         21.0   6  160 #> Mazda RX4 Wag     21.0   6  160 #> Datsun 710        22.8   4  108 #> Hornet 4 Drive    21.4   6  258 #> Hornet Sportabout 18.7   8  360 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_order.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[order(df[[1]]), ]) }  rel_order(   mtcars_rel,   list(relexpr_reference(\"mpg\")) ) #> [[1]] #>                    mpg cyl disp  hp #> Hornet Sportabout 18.7   8  360 175 #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Hornet 4 Drive    21.4   6  258 110 #> Datsun 710        22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\" rel_join.dfrel <- function(left, right, conds, join, ...) {   left_df <- unclass(left)[[1]]   right_df <- unclass(right)[[1]]    # A real implementation would evaluate the expressions   # defined by the conds argument,   # use different join types based on the join argument,   # and implement the join itself instead of relaying to left_join().   new_dfrel(dplyr::left_join(left_df, right_df)) }  rel_join(new_dfrel(data.frame(mpg = 21)), mtcars_rel) #> Joining with `by = join_by(mpg)` #> [[1]] #>   mpg cyl disp  hp #> 1  21   6  160 110 #> 2  21   6  160 110 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_limit.dfrel <- function(rel, n, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[seq_len(n), ]) }  rel_limit(mtcars_rel, 3) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_distinct.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[!duplicated(df), ]) }  rel_distinct(new_dfrel(mtcars[1:3, 1:4])) #> [[1]] #>             mpg cyl disp  hp #> Mazda RX4  21.0   6  160 110 #> Datsun 710 22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_names.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    names(df) }  rel_names(mtcars_rel) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational expressions — new_relexpr","title":"Relational expressions — new_relexpr","text":"functions provide backend-agnostic way construct expression trees built column references, constants, functions. subexpressions expression tree can alias. new_relexpr() constructs object class \"relational_relexpr\". used higher-level constructors, users rarely need call directly. relexpr_reference() constructs reference column. relexpr_constant() wraps constant value. relexpr_function() applies function. arguments function list expression objects. relexpr_comparison() wraps comparison expression. relexpr_window() applies function window, similarly SQL clause. relexpr_set_alias() assigns alias expression.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational expressions — new_relexpr","text":"","code":"new_relexpr(x, class = NULL)  relexpr_reference(name, rel = NULL, alias = NULL)  relexpr_constant(val, alias = NULL)  relexpr_function(name, args, alias = NULL)  relexpr_comparison(cmp_op, exprs)  relexpr_window(   expr,   partitions,   order_bys = list(),   offset_expr = NULL,   default_expr = NULL,   alias = NULL )  relexpr_set_alias(expr, alias = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational expressions — new_relexpr","text":"x object. class Classes added front \"relational_relexpr\" base class. name name column function reference. rel name relation reference. alias alias new expression. val value use constant expression. args Function arguments, list expr objects. cmp_op Comparison operator, e.g., \"<\" \"==\". exprs Expressions compare, list expr objects. expr expr object. partitions Partitions, list expr objects. order_bys variables order results (list). offset_expr offset relational expression. default_expr default relational expression.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational expressions — new_relexpr","text":"object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\"","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational expressions — new_relexpr","text":"","code":"relexpr_set_alias(   alias = \"my_predicate\",   relexpr_function(     \"<\",     list(       relexpr_reference(\"my_number\"),       relexpr_constant(42)     )   ) ) #> List of 3 #>  $ name : chr \"<\" #>  $ args :List of 2 #>   ..$ :List of 3 #>   .. ..$ name : chr \"my_number\" #>   .. ..$ rel  : NULL #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_reference\" \"relational_relexpr\" #>   ..$ :List of 2 #>   .. ..$ val  : num 42 #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_constant\" \"relational_relexpr\" #>  $ alias: chr \"my_predicate\" #>  - attr(*, \"class\")= chr [1:2] \"relational_relexpr_function\" \"relational_relexpr\""},{"path":"https://duckplyr.tidyverse.org/dev/reference/not-supported.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbs not implemented in duckplyr — not-supported","title":"Verbs not implemented in duckplyr — not-supported","text":"following dplyr generics counterpart method duckplyr. want help add new verb, please refer contributing guide https://duckplyr.tidyverse.org/CONTRIBUTING.html#support-new-verbs","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/not-supported.html","id":"unsupported-verbs","dir":"Reference","previous_headings":"","what":"Unsupported verbs","title":"Verbs not implemented in duckplyr — not-supported","text":"verbs, duckplyr fall back dplyr. add_count() compute() cross_join() dplyr::() dplyr::group_by() dplyr::group_indices() dplyr::group_keys() dplyr::group_map() dplyr::group_modify() dplyr::group_nest() dplyr::group_size() dplyr::group_split() dplyr::group_trim() dplyr::groups() dplyr::n_groups() nest_by() nest_join() reframe() rename_with() rows_append() rows_delete() rows_insert() rows_patch() rows_update() rows_upsert() dplyr::rowwise() setequal() slice_head() slice_sample() slice_tail() slice() ungroup()","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a single column — pull.duckplyr_df","title":"Extract a single column — pull.duckplyr_df","text":"method dplyr::pull() generic. See \"Fallbacks\" section differences implementation. pull() similar $. mostly useful looks little nicer pipes, also works remote data frames, can optionally name output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a single column — pull.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' pull(.data, var = -1, name = NULL, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a single column — pull.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. var variable specified : literal variable name positive integer, giving position counting left negative integer, giving position counting right. default returns last column (assumption column created recently). argument taken expression supports quasiquotation (can unquote column names column locations). name optional parameter specifies column used names named vector. Specified similar manner var. ... use methods.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Extract a single column — pull.duckplyr_df","text":"use pull.duckplyr_df selection returns columns: code fall back dplyr::pull() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a single column — pull.duckplyr_df","text":"","code":"pull(mtcars, cyl) #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 pull(mtcars, 1) #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 #> [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 #> [29] 15.8 19.7 15.0 21.4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%, across, add_count, add_tally, all_equal, anti_join, arrange, , bind_cols, bind_rows, c_across, case_match, case_when, coalesce, collapse, collect, compute, consecutive_id, count, cross_join, cumall, cumany, cume_dist, cummean, cur_column, cur_group, cur_group_id, cur_group_rows, dense_rank, desc, distinct, explain, filter, first, full_join, if_all, if_any, if_else, inner_join, intersect, join_by, lag, last, lead, left_join, min_rank, mutate, n, n_distinct, na_if, near, nest_by, nest_join, nth, ntile, order_by, percent_rank, pick, pull, reframe, relocate, rename, rename_with, right_join, row_number, rows_append, rows_delete, rows_insert, rows_patch, rows_update, rows_upsert, sample_frac, sample_n, select, semi_join, setdiff, setequal, slice, slice_head, slice_max, slice_min, slice_sample, slice_tail, summarise, summarize, symdiff, tally, tbl_vars, tibble, top_n, transmute, ungroup, union, union_all, with_groups, with_order rlang .data tibble add_row, as_tibble, tribble tidyselect all_of, any_of, contains, everything, last_col, matches, num_range, one_of, starts_with, ","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order — relocate.duckplyr_df","title":"Change column order — relocate.duckplyr_df","text":"method dplyr::relocate() generic. See \"Fallbacks\" section differences implementation. Use relocate() change column positions, using syntax select() make easy move blocks columns .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order — relocate.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order — relocate.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> Columns move. ., .<tidy-select> Destination columns selected .... Supplying neither move columns left-hand side; specifying error.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Change column order — relocate.duckplyr_df","text":"use relocate.duckplyr_df selection returns columns: code fall back dplyr::relocate() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order — relocate.duckplyr_df","text":"","code":"df <- tibble(a = 1, b = 1, c = 1, d = \"a\", e = \"a\", f = \"a\") relocate(df, f) #> # A tibble: 1 × 6 #>   f         a     b     c d     e     #>   <chr> <dbl> <dbl> <dbl> <chr> <chr> #> 1 a         1     1     1 a     a"},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename.duckplyr_df","title":"Rename columns — rename.duckplyr_df","text":"method dplyr::rename() generic. See \"Fallbacks\" section differences implementation. rename() changes names individual variables using new_name = old_name syntax.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' rename(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... rename(): <tidy-select> Use new_name = old_name rename selected variables. rename_with(): additional arguments passed onto .fn.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Rename columns — rename.duckplyr_df","text":"use rename.duckplyr_df selection returns columns: code fall back dplyr::rename() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename.duckplyr_df","text":"","code":"rename(mtcars, thing = mpg) #>                     thing cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4            21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag        21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710           22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive       21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout    18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant              18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360           14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D            24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230             22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280             19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C            17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE           16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL           17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC          15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood   10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial    14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128             32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic          30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla       33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona        21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger     15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin          15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28           13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird     19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9            27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2        26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa         30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L       15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino         19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora        15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E           21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Right join — right_join.duckplyr_df","title":"Right join — right_join.duckplyr_df","text":"method dplyr::right_join() generic. See \"Fallbacks\" section differences implementation. right_join() keeps observations y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right join — right_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right join — right_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Right join — right_join.duckplyr_df","text":"use right_join.duckplyr_df implicit cross join, value multiple argument default \"\". value unmatched argument default \"drop\". code fall back dplyr::right_join() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right join — right_join.duckplyr_df","text":"","code":"library(\"dplyr\") right_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 3 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Keith NA      guitar"},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop columns using their names and types — select.duckplyr_df","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"method dplyr::select() generic. See \"Fallbacks\" section differences implementation. Select (optionally rename) variables data frame, using concise mini-language makes easy refer variables based name (e.g. :f selects columns left f right) type (e.g. (.numeric) selects numeric columns).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' select(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"use select.duckplyr_df expression, selection returns columns: code fall back dplyr::select() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"","code":"library(\"duckplyr\") select(mtcars, mpg) #>                      mpg #> Mazda RX4           21.0 #> Mazda RX4 Wag       21.0 #> Datsun 710          22.8 #> Hornet 4 Drive      21.4 #> Hornet Sportabout   18.7 #> Valiant             18.1 #> Duster 360          14.3 #> Merc 240D           24.4 #> Merc 230            22.8 #> Merc 280            19.2 #> Merc 280C           17.8 #> Merc 450SE          16.4 #> Merc 450SL          17.3 #> Merc 450SLC         15.2 #> Cadillac Fleetwood  10.4 #> Lincoln Continental 10.4 #> Chrysler Imperial   14.7 #> Fiat 128            32.4 #> Honda Civic         30.4 #> Toyota Corolla      33.9 #> Toyota Corona       21.5 #> Dodge Challenger    15.5 #> AMC Javelin         15.2 #> Camaro Z28          13.3 #> Pontiac Firebird    19.2 #> Fiat X1-9           27.3 #> Porsche 914-2       26.0 #> Lotus Europa        30.4 #> Ford Pantera L      15.8 #> Ferrari Dino        19.7 #> Maserati Bora       15.0 #> Volvo 142E          21.4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Semi join — semi_join.duckplyr_df","title":"Semi join — semi_join.duckplyr_df","text":"method dplyr::semi_join() generic. semi_join() returns rows x match y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semi join — semi_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' semi_join(x, y, by = NULL, copy = FALSE, ..., na_matches = c(\"na\", \"never\"))"},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Semi join — semi_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . ... parameters passed onto methods. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Semi join — semi_join.duckplyr_df","text":"","code":"library(duckplyr) library(dplyr) band_members %>% semi_join(band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 2 × 2 #>   name  band    #>   <chr> <chr>   #> 1 John  Beatles #> 2 Paul  Beatles"},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Set diff — setdiff.duckplyr_df","title":"Set diff — setdiff.duckplyr_df","text":"method dplyr::setdiff() generic. See \"Fallbacks\" section differences implementation. setdiff(x, y) finds rows x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set diff — setdiff.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' setdiff(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set diff — setdiff.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Set diff — setdiff.duckplyr_df","text":"use setdiff.duckplyr_df column names duplicated one tables column names different tables. code fall back dplyr::setdiff() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set diff — setdiff.duckplyr_df","text":"","code":"df1 <- tibble(x = 1:3) df2 <- tibble(x = 3:5) setdiff(df1, df2) #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     1 #> 2     2 setdiff(df2, df1) #> # A tibble: 2 × 1 #>       x #>   <int> #> 1     4 #> 2     5"},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show stats — stats_show","title":"Show stats — stats_show","text":"Prints statistics many calls handled DuckDB. output shows total number requests current session, split fallbacks dplyr requests handled duckdb.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show stats — stats_show","text":"","code":"stats_show()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show stats — stats_show","text":"Called side effect.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show stats — stats_show","text":"","code":"stats_show() #> 🛠: 27 #> 🔨:  6 #> 🦆: 21 #> anti_join.data.frame, arrange.data.frame, count.data.frame, distinct.data.frame, filter.data.frame, full_join.data.frame, head, inner_join, inner_join.data.frame, intersect.data.frame, left_join.data.frame, mutate, mutate.data.frame  tibble(a = 1:3) %>%   as_duckplyr_df() %>%   mutate(b = a + 1) #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  stats_show() #> 🛠: 29 #> 🔨:  6 #> 🦆: 23 #> anti_join.data.frame, arrange.data.frame, count.data.frame, distinct.data.frame, filter.data.frame, full_join.data.frame, head, inner_join, inner_join.data.frame, intersect.data.frame, left_join.data.frame, mutate, mutate.data.frame"},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise each group down to one row — summarise.duckplyr_df","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"method dplyr::summarise() generic. See \"Fallbacks\" section differences implementation. summarise() creates new data frame. returns one row combination grouping variables; grouping variables, output single row summarising observations input. contain one column grouping variable one column summary statistics specified.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' summarise(.data, ..., .by = NULL, .groups = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise each group down to one row — summarise.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs summary functions. name name variable result. value can : vector length 1, e.g. min(x), n(), sum(.na(y)). data frame, add multiple columns single expression. Returning values size 0 >1 deprecated 1.1.0. Please use reframe() instead. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .groups Grouping structure result. \"drop_last\": dropping last level grouping. supported option version 1.0.0. \"drop\": levels grouping dropped. \"keep\": grouping structure .data. \"rowwise\": row group. .groups specified, chosen based number rows results: results 1 row, get \"drop_last\". number rows varies, get \"keep\" (note returning variable number rows deprecated favor reframe(), also unconditionally drops levels grouping). addition, message informs choice, unless result ungrouped, option \"dplyr.summarise.inform\" set FALSE, summarise() called function package.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"use summarise.duckplyr_df .groups = \"rowwise\". code fall back dplyr::summarise() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"","code":"summarise(mtcars, mean = mean(disp), n = n()) #>       mean  n #> 1 230.7219 32"},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric difference — symdiff.duckplyr_df","title":"Symmetric difference — symdiff.duckplyr_df","text":"method dplyr::symdiff() generic. See \"Fallbacks\" section differences implementation. symdiff(x, y)  computes symmetric difference, .e. rows x y rows y x.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric difference — symdiff.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' symdiff(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric difference — symdiff.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Symmetric difference — symdiff.duckplyr_df","text":"use symdiff.duckplyr_df column names duplicated one tables column names different tables. code fall back dplyr::symdiff() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetric difference — symdiff.duckplyr_df","text":"","code":"df1 <- tibble(x = 1:3) df2 <- tibble(x = 3:5) symdiff(df1, df2) #> # A tibble: 4 × 1 #>       x #>   <int> #> 1     1 #> 2     2 #> 3     4 #> 4     5"},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — transmute.duckplyr_df","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"method dplyr::transmute() generic. See \"Fallbacks\" section differences implementation. transmute() creates new data frame containing specified computations. superseded can perform job mutate(.keep = \"none\").","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' transmute(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"use transmute.duckplyr_df selection returns columns: code fall back dplyr::transmute() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"","code":"library(\"duckplyr\") transmute(mtcars, mpg2 = mpg*2) #>                     mpg2 #> Mazda RX4           42.0 #> Mazda RX4 Wag       42.0 #> Datsun 710          45.6 #> Hornet 4 Drive      42.8 #> Hornet Sportabout   37.4 #> Valiant             36.2 #> Duster 360          28.6 #> Merc 240D           48.8 #> Merc 230            45.6 #> Merc 280            38.4 #> Merc 280C           35.6 #> Merc 450SE          32.8 #> Merc 450SL          34.6 #> Merc 450SLC         30.4 #> Cadillac Fleetwood  20.8 #> Lincoln Continental 20.8 #> Chrysler Imperial   29.4 #> Fiat 128            64.8 #> Honda Civic         60.8 #> Toyota Corolla      67.8 #> Toyota Corona       43.0 #> Dodge Challenger    31.0 #> AMC Javelin         30.4 #> Camaro Z28          26.6 #> Pontiac Firebird    38.4 #> Fiat X1-9           54.6 #> Porsche 914-2       52.0 #> Lotus Europa        60.8 #> Ford Pantera L      31.6 #> Ferrari Dino        39.4 #> Maserati Bora       30.0 #> Volvo 142E          42.8"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of all — union_all.duckplyr_df","title":"Union of all — union_all.duckplyr_df","text":"method dplyr::union_all() generic. See \"Fallbacks\" section differences implementation. union_all(x, y) finds rows either x y, including duplicates.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of all — union_all.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' union_all(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of all — union_all.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Union of all — union_all.duckplyr_df","text":"use union_all.duckplyr_df column names duplicated one tables column names different tables. code fall back dplyr::union_all() without error.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union of all — union_all.duckplyr_df","text":"","code":"df1 <- tibble(x = 1:3) df2 <- tibble(x = 3:5) union_all(df1, df2) #> # A tibble: 6 × 1 #>       x #>   <int> #> 1     1 #> 2     2 #> 3     3 #> 4     3 #> 5     4 #> 6     5"},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1-9007","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1.9007 (2024-12-16)","text":"Use as_duckplyr_df_impl() verbs (#386). Use as_ducktbl() touchstone script (#385). New as_ducktbl(), replaces as_duckplyr_tibble() as_duckplyr_df() (#383). New ducktbl() (#382).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-1-9007","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.1.9007 (2024-12-16)","text":"Fix comment touchstone script (#387). Use as_duckplyr_df_impl() generated code (#384). Legacy duckdb script.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"performance-0-4-1-9007","dir":"Changelog","previous_headings":"","what":"Performance","title":"duckplyr 0.4.1.9007 (2024-12-16)","text":"Printing duckplyr frame longer materializes (#255, #378).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-4-1-9007","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.4.1.9007 (2024-12-16)","text":"Use ducktbl() tests (#388). Avoid as_duckplyr_df() (#389). Skip test requires dplyr > 1.1.4.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1-9006","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1.9006 (2024-12-15)","text":"New last_rel() retrieve last relation object used materialization (#209, #375). Improve as_duckplyr_df() error message invalid .data (@maelle, #339).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-1-9006","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.1.9006 (2024-12-15)","text":"Add read-markers overwrite + restore. Cleanup (#377). Avoid \"duckdb.materialize_message\" option (#376). Update TPCH outputs account data changes duckdb 0.8.0 (#294). Sync.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1-9006","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1.9006 (2024-12-15)","text":"Fix rendering vanilla session. Add vignette missing parts (@maelle, #218, #371). Refactor README (@maelle, #208, #334, #370).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"performance-0-4-1-9006","dir":"Changelog","previous_headings":"","what":"Performance","title":"duckplyr 0.4.1.9006 (2024-12-15)","text":"Comparison expressions translated way allows pushed Parquet (@toppyy, #270).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-4-1-9006","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.4.1.9006 (2024-12-15)","text":"Add snapshot test conversion error as_duckplyr_df().","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-1-9005","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.1.9005 (2024-12-14)","text":"Bump duckdb dependency.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1-9005","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1.9005 (2024-12-14)","text":"Tweak method behavior (#373). Add manual pages dplyr methods (@maelle, #214, #359).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"check_duplicate_names() (#317). Check perfect roundtrip constants (#307). Correctly handle missing values if_else(). Use relational operators rfuns extension aliases, macros (#291). Compute ptype join columns safe way without materialization, entire data frame (#289). Edge case count() (#282). Attaching duckplyr via library() overwrites dplyr methods (#217, #276). expr_scrub() can handle function-definitions (@toppyy, #268, #271).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"mutate() constructs intermediate data frames new variable (#332). Harden telemetry code invalid arguments (#321). across() tweaks (#318). Fall back dplyr passing multiple joins (#323). Limit number items can handled %% (#319). Use Ubuntu noble touchstone (#314). Enable touchstone (#313). Use touchstone continuous benchmarking (#311). complete across() (#306). Add tests dplyr (#305). Partial support across() mutate() summarise() (#296). Rely duckdb check const feasibility (#293). Allow R 4.0 (#285). Avoid resetting expression depth, now duckdb (#280). Record replay functionality now includes top-level function called (#273). Set duckdb.materialize_message option load previously specified (@stefanlinner, #220).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"Configure IDE. Add lifecycle badges (#350, #353). Comment design choice. explain() returns input, invisibly (#331). Sync (#329). Nicer fallback error function translated (#324). Fix glue syntax. Tweak workflow (#316). Test touchstone (#315). Avoid copying copy. Sync tests dplyr dev version (#304). Update snapshots. Fix sync (#290). Apply styler (#281). Sync patches (#277). Fix typo. Sync docs. Sync docs branch (#266).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"continuous-integration-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"Avoid failure fledge workflow changes (#368). Fetch tags fledge workflow avoid unnecessary NEWS entries (#366). Use styler PR (#362). Run Ubuntu Noble support r-universe binaries (#352). Correctly detect branch protection (#345). Use stable pak (#344). Latest changes (#328). Revert status workflow (#326). Trigger run (#288). Trigger run (#287). Updates duckdb (#286). Install local package pkgdown builds (#258). Fix condition fledge workflow (#248). Use curl. Use gh download artifact. Don’t need unzip artifact. Restrict commit PRs.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"Avoid \\code{} (#340, #354). Include section code generation contributing guide (#24, #348). Update README. Sync. Sync. Sync. Move logo. Need file, link, logo GitHub. Fix logo GitHub. Use downlit GitHub README (#262). Add logo README (@luisDVA, #259). Fix cut--paste typo (@joakimlinde, #240). Enable plausible (#250, #251). Use new URL pkgdown (#247).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-4-1-9004","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.4.1.9004 (2024-12-09)","text":"Snapshot updates rcc-smoke (null) (#356). Add snapshot instead output (#346). Snapshot updates rcc-smoke (null) (#302). Test telemetry code (#275). Adapt tests duckdb release candidate (#261).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1-9003","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1.9003 (2024-08-20)","text":"Detect functions duckplyr package (#246). New duckplyr_execute() execute configuration queries default duckdb connection (#39, #165, #227). as_duckplyr_tibble() supports dbplyr connections duckdb database (#86, #211, #226).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"continuous-integration-0-4-1-9003","dir":"Changelog","previous_headings":"","what":"Continuous integration","title":"duckplyr 0.4.1.9003 (2024-08-20)","text":"Avoid failures artifact missing. Store SHA artifact. Move towards external status updates. Tweak status workflow. Use token. Add external workflow update commit statuses. Avoid manually installing package pkgdown (#245). Fix fledge (#243). Use proper remote repo (#241). Add permissions fledge workflow (#238). Fix tests without suggested packages (#236). Add permissions fledge workflow (#235). Add permissions fledge workflow (#234). Add input fledge workflow (#233). Use proper token fledge (#232). Fix fledge workflow (#231). Bump version via PR (#230). Sync duckdb.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1-9002","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1.9002 (2024-08-16)","text":"Move tidyverse (#225).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-0419001-2024-07-13","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.1.9001 (2024-07-13)","title":"duckplyr 0.4.1.9001 (2024-07-13)","text":"Merge branch ‘cran-0.4.1’.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-0419000-2024-07-12","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.1.9000 (2024-07-12)","title":"duckplyr 0.4.1.9000 (2024-07-12)","text":"Merge branch ‘cran-0.4.1’.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-041-2024-07-11","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.1 (2024-07-11)","title":"duckplyr 0.4.1 (2024-07-11)","text":"CRAN release: 2024-07-12","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1 (2024-07-11)","text":"df_from_file() related functions support multiple files (#194, #195), show clear error message non-string path arguments (#182), create tibble default (#177). New as_duckplyr_tibble() convert data frame duckplyr tibble (#177). Support descending sort character non-numeric data (@toppyy, #92, #175). Avoid setting memory limit (#193). Check compatibility join columns (#168, #185). Explicitly list supported functions, add contributing guide, add analysis scripts GitHub activity data (#179).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1 (2024-07-11)","text":"Add contributing guide (#179). Show startup message package load telemetry configured (#188, #198). ?df_from_file shows read multiple files (#181, #186) specify CSV column types (#140, #189), shown correctly reference index (#173, #190). Discuss dbplyr README (#145, #191). Add analysis scripts GitHub activity data (#179).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-040-2024-05-21","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.0 (2024-05-21)","title":"duckplyr 0.4.0 (2024-05-21)","text":"CRAN release: 2024-05-21","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.0 (2024-05-21)","text":"Use built-rfuns extension implement equality inequality operators, improve translation .integer(), NA %% (#83, #154, #148, #155, #159, #160). Reexport non-deprecated dplyr functions (#144, #163). library(duckplyr) calls methods_overwrite() (#164). allow constant patterns grepl(). Explicitly reject calls named arguments now. Reduce default memory limit 1 GB.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.4.0 (2024-05-21)","text":"Stricter type checks set operations intersect(), setdiff(), symdiff(), union(), union_all() (#169). Distinguish constant NA used expression (#157). head(-1) forwards default implementation (#131, #156). Fix cli syntax internal error message (#151). careful detection row names data frame. Always check roundtrip timestamp columns. left_join() join functions call auto_copy(). reset expression depth set . Require fallback result contains duplicate column names ignoring case. row_number() returns integer. .na(NaN) TRUE. summarise(count = n(), count = n()) creates one column named count. Correct wording instructions enabling fallback logging (@TimTaylor, #141).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.0 (2024-05-21)","text":"Remove styler dependency (#137, #138). Avoid error stats collection.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.0 (2024-05-21)","text":"Mention wildcards read multiple files ?df_from_file (@andreranza, #133, #134).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-4-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.4.0 (2024-05-21)","text":"Reenable tests now run successfully (#166). Synchronize tests (#153). Test vec_ptype() materialize (#149). Improve telemetry tests. Promote equality checks expect_identical() capture differences doubles integers.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-032-2024-03-17","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.2 (2024-03-17)","title":"duckplyr 0.3.2 (2024-03-17)","text":"CRAN release: 2024-03-17","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.2 (2024-03-17)","text":"Run autoupload function checked static analysis (#122).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-2","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.2 (2024-03-17)","text":"New df_to_parquet() write Parquet, new convenience functions df_from_csv(), duckdb_df_from_csv(), df_from_parquet() duckdb_df_from_parquet() (#87, #89, #96, #128).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-031-2024-03-08","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.1 (2024-03-08)","title":"duckplyr 0.3.1 (2024-03-08)","text":"CRAN release: 2024-03-10","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.1 (2024-03-08)","text":"Forbid reuse new columns created summarise() (#72, #106). summarise() longer restores subclass. Disambiguate computation log10() log(). Fix division zero positive negative numbers.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-1","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.1 (2024-03-08)","text":"New fallback_sitrep() related functionality collecting telemetry data (#102, #107, #110, #111, #115). data collected default, message displayed per session every eight hours. Opt opt setting environment variables. Implement group_by() methods collect fallback information (#94, #104, #105). Set memory limit temporary directory duckdb. Implement suppressWarnings() identity function. Prefer cli::cli_abort() stop() rlang::abort() (#114). Translate .data$.env$. Strict checks column class, supporting integer, numeric, logical, Date, POSIXct, difftime now. environment variable DUCKPLYR_METHODS_OVERWRITE set TRUE, loading duckplyr automatically calls methods_overwrite().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"internal-0-3-1","dir":"Changelog","previous_headings":"","what":"Internal","title":"duckplyr 0.3.1 (2024-03-08)","text":"Better duckdb tests. Use standalone purrr dplyr compatibility.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-3-1","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.3.1 (2024-03-08)","text":"Add tests correct base log() log10().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-3-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.3.1 (2024-03-08)","text":"methods_overwrite() methods_restore() show message.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-030-2023-12-10","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.0 (2023-12-10)","title":"duckplyr 0.3.0 (2023-12-10)","text":"CRAN release: 2023-12-11","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.0 (2023-12-10)","text":"grepl(x = NA) gives correct results. Fix auto_copy() non-data-frame input. Add output order preservation filters. distinct() now preserves order corner cases (#77, #78). Consistent computation log(0) log(-1) (#75, #76).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.0 (2023-12-10)","text":"allow constants mutate() actually representable duckdb (#73). Avoid translating ifelse(), support if_else() (#79).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.3.0 (2023-12-10)","text":"Separate explain new relational examples (@wibeasley, #84).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-3-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.3.0 (2023-12-10)","text":"Add test TPC-H queries can processed.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-3-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.3.0 (2023-12-10)","text":"Sync dplyr 1.1.4 (#82). Remove dplyr_reconstruct() method (#48). Render README. Fix code generated meta_replay(). Bump constructive dependency. Fix output order arrange() case ties. Update duckdb tests. implement newer slice_sample(), sample_n() sample_frac() (#74). Sync generated files (#71).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-023-2023-11-08","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.3 (2023-11-08)","title":"duckplyr 0.2.3 (2023-11-08)","text":"CRAN release: 2023-11-08","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"performance-0-2-3","dir":"Changelog","previous_headings":"","what":"Performance","title":"duckplyr 0.2.3 (2023-11-08)","text":"Join using DISTINCT faster execution (duckdb/duckdb-r#41, #68).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-2-3","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.2.3 (2023-11-08)","text":"Add stability README output (@maelle, #62, #65).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-022-2023-10-16","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.2 (2023-10-16)","title":"duckplyr 0.2.2 (2023-10-16)","text":"CRAN release: 2023-10-16","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.2.2 (2023-10-16)","text":"summarise() keeps \"duckplyr_df\" class (#63, #64). Fix compatibility duckdb >= 0.9.1.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-2-2","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.2.2 (2023-10-16)","text":"Skip tests give different output dev tidyselect. Import utils::globalVariables().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-2-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.2.2 (2023-10-16)","text":"Small README improvements (@maelle, #34, #57). Fix 301 README.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-021-2023-09-16","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.1 (2023-09-16)","title":"duckplyr 0.2.1 (2023-09-16)","text":"CRAN release: 2023-09-17 Improve documentation. Work around problem dplyr_reconstruct() R 4.3. Rename duckdb_from_file() df_from_file(). Unexport private duckdb_rel_from_df(), rel_from_df(), wrap_df() wrap_integer(). Reexport %>% tibble().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-020-2023-09-10","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.0 (2023-09-10)","title":"duckplyr 0.2.0 (2023-09-10)","text":"CRAN release: 2023-09-10 Implement relational API DuckDB.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-010-2023-07-03","dir":"Changelog","previous_headings":"","what":"duckplyr 0.1.0 (2023-07-03)","title":"duckplyr 0.1.0 (2023-07-03)","text":"CRAN release: 2023-07-07","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.1.0 (2023-07-03)","text":"Fix examples.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-1-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.1.0 (2023-07-03)","text":"Add CRAN install instructions. Satisfy R CMD check. Document argument. Error NOTE. Remove relexpr_window() now.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.1.0 (2023-07-03)","text":"Clean reference.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"uncategorized-0-1-0","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"duckplyr 0.1.0 (2023-07-03)","text":"Initial version, exporting: - new_relational() construct objects class \"relational\" - Generics rel_aggregate(), rel_distinct(), rel_filter(), rel_join(), rel_limit(), rel_names(), rel_order(), rel_project(), rel_set_diff(), rel_set_intersect(), rel_set_symdiff(), rel_to_df(), rel_union_all() - new_relexpr() construct objects class \"relational_relexpr\" - Expression builders relexpr_constant(), relexpr_function(), relexpr_reference(), relexpr_set_alias(), relexpr_window()","code":""}]
