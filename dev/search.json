[{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to duckplyr","title":"Contributing to duckplyr","text":"outlines propose change duckplyr. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to duckplyr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to duckplyr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to duckplyr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"tidyverse/duckplyr\", fork = TRUE). Install development dependencies pak::pak(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Please edit NEWS.md.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to duckplyr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"new-translations-for-functions","dir":"","previous_headings":"","what":"New translations for functions","title":"Contributing to duckplyr","text":"functions used dplyr verbs, translations must provided. code lives translate.R . New translations must change code two places: switch() rel_find_packages() needs new entry, together package home function. top 60 functions, ranked importance, already part switch(), comment implemented yet. actual translation must implemented rel_translate_lang(). easy functions similar functions already translated, harder others. part code clear yet, particular, argument matching name available functions generalized. Test implementation console code form: Add test new translation mutate = section test_extra_arg_map 00-funs.R. (point want specific tests translations, now, .) Run 03-tests.R, commit changes generated code version control. Update list limits.Rmd vignette.","code":"rel_translate(quo(a + 1), data.frame(a = 1)) |>   constructive::construct()"},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-more-options-for-verbs","dir":"","previous_headings":"","what":"Support more options for verbs","title":"Contributing to duckplyr","text":"verbs wrap code rel_try({}) call fall back dplyr case failure. rel_try() function takes named arguments describe conditions early drop-, corresponding error message. add support condition drop-defined, roughly following steps necessary: Remove drop-condition. Run tests, take note failures. Provide implementation fixes failures. Add test verb works DUCKPLYR_FORCE = TRUE new conditions. Run 02-duckplyr_df-methods.R update corresponding patch file.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-verbs","dir":"","previous_headings":"","what":"Support new verbs","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-column-data-types","dir":"","previous_headings":"","what":"Support new column data types","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"support-new-data-frame-types","dir":"","previous_headings":"","what":"Support new data frame types","title":"Contributing to duckplyr","text":"Let’s discuss first!","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-generation-and-synchronization","dir":"","previous_headings":"","what":"Code generation and synchronization","title":"Contributing to duckplyr","text":"duckplyr package “long-running fork dplyr”, code generate parts implementation tests, synchronize changes duckplyr codebase. main synchronization script tools/99-sync.R, also contains instructions set new clone. script run whenever implementation verbs changes substantial way. Watch # Generated ... headers top source files.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to duckplyr","text":"Please note duckplyr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 duckplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Selective use of duckplyr","text":"default behavior duckplyr enable data frames session. happens package attached library(duckplyr), calling methods_overwrite(). enable duckplyr individual data frames instead session-wide, sufficient prefix calls duckplyr functions duckplyr:: attach package. Alternatively, methods_restore() can called undo session-wide overwrite library(duckplyr).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"external-data-with-explicit-qualification","dir":"Articles","previous_headings":"","what":"External data with explicit qualification","title":"Selective use of duckplyr","text":"following example uses duckplyr::as_duckdb_tibble() convert data frame duckplyr frame enable duckplyr operation. result tibble, class. DuckDB responsible eventually carrying operations. Despite filter coming late pipeline, applied raw data. data frame operations supported. Computation happens upon first request. computation carried , results preserved available immediately:","code":"lazy <-   duckplyr::flights_df() |>   duckplyr::as_duckdb_tibble() |>   mutate(inflight_delay = arr_delay - dep_delay) |>   summarize(     .by = c(year, month),     mean_inflight_delay = mean(inflight_delay, na.rm = TRUE),     median_inflight_delay = median(inflight_delay, na.rm = TRUE),   ) |>   filter(month <= 6) class(lazy) #> [1] \"duckplyr_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"  names(lazy) #> [1] \"year\"                  \"month\"                 #> [3] \"mean_inflight_delay\"   \"median_inflight_delay\" lazy |>   explain() #> ┌---------------------------┐ #> │       HASH_GROUP_BY       │ #> │    --------------------   │ #> │          Groups:          │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │        Aggregates:        │ #> │          mean(#2)         │ #> │         median(#3)        │ #> │                           │ #> │        ~33677 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │            year           │ #> │           month           │ #> │       inflight_delay      │ #> │       inflight_delay      │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │            year           │ #> │           month           │ #> │       inflight_delay      │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │           FILTER          │ #> │    --------------------   │ #> │ (CAST(month AS DOUBLE) <= │ #> │            6.0)           │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │                           │ #> │        Projections:       │ #> │            year           │ #> │           month           │ #> │         dep_delay         │ #> │         arr_delay         │ #> │                           │ #> │        ~336776 Rows       │ #> └---------------------------┘ lazy$mean_inflight_delay #> [1] -3.855519 -5.147220 -9.370201 -7.356713 -2.673124 -4.244284 lazy #> # A duckplyr data frame: 4 variables #>    year month mean_inflight_delay median_inflight_delay #>   <int> <int>               <dbl>                 <dbl> #> 1  2013     1               -3.86                    -5 #> 2  2013     2               -5.15                    -6 #> 3  2013     5               -9.37                   -10 #> 4  2013     3               -7.36                    -9 #> 5  2013     4               -2.67                    -5 #> 6  2013     6               -4.24                    -7"},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"restoring-dplyr-methods","dir":"Articles","previous_headings":"","what":"Restoring dplyr methods","title":"Selective use of duckplyr","text":"can achieved calling methods_restore() library(duckplyr). input plain data frame, duckplyr involved.","code":"library(duckplyr) #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`.  methods_restore() #> ℹ Restoring dplyr methods. flights_df() |>   mutate(inflight_delay = arr_delay - dep_delay) |>   explain() #> Error in UseMethod(\"explain\"): no applicable method for 'explain' applied to an object of class \"c('tbl_df', 'tbl', 'data.frame')\""},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"own-data","dir":"Articles","previous_headings":"","what":"Own data","title":"Selective use of duckplyr","text":"Construct duckplyr frames directly duckdb_tibble():","code":"data <- duckdb_tibble(   x = 1:3,   y = 5,   z = letters[1:3] ) data #> # A duckplyr data frame: 3 variables #>       x     y z     #>   <int> <dbl> <chr> #> 1     1     5 a     #> 2     2     5 b     #> 3     3     5 c"},{"path":"https://duckplyr.tidyverse.org/dev/articles/developers.html","id":"in-other-packages","dir":"Articles","previous_headings":"","what":"In other packages","title":"Selective use of duckplyr","text":"Like dependencies, duckplyr must declared DESCRIPTION file optionally imported NAMESPACE file. duckplyr import dplyr, necessary import packages. recipe shows achieve usethis package. Add dplyr dependency usethis::use_package(\"dplyr\") Add duckplyr dependency usethis::use_package(\"duckplyr\") code, use pattern like data |> duckplyr::as_duckdb_tibble() |> dplyr::filter(...) Import duckplyr function usethis::use_import_from(\"duckplyr\", \"as_duckdb_tibble\") Import dplyr function usethis::use_import_from(\"dplyr\", \"filter\") Learn prudence vignette(\"prudence\"), fallbacks dplyr vignette(\"fallback\"), translation employed duckplyr vignette(\"limits\"), direct use DuckDB functions vignette(\"duckdb\"), usethis package https://usethis.r-lib.org/.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/duckdb.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interoperability with DuckDB and dbplyr","text":"duckplyr package drop-replacement dplyr, designed work DuckDB backend. translation layer converts R function calls DuckDB functions macros, aiming full compatibility R. Many functions translated already, many . functions translated, duckplyr falls back original R implementation, disrupting DuckDB pipeline materializing intermediate results. Furthermore, DuckDB functions R equivalent. might used already code interacts DuckDB dbplyr, either making use passthrough feature (unknown functions translated SQL verbatim), using mutate(x = sql(...)) pattern. working duckplyr, functionality still accessible, albeit experimental interfaces: as_tbl() converts duckplyr table duckdb tbl object duckplyr table, escape hatch dd$fun(...) can used call arbitrary DuckDB functions","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/duckdb.html","id":"from-duckplyr-to-dbplyr","dir":"Articles","previous_headings":"","what":"From duckplyr to dbplyr","title":"Interoperability with DuckDB and dbplyr","text":"experimental as_tbl() function, introduced duckplyr 1.1.0, transparently converts duckplyr frame dbplyr tbl object: achieves creating temporary view points relational object created internally duckplyr, DBI connection duckplyr object. data copied operation. view discarded tbl object goes scope. allows using arbitrary SQL code, either sql() relying dbplyr’s passthrough feature. R function called least_common_multiple(), interpreted SQL function. continue processing duckplyr, use as_duckdb_tibble():","code":"df <- duckdb_tibble(a = 2L) df #> # A duckplyr data frame: 1 variable #>       a #>   <int> #> 1     2  tbl <- as_tbl(df) tbl #> # Source:   table<as_tbl_duckplyr_SwlKLUUEdL> [?? x 1] #> # Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpcuhILE/duckplyr/duckplyr320218c4b132.duckdb] #>       a #>   <int> #> 1     2 tbl %>%   mutate(b = sql(\"a + 1\"), c = least_common_multiple(a, b)) %>%   show_query() #> <SQL> #> SELECT q01.*, least_common_multiple(a, b) AS c #> FROM ( #>   SELECT as_tbl_duckplyr_SwlKLUUEdL.*, a + 1 AS b #>   FROM as_tbl_duckplyr_SwlKLUUEdL #> ) q01 least_common_multiple(2, 3) #> Error in least_common_multiple(2, 3): could not find function \"least_common_multiple\" tbl %>%   mutate(b = sql(\"a + 1\"), c = least_common_multiple(a, b)) #> # Source:   SQL [?? x 3] #> # Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpcuhILE/duckplyr/duckplyr320218c4b132.duckdb] #>       a     b     c #>   <int> <int> <dbl> #> 1     2     3     6 tbl %>%   mutate(b = sql(\"a + 1\"), c = least_common_multiple(a, b)) %>%   as_duckdb_tibble() #> # A duckplyr data frame: 3 variables #>       a     b     c #>   <int> <int> <dbl> #> 1     2     3     6"},{"path":"https://duckplyr.tidyverse.org/dev/articles/duckdb.html","id":"call-arbitrary-functions-in-duckplyr","dir":"Articles","previous_headings":"","what":"Call arbitrary functions in duckplyr","title":"Interoperability with DuckDB and dbplyr","text":"escape hatch, also introduced duckplyr 1.1.0, allows calling arbitrary DuckDB functions directly duckplyr, without going SQL: dd prefix picked following reasons: abbreviation “DuckDB” short easy type package name objects commonly named dd R prefix necessary avoid name clashes existing R functions. used widely, large-scale code analysis may help prioritize translation functions yet supported duckplyr. dd package, attached, provide dd object containing many known DuckDB functions. adds support autocomplete: package necessary use duckplyr, list functions incomplete growing. case ’re wondering:","code":"duckdb_tibble(a = 2L, b = 3L) %>%   mutate(c = dd$least_common_multiple(a, b)) #> # A duckplyr data frame: 3 variables #>       a     b     c #>   <int> <int> <dbl> #> 1     2     3     6 duckdb_tibble(a = \"dbplyr\", b = \"duckplyr\") %>%   mutate(c = dd$damerau_levenshtein(a, b)) #> # A duckplyr data frame: 3 variables #>   a      b            c #>   <chr>  <chr>    <dbl> #> 1 dbplyr duckplyr     3"},{"path":"https://duckplyr.tidyverse.org/dev/articles/duckdb.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Interoperability with DuckDB and dbplyr","text":"duckplyr designed drop-replacement dplyr, still allows harness power DuckDB. See vignette(\"limits\") limitations translation employed duckplyr, vignette(\"fallback\") information fallback, vignette(\"telemetry\") existing attempts prioritize work translation layer.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fallback to dplyr","text":"duckplyr package aims providing fully compatible drop-replacement dplyr. operations, R functions, data types supported dplyr work identical way duckplyr. achieved two ways: carefully selected subset dplyr operations, R functions, R data types implemented DuckDB, focusing faithful translation. DuckDB support operation, duckplyr falls back dplyr, guaranteeing identical behavior.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"duckdb-mode","dir":"Articles","previous_headings":"","what":"DuckDB mode","title":"Fallback to dplyr","text":"following operation supported duckplyr: explain() function shows happens hood: plan shows three operations: data frame scan (input), sort operation, projection (adding b column removing column). operation supported DuckDB. resulting object contains plan entire pipeline executed lazily, data needed.","code":"duckdb <-   duckplyr::duckdb_tibble(a = 1:3) |>   arrange(desc(a)) |>   mutate(b = a + 1) |>   select(-a) duckdb |>   explain() #> ┌---------------------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             b             │ #> │                           │ #> │          ~3 Rows          │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │          ORDER_BY         │ #> │    --------------------   │ #> │      dataframe_42_42      │ #> │      91716553.a DESC      │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │       Projections: a      │ #> │                           │ #> │          ~3 Rows          │ #> └---------------------------┘"},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"relation-objects","dir":"Articles","previous_headings":"","what":"Relation objects","title":"Fallback to dplyr","text":"DuckDB accepts tree interconnected relation objects input. relation object represents logical step execution plan. duckplyr package translates dplyr verbs relation objects. last_rel() function shows last relation materialized: NULL nothing computed yet. Converting object data frame triggers computation: last_rel() function now shows relation describes logical plan executing whole pipeline.","code":"duckplyr::last_rel() #> NULL duckdb |> collect() #> # A tibble: 3 × 1 #>       b #>   <dbl> #> 1     4 #> 2     3 #> 3     2 duckplyr::last_rel() #> DuckDB Relation:  #> --------------------- #> --- Relation Tree --- #> --------------------- #> Projection [b as b] #>   Projection [a as a, \"+\"(a, 1.0) as b] #>     Order [a DESC] #>       r_dataframe_scan(0xdeadbeef) #>  #> --------------------- #> -- Result Columns  -- #> --------------------- #> - b (DOUBLE)"},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"help-from-dplyr","dir":"Articles","previous_headings":"","what":"Help from dplyr","title":"Fallback to dplyr","text":"Using custom function side effect supported DuckDB triggers dplyr fallback: verbose_plus_one() function supported DuckDB, mutate() step forwarded dplyr already executed (eagerly) pipeline defined. confirmed last_rel() function: arrange() step executed DuckDB. dplyr implementation mutate() needs data can proceed, data first converted data frame, triggers materialization first step. explain() function also confirms indirectly least part operation handled dplyr: final plan now consists data frame scan. result mutate() step, stage already executed dplyr. Converting final object data frame triggers rest computation: last_rel() function confirms final select() handled DuckDB .","code":"verbose_plus_one <- function(x) {   message(\"Adding one to \", paste(x, collapse = \", \"))   x + 1 }  fallback <-   duckplyr::duckdb_tibble(a = 1:3) |>   arrange(desc(a)) |>   mutate(b = verbose_plus_one(a)) |>   select(-a) #> Adding one to 3, 2, 1 duckplyr::last_rel() #> DuckDB Relation:  #> --------------------- #> --- Relation Tree --- #> --------------------- #> Order [a DESC] #>   r_dataframe_scan(0xdeadbeef) #>  #> --------------------- #> -- Result Columns  -- #> --------------------- #> - a (INTEGER) fallback |>   explain() #> ┌---------------------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │       Projections: b      │ #> │                           │ #> │          ~3 Rows          │ #> └---------------------------┘ fallback |> collect() #> # A tibble: 3 × 1 #>       b #>   <dbl> #> 1     4 #> 2     3 #> 3     2  duckplyr::last_rel() #> DuckDB Relation:  #> --------------------- #> --- Relation Tree --- #> --------------------- #> Projection [b as b] #>   r_dataframe_scan(0xdeadbeef) #>  #> --------------------- #> -- Result Columns  -- #> --------------------- #> - b (DOUBLE)"},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"enforce-duckdb-operation","dir":"Articles","previous_headings":"","what":"Enforce DuckDB operation","title":"Fallback to dplyr","text":"duck frame, one can control automatic materialization. fallbacks dplyr, automatic materialization must allowed duck frame hand, dplyr necessitates eager evaluation. Therefore, making data frame stingy, one can ensure pipeline error fallback dplyr normally happened. See vignette(\"prudence\") details. using operations supported duckplyr avoiding fallbacks much possible, pipelines executed DuckDB optimized way. duckplyr 1.1.0, DuckDB functions can used directly, see vignette(\"duckdb\") details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"configure-fallbacks","dir":"Articles","previous_headings":"","what":"Configure fallbacks","title":"Fallback to dplyr","text":"Using fallback_sitrep() fallback_config() functions can examine change settings related fallbacks. can choose make fallbacks verbose fallback_config(info = TRUE). can change settings related logging reporting fallback duckplyr development team inform work. See vignette(\"telemetry\") details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/fallback.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Fallback to dplyr","text":"fallback mechanism duckplyr allows seamless integration dplyr verbs R functions supported DuckDB. transparent user triggers necessary. small medium-sized data sets, even noticeable settings. See vignette(\"large\") techniques working large data, vignette(\"limits\") currently implementated translations, vignette(\"duckdb\") direct access DuckDB functions, vignette(\"prudence\") details controlling fallback behavior, vignette(\"telemetry\") automatic reporting fallback situations.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Large data","text":"Data frames objects R stored RAM. can become problematic: Data must loaded RAM first, even part needed. Data must stored RAM, even used. RAM limited, data sets can larger available RAM. variety tools developed work large data sets, also R. One example dbplyr package, dplyr backend connects SQL databases designed work various databases support SQL. viable approach data already stored database, data stored Parquet CSV files loaded lazy table via duckdb::tbl_file(). dbplyr package translates dplyr code SQL. syntax semantics similar, identical plain dplyr. contrast, duckplyr package aims fully compatible drop-replacement dplyr, exactly syntax semantics: Input output data frames tibbles. dplyr verbs supported, fallback. R data types functions supported, fallback. SQL generated, instead, DuckDB’s “relational” interface used. Full compatibility means fewer surprises less cognitive load user. DuckDB backend, duckplyr can also handle large data sets fit RAM, keeping full dplyr compatibility. tools bringing data R memory modeled dplyr dbplyr packages, described following sections. See vignette(\"prudence\") eager lazy data, vignette(\"limits\") limitations translation employed duckplyr, vignette(\"duckdb\") way overcome limitations, vignette(\"fallback\") information fallback.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"to-duckplyr","dir":"Articles","previous_headings":"","what":"To duckplyr","title":"Large data","text":"duckdb_tibble() function creates duckplyr data frame vectors: duckdb_tibble() function drop-replacement tibble(), can used way. Similarly, as_duckdb_tibble() can used convert data frame another object duckplyr data frame: Existing code uses DuckDB via dbplyr can also take advantage. following code creates DuckDB connection writes data frame table: explain() output shows data actually coming DuckDB table. as_duckdb_tibble() function can used seamlessly convert data duckplyr frame: works DuckDB connections. databases, turn data R data frame export file using as_duckdb_tibble(). common cases, duckdb_tibble() function fails helpful error message: duckplyr support group_by(): duckplyr support rowwise(): Use read_csv_duckdb() read built-reader: cases, as_tibble() can used proceed existing code.","code":"df <- duckdb_tibble(x = 1:3, y = letters[1:3]) df #> # A duckplyr data frame: 2 variables #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c flights_df() |>   as_duckdb_tibble() #> # A duckplyr data frame: 19 variables #>     year month   day dep_time sched_dep_time dep_delay arr_time #>    <int> <int> <int>    <int>          <int>     <dbl>    <int> #>  1  2013     1     1      517            515         2      830 #>  2  2013     1     1      533            529         4      850 #>  3  2013     1     1      542            540         2      923 #>  4  2013     1     1      544            545        -1     1004 #>  5  2013     1     1      554            600        -6      812 #>  6  2013     1     1      554            558        -4      740 #>  7  2013     1     1      555            600        -5      913 #>  8  2013     1     1      557            600        -3      709 #>  9  2013     1     1      557            600        -3      838 #> 10  2013     1     1      558            600        -2      753 #> # ℹ more rows #> # ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, #> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, #> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm> path_duckdb <- tempfile(fileext = \".duckdb\") con <- DBI::dbConnect(duckdb::duckdb(path_duckdb)) DBI::dbWriteTable(con, \"data\", data.frame(x = 1:3, y = letters[1:3]))  dbplyr_data <- tbl(con, \"data\") dbplyr_data #> # Source:   table<\"data\"> [?? x 2] #> # Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmppSLTKT/file32da3a9ae058.duckdb] #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c  dbplyr_data |>   explain() #> <SQL> #> SELECT * #> FROM \"data\" #>  #> <PLAN> #> physical_plan #> ┌---------------------------┐ #> │         SEQ_SCAN          │ #> │    --------------------   │ #> │        Table: data        │ #> │   Type: Sequential Scan   │ #> │                           │ #> │        Projections:       │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~3 Rows          │ #> └---------------------------┘ dbplyr_data |>   as_duckdb_tibble() #> # A duckplyr data frame: 2 variables #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c  dbplyr_data |>   as_duckdb_tibble() |>   explain() #> ┌---------------------------┐ #> │         SEQ_SCAN          │ #> │    --------------------   │ #> │        Table: data        │ #> │   Type: Sequential Scan   │ #> │                           │ #> │        Projections:       │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~3 Rows          │ #> └---------------------------┘ DBI::dbDisconnect(con) duckdb_tibble(a = 1) |>   group_by(a) |>   as_duckdb_tibble() #> Error in `as_duckdb_tibble()` at duckplyr/R/ducktbl.R:81:3: #> ! duckplyr does not support `group_by()`. #> ℹ Use `.by` instead. #> ℹ To proceed with dplyr, use `as_tibble()` or `as.data.frame()`. duckdb_tibble(a = 1) |>   rowwise() |>   as_duckdb_tibble() #> Error in `as_duckdb_tibble()` at duckplyr/R/ducktbl.R:81:3: #> ! duckplyr does not support `rowwise()`. #> ℹ To proceed with dplyr, use `as_tibble()` or `as.data.frame()`. readr::read_csv(\"a\\n1\", show_col_types = FALSE) |>   as_duckdb_tibble() #> Error in `as_duckdb_tibble()` at duckplyr/R/ducktbl.R:81:3: #> ! The input is data read by readr, and duckplyr supports #>   reading CSV files directly. #> ℹ Use `read_csv_duckdb()` to read with the built-in reader. #> ℹ To proceed with the data as read by readr, use `as_tibble()` before #>   `as_duckdb_tibble()`."},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"from-files","dir":"Articles","previous_headings":"","what":"From files","title":"Large data","text":"DuckDB supports data ingestion CSV, Parquet, JSON files. read_csv_duckdb() function accepts file path returns duckplyr frame. Reading multiple files also supported: options argument can used control reading. Similarly, read_parquet_duckdb() read_json_duckdb() functions can used read Parquet JSON files, respectively. reading HTTPS S3 URLs, httpfs extension must installed loaded session. Installation fast extension already installed. loaded, read_csv_duckdb(), read_parquet_duckdb(), read_json_duckdb() functions can used URLs: cases, data read lazily: metadata read initially, data read required. means data can read files larger available RAM. Parquet format particularly efficient purpose, stores data columnar format allows reading columns required. See vignette(\"prudence\") details concept lazy data.","code":"path_csv_1 <- tempfile(fileext = \".csv\") writeLines(\"x,y\\n1,a\\n2,b\\n3,c\", path_csv_1) read_csv_duckdb(path_csv_1) #> # A duckplyr data frame: 2 variables #>       x y     #>   <dbl> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c path_csv_2 <- tempfile(fileext = \".csv\") writeLines(\"x,y\\n4,d\\n5,e\\n6,f\", path_csv_2) read_csv_duckdb(c(path_csv_1, path_csv_2)) #> # A duckplyr data frame: 2 variables #>       x y     #>   <dbl> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c     #> 4     4 d     #> 5     5 e     #> 6     6 f db_exec(\"INSTALL httpfs\") db_exec(\"LOAD httpfs\") url <- \"https://blobs.duckdb.org/flight-data-partitioned/Year=2024/data_0.parquet\" flights_parquet <- read_parquet_duckdb(url) flights_parquet #> # A duckplyr data frame: 110 variables #>     Year Quarter Month DayofMonth DayOfWeek FlightDate #>    <dbl>   <dbl> <dbl>      <dbl>     <dbl> <date>     #>  1  2024       1     1          8         1 2024-01-08 #>  2  2024       1     1          9         2 2024-01-09 #>  3  2024       1     1         10         3 2024-01-10 #>  4  2024       1     1         11         4 2024-01-11 #>  5  2024       1     1         12         5 2024-01-12 #>  6  2024       1     1         15         1 2024-01-15 #>  7  2024       1     1         16         2 2024-01-16 #>  8  2024       1     1         17         3 2024-01-17 #>  9  2024       1     1         18         4 2024-01-18 #> 10  2024       1     1         19         5 2024-01-19 #> # ℹ more rows #> # ℹ 104 more variables: Reporting_Airline <chr>, #> #   DOT_ID_Reporting_Airline <dbl>, IATA_CODE_Reporting_Airline <chr>, #> #   Tail_Number <chr>, Flight_Number_Reporting_Airline <dbl>, #> #   OriginAirportID <dbl>, OriginAirportSeqID <dbl>, #> #   OriginCityMarketID <dbl>, Origin <chr>, OriginCityName <chr>, #> #   OriginState <chr>, OriginStateFips <chr>, OriginStateName <chr>, …"},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"from-duckdb","dir":"Articles","previous_headings":"","what":"From DuckDB","title":"Large data","text":"addition as_duckdb_tibble(), arbitrary DuckDB queries can executed result can converted duckplyr frame. , attach existing DuckDB database first: , use read_sql_duckdb() execute query return duckplyr frame:","code":"sql_attach <- paste0(   \"ATTACH DATABASE '\",   path_duckdb,   \"' AS external (READ_ONLY)\" ) db_exec(sql_attach) read_sql_duckdb(\"SELECT * FROM external.data\") #> # A duckplyr data frame: 2 variables #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c"},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"materialization","dir":"Articles","previous_headings":"","what":"Materialization","title":"Large data","text":"dbplyr, compute() used materialize lazy table temporary table database, collect() used bring data R memory. interface works exactly duckplyr: compute.duckplyr_df() function returns duckplyr frame materialized temporary table. return value function duckplyr frame can used computations. materialization done temporary table, data persisted session ends: collect() function brings data R memory returns plain tibble:","code":"simple_data <-   duckdb_tibble(a = 1) |>   mutate(b = 2)  simple_data |>   explain() #> ┌---------------------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             a             │ #> │             b             │ #> │                           │ #> │          ~1 Rows          │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │       Projections: a      │ #> │                           │ #> │          ~1 Rows          │ #> └---------------------------┘  simple_data_computed <-   simple_data |>   compute() simple_data_computed |>   explain() #> ┌---------------------------┐ #> │         SEQ_SCAN          │ #> │    --------------------   │ #> │           Table:          │ #> │    duckplyr_eexomb92Q9    │ #> │                           │ #> │   Type: Sequential Scan   │ #> │                           │ #> │        Projections:       │ #> │             a             │ #> │             b             │ #> │                           │ #> │          ~1 Rows          │ #> └---------------------------┘ duckdb_tibble(a = 1) |>   mutate(b = 2) |>   collect() #> # A tibble: 1 × 2 #>       a     b #>   <dbl> <dbl> #> 1     1     2"},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"to-files","dir":"Articles","previous_headings":"","what":"To files","title":"Large data","text":"materialize data persistent file, compute_csv() compute_parquet() functions can used. compute_csv() function writes data CSV file: compute_parquet() function writes data Parquet file: Just like compute.duckplyr_df(), return value compute_csv() compute_parquet() duckplyr frame uses created CSV Parquet file can used computations. time writing, direct JSON export supported.","code":"path_csv_out <- tempfile(fileext = \".csv\") duckdb_tibble(a = 1) |>   mutate(b = 2) |>   compute_csv(path_csv_out) #> # A duckplyr data frame: 2 variables #>       a     b #>   <dbl> <dbl> #> 1     1     2  writeLines(readLines(path_csv_out)) #> a,b #> 1.0,2.0 path_parquet_out <- tempfile(fileext = \".parquet\") duckdb_tibble(a = 1) |>   mutate(b = 2) |>   compute_parquet(path_parquet_out) |>   explain() #> ┌---------------------------┐ #> │       READ_PARQUET        │ #> │    --------------------   │ #> │         Function:         │ #> │        READ_PARQUET       │ #> │                           │ #> │        Projections:       │ #> │             a             │ #> │             b             │ #> │                           │ #> │          ~1 Rows          │ #> └---------------------------┘"},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"memory-usage","dir":"Articles","previous_headings":"","what":"Memory usage","title":"Large data","text":"Computations carried DuckDB allocate RAM context R process. memory separate memory used R objects, managed DuckDB. Limit memory used DuckDB setting pragma db_exec(): See DuckDB documentation configuration options.","code":"read_sql_duckdb(\"SELECT current_setting('memory_limit') AS memlimit\") #> # A duckplyr data frame: 1 variable #>   memlimit #>   <chr>    #> 1 12.4 GiB  db_exec(\"PRAGMA memory_limit = '1GB'\")  read_sql_duckdb(\"SELECT current_setting('memory_limit') AS memlimit\") #> # A duckplyr data frame: 1 variable #>   memlimit  #>   <chr>     #> 1 953.6 MiB"},{"path":"https://duckplyr.tidyverse.org/dev/articles/large.html","id":"the-big-picture","dir":"Articles","previous_headings":"","what":"The big picture","title":"Large data","text":"functions shown vignette allow construction data transformation pipelines spanning multiple data sources data large fit memory. Full compatibility dplyr provided, existing code can used duckplyr minimal changes. lazy computation duckplyr frames allows efficient data processing, required data read disk. materialization functions allow data persisted temporary tables files, depending use case. typical workflow might look like : Prepare data sources duckplyr frames: local data frames files Combine data sources using dplyr verbs Preview intermediate results usual: computation faster first rows requested avoid rerunning whole pipeline , use compute.duckplyr_df() compute_parquet() materialize intermediate result large fit memory Collect final result using collect.duckplyr_df() write file using compute_csv() compute_parquet() caveat: due design duckplyr, dplyr verb supported uses function supported, data read memory processed . default, data pipeline starts ingestion function, data read memory less 1 million cells values table: group_by() supported, data attempted read memory group_by() operation executed. data small enough fit memory, works transparently. See vignette(\"prudence\") concepts mechanisms play, vignette(\"fallback\") detailed explanation fallback mechanism.","code":"flights_parquet |>   group_by(Month) #> Error in `group_by()`: #> ! This operation cannot be carried out by DuckDB, and the input #>   is a stingy duckplyr frame. #> • Try `summarise(.by = ...)` or `mutate(.by = ...)` instead of #>   `group_by()` and `ungroup()`. #> ℹ Use `compute(prudence = \"lavish\")` to materialize to temporary #>   storage and continue with duckplyr. #> ℹ See `vignette(\"prudence\")` for other options. flights_parquet |>   count(Month, DayofMonth) |>   group_by(Month) #> # A tibble: 182 × 3 #> # Groups:   Month [6] #>    Month DayofMonth     n #>    <dbl>      <dbl> <int> #>  1     1          1 17265 #>  2     1          2 18977 #>  3     1          3 18520 #>  4     1          4 18066 #>  5     1          5 18109 #>  6     1          6 16950 #>  7     1          7 18812 #>  8     1          8 18472 #>  9     1          9 16775 #> 10     1         10 16795 #> # ℹ 172 more rows"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"data-types","dir":"Articles","previous_headings":"","what":"Data types","title":"Translations","text":"duckplyr supports following data types: .logical() .integer() .numeric() .character() .Date() .POSIXct() (UTC time zone) .difftime() Generally, zero-column tibbles supported duckplyr, neither input result. Support data types, passthrough unknown data types, planned. Let’s discuss additional data types like see supported.","code":"duckplyr::duckdb_tibble(   logical = TRUE,   integer = 1L,   numeric = 1.1,   character = \"a\",   Date = as.Date(\"2025-01-11\"),   POSIXct = as.POSIXct(\"2025-01-11 19:23:00\", tz = \"UTC\"),   difftime = as.difftime(1, units = \"secs\"), ) |>   compute() #> # A duckplyr data frame: 7 variables #>   logical integer numeric character Date       POSIXct             #>   <lgl>     <int>   <dbl> <chr>     <date>     <dttm>              #> 1 TRUE          1     1.1 a         2025-01-11 2025-01-11 19:23:00 #> # ℹ 1 more variable: difftime <drtn> duckplyr::duckdb_tibble() #> Error in `duckplyr::duckdb_tibble()`: #> ! Can't convert empty data frame to relational. duckplyr::duckdb_tibble(a = 1, .prudence = \"stingy\") |>   select(-a) #> Error in `select()`: #> ! This operation cannot be carried out by DuckDB, and the input #>   is a stingy duckplyr frame. #> • Zero-column result set not supported. #> ℹ Use `compute(prudence = \"lavish\")` to materialize to temporary #>   storage and continue with duckplyr. #> ℹ See `vignette(\"prudence\")` for other options."},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"verbs","dir":"Articles","previous_headings":"","what":"Verbs","title":"Translations","text":"dplyr verbs implemented within duckplyr. unsupported verbs, duckplyr automatically falls back dplyr. See ?unsupported list verbs duckplyr provide method. See reference index list verbs corresponding duckplyr methods. Let’s discuss additional verbs like see supported.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"functions-within-verbs","dir":"Articles","previous_headings":"","what":"Functions within verbs","title":"Translations","text":"functions used dplyr verbs, translations must provided. expression contains function translation provided, duckplyr falls back dplyr. exceptions, positional matching implemented. now, translations provided:","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"parentheses","dir":"Articles","previous_headings":"Functions within verbs","what":"Parentheses","title":"Translations","text":"Implemented: (. Reference: ?Paren.","code":"duckplyr::duckdb_tibble(a = 1, b = 2, c = 3, .prudence = \"stingy\") |>   mutate((a + b) * c) #> # A duckplyr data frame: 4 variables #>       a     b     c `(a + b) * c` #>   <dbl> <dbl> <dbl>         <dbl> #> 1     1     2     3             9"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"comparison-operators","dir":"Articles","previous_headings":"Functions within verbs","what":"Comparison operators","title":"Translations","text":"Implemented: >, >=, <, <=, ==, !=. Reference: ?Comparison.","code":"duckplyr::duckdb_tibble(   a = c(1, 2, NA),   b = c(2, NA, 3),   c = c(NA, 3, 4),   .prudence = \"stingy\" ) |>   mutate(a > b, b != c, c < a, a >= b, b <= c) #> # A duckplyr data frame: 8 variables #>       a     b     c `a > b` `b != c` `c < a` `a >= b` `b <= c` #>   <dbl> <dbl> <dbl> <lgl>   <lgl>    <lgl>   <lgl>    <lgl>    #> 1     1     2    NA FALSE   NA       NA      FALSE    NA       #> 2     2    NA     3 NA      NA       FALSE   NA       NA       #> 3    NA     3     4 NA      TRUE     NA      NA       TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"basic-arithmetics","dir":"Articles","previous_headings":"Functions within verbs","what":"Basic arithmetics","title":"Translations","text":"Implemented: +, -, *, /. Reference: ?Arithmetic.","code":"duckplyr::duckdb_tibble(a = 1, b = 2, c = 3, .prudence = \"stingy\") |>   mutate(a + b, a / b, a - b, a * b) #> # A duckplyr data frame: 7 variables #>       a     b     c `a + b` `a/b` `a - b` `a * b` #>   <dbl> <dbl> <dbl>   <dbl> <dbl>   <dbl>   <dbl> #> 1     1     2     3       3   0.5      -1       2"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"math-functions","dir":"Articles","previous_headings":"Functions within verbs","what":"Math functions","title":"Translations","text":"Implemented: log(), log10(), abs(). Reference: ?Math.","code":"duckplyr::duckdb_tibble(a = 1, b = 2, c = -3, .prudence = \"stingy\") |>   mutate(log10(a), log(b), abs(c)) #> # A duckplyr data frame: 6 variables #>       a     b     c `log10(a)` `log(b)` `abs(c)` #>   <dbl> <dbl> <dbl>      <dbl>    <dbl>    <dbl> #> 1     1     2    -3          0    0.693        3"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"logical-operators","dir":"Articles","previous_headings":"Functions within verbs","what":"Logical operators","title":"Translations","text":"Implemented: !, &, |. Reference: ?Logic.","code":"duckplyr::duckdb_tibble(a = FALSE, b = TRUE, c = NA, .prudence = \"stingy\") |>   mutate(!a, a & b, b | c) #> # A duckplyr data frame: 6 variables #>   a     b     c     `!a`  `a & b` `b | c` #>   <lgl> <lgl> <lgl> <lgl> <lgl>   <lgl>   #> 1 FALSE TRUE  NA    TRUE  FALSE   TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"branching-and-conversion","dir":"Articles","previous_headings":"Functions within verbs","what":"Branching and conversion","title":"Translations","text":"Implemented: .na(), .integer() dplyr::if_else(), dplyr::coalesce() strftime(x, format)","code":"duckplyr::duckdb_tibble(a = 1, b = NA, .prudence = \"stingy\") |>   mutate(is.na(b), if_else(is.na(b), 0, 1), as.integer(b)) #> # A duckplyr data frame: 5 variables #>       a b     `is.na(b)` `if_else(is.na(b), 0, 1)` `as.integer(b)` #>   <dbl> <lgl> <lgl>                          <dbl>           <int> #> 1     1 NA    TRUE                               0              NA  duckplyr::duckdb_tibble(   a = as.POSIXct(\"2025-01-11 19:23:46\", tz = \"UTC\"),   .prudence = \"stingy\") |>   mutate(strftime(a, \"%H:%M:%S\")) #> # A duckplyr data frame: 2 variables #>   a                   `strftime(a, \"%H:%M:%S\")` #>   <dttm>              <chr>                     #> 1 2025-01-11 19:23:46 19:23:46"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"string-manipulation","dir":"Articles","previous_headings":"Functions within verbs","what":"String manipulation","title":"Translations","text":"Implemented: grepl(), substr(), sub(), gsub().","code":"duckplyr::duckdb_tibble(a = \"abbc\", .prudence = \"stingy\") |>   mutate(grepl(\"b\", a), substr(a, 2L, 3L), sub(\"b\", \"B\", a), gsub(\"b\", \"B\", a)) #> # A duckplyr data frame: 5 variables #>   a     `grepl(\"b\", a)` `substr(a, 2L, 3L)` `sub(\"b\", \"B\", a)` #>   <chr> <lgl>           <chr>               <chr>              #> 1 abbc  TRUE            bbc                 aBbc               #> # ℹ 1 more variable: `gsub(\"b\", \"B\", a)` <chr>"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"date-manipulation","dir":"Articles","previous_headings":"Functions within verbs","what":"Date manipulation","title":"Translations","text":"Implemented: lubridate::hour(), lubridate::minute(), lubridate::second(), lubridate::wday().","code":"duckplyr::duckdb_tibble(   a = as.POSIXct(\"2025-01-11 19:23:46\", tz = \"UTC\"),   .prudence = \"stingy\" ) |>   mutate(     hour = lubridate::hour(a),     minute = lubridate::minute(a),     second = lubridate::second(a),     wday = lubridate::wday(a)   ) #> # A duckplyr data frame: 5 variables #>   a                    hour minute second  wday #>   <dttm>              <dbl>  <dbl>  <dbl> <int> #> 1 2025-01-11 19:23:46    19     23     46     7"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"aggregation","dir":"Articles","previous_headings":"Functions within verbs","what":"Aggregation","title":"Translations","text":"Implemented: sum(x, na.rm), dplyr::n(), dplyr::n_distinct() mean(x, na.rm), median(x, na.rm), sd(x, na.rm) min(), max(), (), ()","code":"duckplyr::duckdb_tibble(a = 1:3, b = c(1, 2, 2), .prudence = \"stingy\") |>   summarize(     sum(a),     n(),     n_distinct(b),   ) #> # A duckplyr data frame: 3 variables #>   `sum(a)` `n()` `n_distinct(b)` #>      <dbl> <int>           <dbl> #> 1        6     3               2  duckplyr::duckdb_tibble(a = 1:3, b = c(1, 2, NA), .prudence = \"stingy\") |>   summarize(     mean(b, na.rm = TRUE),     median(a),     sd(b),   ) #> # A duckplyr data frame: 3 variables #>   `mean(b, na.rm = TRUE)` `median(a)` `sd(b)` #>                     <dbl>       <dbl>   <dbl> #> 1                     1.5           2      NA  duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   summarize(     min(a),     max(a),     any(a > 1),     all(a > 1),   ) #> # A duckplyr data frame: 4 variables #>   `min(a)` `max(a)` `any(a > 1)` `all(a > 1)` #>      <int>    <int> <lgl>        <lgl>        #> 1        1        3 TRUE         FALSE"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"shifting","dir":"Articles","previous_headings":"Functions within verbs","what":"Shifting","title":"Translations","text":"optional arguments dplyr::lag() dplyr::lead() supported.","code":"duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   mutate(lag(a), lead(a)) #> # A duckplyr data frame: 3 variables #>       a `lag(a)` `lead(a)` #>   <int>    <int>     <int> #> 1     1       NA         2 #> 2     2        1         3 #> 3     3        2        NA duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   mutate(lag(a, 2), lead(a, n = 2)) #> # A duckplyr data frame: 3 variables #>       a `lag(a, 2)` `lead(a, n = 2)` #>   <int>       <int>            <int> #> 1     1          NA                3 #> 2     2          NA               NA #> 3     3           1               NA duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   mutate(lag(a, default = 0), lead(a, default = 4)) #> # A duckplyr data frame: 3 variables #>       a `lag(a, default = 0)` `lead(a, default = 4)` #>   <int>                 <int>                  <int> #> 1     1                     0                      2 #> 2     2                     1                      3 #> 3     3                     2                      4 duckplyr::duckdb_tibble(a = 1:3, b = c(2, 3, 1), .prudence = \"stingy\") |>   mutate(lag(a, order_by = b), lead(a, order_by = b)) #> # A duckplyr data frame: 4 variables #>       a     b `lag(a, order_by = b)` `lead(a, order_by = b)` #>   <int> <dbl>                  <int>                   <int> #> 1     3     1                     NA                       1 #> 2     1     2                      3                       2 #> 3     2     3                      1                      NA"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"ranking","dir":"Articles","previous_headings":"Functions within verbs","what":"Ranking","title":"Translations","text":"Ranking DuckDB different dplyr. functions DuckDB rank current row number, whereas dplyr, ranking done column. difficult provide translations following ranking functions. rank(), dplyr::min_rank(), dplyr::dense_rank() dplyr::percent_rank(), dplyr::cume_dist() Implementing dplyr::ntile() feasible n argument. ranking function currently implemented dplyr::row_number().","code":"duckplyr::duckdb_tibble(a = c(1, 2, 2, 3), .prudence = \"stingy\") |>   mutate(row_number()) #> # A duckplyr data frame: 2 variables #>       a `row_number()` #>   <dbl>          <int> #> 1     1              1 #> 2     2              2 #> 3     2              3 #> 4     3              4"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"special-cases","dir":"Articles","previous_headings":"Functions within verbs","what":"Special cases","title":"Translations","text":"$ (?Extract) implemented LHS .data .env: %% (?match) implemented RHS constant 100 values: dplyr::desc() implemented context dplyr::arrange(): suppressWarnings() -op:","code":"b <- 4 duckplyr::duckdb_tibble(a = 1, b = 2, .prudence = \"stingy\") |>   mutate(.data$a + .data$b, .env$b) #> # A duckplyr data frame: 4 variables #>       a     b `.data$a + .data$b` `.env$b` #>   <dbl> <dbl>               <dbl>    <dbl> #> 1     1     2                   3        4 duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   mutate(a %in% c(1, 3)) |>   collect() #> # A tibble: 3 × 2 #>       a `a %in% c(1, 3)` #>   <int> <lgl>            #> 1     1 TRUE             #> 2     2 FALSE            #> 3     3 TRUE duckplyr::last_rel() #> DuckDB Relation:  #> --------------------- #> --- Relation Tree --- #> --------------------- #> Projection [a as a, ___coalesce(\"|\"(\"r_base::==\"(a, 1.0), \"r_base::==\"(a, 3.0)), false) as a %in% c(1, 3)] #>   r_dataframe_scan(0xdeadbeef) #>  #> --------------------- #> -- Result Columns  -- #> --------------------- #> - a (INTEGER) #> - a %in% c(1, 3) (BOOLEAN) duckplyr::duckdb_tibble(a = 1:3, .prudence = \"stingy\") |>   arrange(desc(a)) |>   explain() #> ┌---------------------------┐ #> │          ORDER_BY         │ #> │    --------------------   │ #> │      dataframe_42_42      │ #> │      40572985.a DESC      │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │       Projections: a      │ #> │                           │ #> │          ~3 Rows          │ #> └---------------------------┘ duckplyr::duckdb_tibble(a = 1, .prudence = \"stingy\") |>   mutate(suppressWarnings(a + 1)) #> # A duckplyr data frame: 2 variables #>       a `suppressWarnings(a + 1)` #>   <dbl>                     <dbl> #> 1     1                         2"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"contributing","dir":"Articles","previous_headings":"Functions within verbs","what":"Contributing","title":"Translations","text":"Refer contributing guide learn contribute new translations package. Ideally, duckplyr also support adding custom translations functions duration current R session.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"known-incompatibilities","dir":"Articles","previous_headings":"","what":"Known incompatibilities","title":"Translations","text":"section tracks known incompatibilities dplyr duckplyr. Changing likely require substantial effort, might best addressed providing new functions consistent behavior dplyr DuckDB.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"output-order-stability","dir":"Articles","previous_headings":"Known incompatibilities","what":"Output order stability","title":"Translations","text":"DuckDB guarantee order stability output. performance reasons, duckplyr enable output order stability default. can changed globally DUCKPLYR_OUTPUT_ORDER environment variable, see ?config details. setting, output order stable, plans complicated, DuckDB needs work.","code":"duckplyr::flights_df() |>   duckplyr::as_duckdb_tibble() |>   distinct(day) |>   summarize(paste(day, collapse = \" \")) # fallback #> # A duckplyr data frame: 1 variable #>   `paste(day, collapse = \" \")`                                          #>   <chr>                                                                 #> 1 5 9 11 14 15 16 17 22 26 30 31 2 10 18 28 29 1 7 8 13 19 21 25 27 3 …  duckplyr::flights_df() |>   distinct(day) |>   summarize(paste(day, collapse = \" \")) #> # A tibble: 1 × 1 #>   `paste(day, collapse = \" \")`                                          #>   <chr>                                                                 #> 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26… duckplyr::flights_df() |>   duckplyr::as_duckdb_tibble() |>   distinct(day) |>   explain() #> ┌---------------------------┐ #> │       HASH_GROUP_BY       │ #> │    --------------------   │ #> │         Groups: #0        │ #> │                           │ #> │        ~336776 Rows       │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │            day            │ #> │                           │ #> │        ~336776 Rows       │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │      Projections: day     │ #> │                           │ #> │        ~336776 Rows       │ #> └---------------------------┘  withr::with_envvar(   c(DUCKPLYR_OUTPUT_ORDER = \"TRUE\"),   duckplyr::flights_df() |>     duckplyr::as_duckdb_tibble() |>     distinct(day) |>     explain() ) #> ┌---------------------------┐ #> │          ORDER_BY         │ #> │    --------------------   │ #> │      dataframe_42_42      │ #> │ 42.___row_number ASC│ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │           FILTER          │ #> │    --------------------   │ #> │   (___row_number_by = 1)  │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             #0            │ #> │             #1            │ #> │             #2            │ #> │                           │ #> │        ~336776 Rows       │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │           WINDOW          │ #> │    --------------------   │ #> │        Projections:       │ #> │     ROW_NUMBER() OVER     │ #> │ (PARTITION BY day ORDER BY│ #> │   ___row_number ASC NULLS │ #> │            LAST)          │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │        ~336776 Rows       │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │      STREAMING_WINDOW     │ #> │    --------------------   │ #> │        Projections:       │ #> │    ROW_NUMBER() OVER ()   │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │      Projections: day     │ #> │                           │ #> │        ~336776 Rows       │ #> └---------------------------┘"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"sum","dir":"Articles","previous_headings":"Known incompatibilities","what":"sum()","title":"Translations","text":"duckplyr, function returns numeric value also integers, due DuckDB’s type stability requirement.","code":"duckplyr::duckdb_tibble(a = 1:100) |>   summarize(sum(a)) #> # A duckplyr data frame: 1 variable #>   `sum(a)` #>      <dbl> #> 1     5050  duckplyr::duckdb_tibble(a = 1:1000000) |>   summarize(sum(a)) #> # A duckplyr data frame: 1 variable #>       `sum(a)` #>          <dbl> #> 1 500000500000  tibble(a = 1:100) |>   summarize(sum(a)) #> # A tibble: 1 × 1 #>   `sum(a)` #>      <int> #> 1     5050  tibble(a = 1:1000000) |>   summarize(sum(a)) #> # A tibble: 1 × 1 #>       `sum(a)` #>          <dbl> #> 1 500000500000"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"empty-vectors-in-aggregate-functions","dir":"Articles","previous_headings":"Known incompatibilities","what":"Empty vectors in aggregate functions","title":"Translations","text":"time writing, empty vectors occur summarizing empty table without grouping. cases, duckplyr returns NA, behavior dplyr different: sum() empty vector returns 0 () () return FALSE min() max() return infinity values (warning)","code":"duckplyr::duckdb_tibble(a = integer(), b = logical()) |>   summarize(sum(a), any(b), all(b), min(a), max(a)) #> # A duckplyr data frame: 5 variables #>   `sum(a)` `any(b)` `all(b)` `min(a)` `max(a)` #>      <dbl> <lgl>    <lgl>       <int>    <int> #> 1       NA NA       NA             NA       NA tibble(a = integer(), b = logical()) |>   summarize(sum(a), any(b), all(b), min(a), max(a)) #> Warning: There were 2 warnings in `summarize()`. #> The first warning was: #> ℹ In argument: `min(a)`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #> # A tibble: 1 × 5 #>   `sum(a)` `any(b)` `all(b)` `min(a)` `max(a)` #>      <int> <lgl>    <lgl>       <dbl>    <dbl> #> 1        0 FALSE    TRUE          Inf     -Inf"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"min-and-max-for-logical-input","dir":"Articles","previous_headings":"Known incompatibilities","what":"min() and max() for logical input","title":"Translations","text":"completeness, duckplyr returns logical min() max() input logical, dplyr returns integer.","code":"duckplyr::duckdb_tibble(a = c(TRUE, FALSE)) |>   summarize(min(a), max(a)) #> # A duckplyr data frame: 2 variables #>   `min(a)` `max(a)` #>   <lgl>    <lgl>    #> 1 FALSE    TRUE  tibble(a = c(TRUE, FALSE)) |>   summarize(min(a), max(a)) #> # A tibble: 1 × 2 #>   `min(a)` `max(a)` #>      <int>    <int> #> 1        0        1"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"n_distinct-and-multiple-arguments","dir":"Articles","previous_headings":"Known incompatibilities","what":"n_distinct() and multiple arguments","title":"Translations","text":"function needs exactly one argument besides optional na.rm. Multiple arguments supported.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"is-na-and-nan-values","dir":"Articles","previous_headings":"Known incompatibilities","what":"is.na() and NaN values","title":"Translations","text":"function returns FALSE NaN values duckplyr, returns TRUE dplyr.","code":"duckplyr::duckdb_tibble(a = c(NA, NaN)) |>   mutate(is.na(a)) #> # A duckplyr data frame: 2 variables #>       a `is.na(a)` #>   <dbl> <lgl>      #> 1    NA TRUE       #> 2   NaN FALSE  tibble(a = c(NA, NaN)) |>   mutate(is.na(a)) #> # A tibble: 2 × 2 #>       a `is.na(a)` #>   <dbl> <lgl>      #> 1    NA TRUE       #> 2   NaN TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/articles/limits.html","id":"other-differences","dir":"Articles","previous_headings":"Known incompatibilities","what":"Other differences","title":"Translations","text":"pipeline give different results tibble() duckdb_tibble()? love hear , please file issue.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Memory protection: controlling automatic materialization","text":"user’s perspective, data frames backed duckplyr, class \"duckplyr_df\", behave regular data frames almost respects. particular, direct column access like df$x, retrieving number rows nrow(), works identically. Conceptually, duckplyr frames “eager”: hood, two key differences provide improved performance usability: lazy materialization: Unlike traditional data frames, duckplyr defers computation absolutely necessary, .e. lazily, allowing DuckDB optimize execution. prudence: Automatic materialization controllable, automatic materialization large data might otherwise inadvertently lead memory problems. term “prudence” introduced set clear distinction concept “laziness”, “control automatic materialization” mouthful.","code":"df <-   duckplyr::duckdb_tibble(x = 1:3) |>   mutate(y = x + 1) df #> # A duckplyr data frame: 2 variables #>       x     y #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  class(df) #> [1] \"duckplyr_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"  df$y #> [1] 2 3 4  nrow(df) #> [1] 3"},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"eager-and-lazy-computation","dir":"Articles","previous_headings":"","what":"Eager and lazy computation","title":"Memory protection: controlling automatic materialization","text":"duckplyr frame result dplyr operation, accessing column data retrieving number rows trigger computation carried DuckDB, dplyr. sense, duckplyr frames also “lazy”: computation deferred last possible moment, allowing DuckDB optimize whole pipeline.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"example","dir":"Articles","previous_headings":"Eager and lazy computation","what":"Example","title":"Memory protection: controlling automatic materialization","text":"explained following example computes mean arrival delay flights departing Newark airport (EWR) day month: Setting pipeline fast, size data affect setup costs. computation deferred, DuckDB can optimize whole pipeline, can seen output : first step pipeline prune unneeded columns, origin, month, arr_delay kept. result becomes available accessed:","code":"flights <- duckplyr::flights_df()  flights_duckdb <-   flights |>   duckplyr::as_duckdb_tibble()  system.time(   mean_arr_delay_ewr <-     flights_duckdb |>     filter(origin == \"EWR\", !is.na(arr_delay)) |>     summarize(       .by = month,       mean_arr_delay = mean(arr_delay),       min_arr_delay = min(arr_delay),       max_arr_delay = max(arr_delay),       median_arr_delay = median(arr_delay),     ) ) #>    user  system elapsed  #>   0.009   0.000   0.009 mean_arr_delay_ewr |>   explain() #> ┌---------------------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │           month           │ #> │       mean_arr_delay      │ #> │       min_arr_delay       │ #> │       max_arr_delay       │ #> │      median_arr_delay     │ #> │                           │ #> │        ~33677 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │       HASH_GROUP_BY       │ #> │    --------------------   │ #> │         Groups: #0        │ #> │                           │ #> │        Aggregates:        │ #> │    sum_no_overflow(#1)    │ #> │          avg(#2)          │ #> │          min(#3)          │ #> │          max(#4)          │ #> │     quantile_cont(#5)     │ #> │                           │ #> │        ~33677 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │           month           │ #> │ CASE  WHEN ((arr_delay IS │ #> │ NULL)) THEN (1) ELSE 0 END│ #> │         arr_delay         │ #> │         arr_delay         │ #> │         arr_delay         │ #> │         arr_delay         │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │           FILTER          │ #> │    --------------------   │ #> │ ((NOT (arr_delay IS NULL))│ #> │    AND (origin = 'EWR'))  │ #> │                           │ #> │        ~67355 Rows        │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │     R_DATAFRAME_SCAN      │ #> │    --------------------   │ #> │      Text: data.frame     │ #> │                           │ #> │        Projections:       │ #> │           month           │ #> │         arr_delay         │ #> │           origin          │ #> │                           │ #> │        ~336776 Rows       │ #> └---------------------------┘ system.time(mean_arr_delay_ewr$mean_arr_delay[[1]]) #>    user  system elapsed  #>   0.018   0.003   0.017"},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"comparison","dir":"Articles","previous_headings":"Eager and lazy computation","what":"Comparison","title":"Memory protection: controlling automatic materialization","text":"functionality similar lazy tables dbplyr lazy frames dtplyr. However, behavior different: time writing, internal structure lazy table frame different data frame, columns accessed directly. contrast, dplyr, intermediate step also final result proper data frame, computed right away, forfeiting opportunity optimization: See also duckplyr: dplyr Powered DuckDB blog post information.","code":"system.time(   flights |>     filter(origin == \"EWR\", !is.na(arr_delay)) |>     summarize(       .by = c(month, day),       mean_arr_delay = mean(arr_delay),       min_arr_delay = min(arr_delay),       max_arr_delay = max(arr_delay),       median_arr_delay = median(arr_delay),     ) ) #>    user  system elapsed  #>   0.039   0.004   0.044"},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"prudence","dir":"Articles","previous_headings":"","what":"Prudence","title":"Memory protection: controlling automatic materialization","text":"“eager” “lazy” time introduces challenge: easy accidentally trigger computation, prohibitive intermediate result large fit memory. Prudence setting duckplyr frames limits size data materialized automatically.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"concept","dir":"Articles","previous_headings":"Prudence","what":"Concept","title":"Memory protection: controlling automatic materialization","text":"Three levels prudence available: lavish (careless resources): always automatically materialize, first example. stingy (avoid spending cost): never automatically materialize, throw error attempting access data. thrifty (use resources wisely): automaticaly materialize data small, otherwise throw error. lavish duckplyr frames, two previous examples, underlying DuckDB computation carried upon first request. results computed, cached subsequent requests fast. good choice small medium-sized data, DuckDB can provide nice speedup materializing data affordable stage. default duckdb_tibble() as_duckdb_tibble(). stingy duckplyr frames, accessing column requesting number rows triggers error. good choice large data sets cost materializing data may prohibitive due size computation time, user wants control computation carried results stored. Results can materialized explicitly collect() functions. Thrifty duckplyr frames compromise lavish stingy, discussed .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"example-1","dir":"Articles","previous_headings":"Prudence","what":"Example","title":"Memory protection: controlling automatic materialization","text":"Passing prudence = \"stingy\" as_duckdb_tibble() creates stingy duckplyr frame. data can displayed, column names types can accessed. hand, accessing column requesting number rows triggers error: means stingy duckplyr frames can also used enforce DuckDB operation pipeline.","code":"flights_stingy <-   flights |>   duckplyr::as_duckdb_tibble(prudence = \"stingy\") flights_stingy #> # A duckplyr data frame: 19 variables #>     year month   day dep_time sched_dep_time dep_delay arr_time #>    <int> <int> <int>    <int>          <int>     <dbl>    <int> #>  1  2013     1     1      517            515         2      830 #>  2  2013     1     1      533            529         4      850 #>  3  2013     1     1      542            540         2      923 #>  4  2013     1     1      544            545        -1     1004 #>  5  2013     1     1      554            600        -6      812 #>  6  2013     1     1      554            558        -4      740 #>  7  2013     1     1      555            600        -5      913 #>  8  2013     1     1      557            600        -3      709 #>  9  2013     1     1      557            600        -3      838 #> 10  2013     1     1      558            600        -2      753 #> # ℹ more rows #> # ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, #> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, #> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>  names(flights_stingy)[1:10] #>  [1] \"year\"           \"month\"          \"day\"            #>  [4] \"dep_time\"       \"sched_dep_time\" \"dep_delay\"      #>  [7] \"arr_time\"       \"sched_arr_time\" \"arr_delay\"      #> [10] \"carrier\"  class(flights_stingy) #> [1] \"prudent_duckplyr_df\" \"duckplyr_df\"         \"tbl_df\"              #> [4] \"tbl\"                 \"data.frame\"  class(flights_stingy[[1]]) #> [1] \"integer\" nrow(flights_stingy) #> Error: Materialization is disabled, use collect() or as_tibble() to materialize.  flights_stingy[[1]] #> Error: Materialization is disabled, use collect() or as_tibble() to materialize."},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"enforcing-duckdb-operation","dir":"Articles","previous_headings":"Prudence","what":"Enforcing DuckDB operation","title":"Memory protection: controlling automatic materialization","text":"operations supported duckplyr, original dplyr implementation used fallback. original dplyr implementation accesses columns directly, data must materialized fallback can executed. Therefore, stingy frames allow check operations supported DuckDB: stingy frame, fallbacks dplyr possible. pipeline lavish frame works, computation carried dplyr: using operations supported duckplyr avoiding fallbacks much possible, pipelines executed DuckDB optimized way.","code":"flights_stingy |>   group_by(origin) |>   summarize(n = n()) |>   ungroup() #> Error in `group_by()`: #> ! This operation cannot be carried out by DuckDB, and the input #>   is a stingy duckplyr frame. #> • Try `summarise(.by = ...)` or `mutate(.by = ...)` instead of #>   `group_by()` and `ungroup()`. #> ℹ Use `compute(prudence = \"lavish\")` to materialize to temporary #>   storage and continue with duckplyr. #> ℹ See `vignette(\"prudence\")` for other options. flights_stingy |>   duckplyr::as_duckdb_tibble(prudence = \"lavish\") |>   group_by(origin) |>   summarize(n = n()) |>   ungroup() #> # A tibble: 3 × 2 #>   origin      n #>   <chr>   <int> #> 1 EWR    120835 #> 2 JFK    111279 #> 3 LGA    104662"},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"from-stingy-to-lavish","dir":"Articles","previous_headings":"Prudence","what":"From stingy to lavish","title":"Memory protection: controlling automatic materialization","text":"stingy duckplyr frame can converted lavish one as_duckdb_tibble(prudence = \"lavish\"). collect.duckplyr_df() method triggers computation converts plain tibble. difference two class returned object: behavior achieved as_tibble() .data.frame():","code":"flights_stingy |>   duckplyr::as_duckdb_tibble(prudence = \"lavish\") |>   class() #> [1] \"duckplyr_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"  flights_stingy |>   collect() |>   class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" flights_stingy |>   as_tibble() |>   class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\"  flights_stingy |>   as.data.frame() |>   class() #> [1] \"data.frame\""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"comparison-1","dir":"Articles","previous_headings":"Prudence","what":"Comparison","title":"Memory protection: controlling automatic materialization","text":"Stingy duckplyr frames behave like lazy tables dbplyr lazy frames dtplyr: computation starts explicitly request collect.duckplyr_df() means. However, stingy duckplyr frames can converted lavish ones time, vice versa. dtplyr dbplyr, lavish frames: collection always needs explicit.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"thrift","dir":"Articles","previous_headings":"","what":"Thrift","title":"Memory protection: controlling automatic materialization","text":"Thrifty compromise stingy lavish. Materialization allowed data certain size, measured cells (values) rows resulting data frame. setting, data materialized result fewer 1,000,000 cells (rows multiplied columns). original input large materialized, operation fails. hand, result aggregation small enough materialized: Thrifty good choice data sets cost materializing data prohibitive large results. default ingestion functions like read_parquet_duckdb().","code":"nrow(flights) #> [1] 336776 flights_partial <-   flights |>   duckplyr::as_duckdb_tibble(prudence = \"thrifty\") flights_partial |>   select(origin, dest, dep_delay, arr_delay) |>   nrow() #> Error: Materialization would result in more than 250000 rows. Use collect() or as_tibble() to materialize. flights_partial |>   count(origin) |>   nrow() #> [1] 3"},{"path":"https://duckplyr.tidyverse.org/dev/articles/prudence.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Memory protection: controlling automatic materialization","text":"duckplyr package provides drop-replacement duckplyr, necessitates “eager” data frames automatically materialize like dplyr, optimization DuckDB, means “lazy” evaluation data materialized latest possible stage. Automatic materialization can dangerous memory large data, duckplyr provides setting called prudence controls automatic materialization: data automatically materialized always (“lavish” frames), never (“stingy” frames) certain size (“thrifty” frames). See vignette(\"large\") details working large data sets, vignette(\"fallback\") fallbacks dplyr, vignette(\"limits\") operations supported duckplyr, vignette(\"duckdb\") using DuckDB functions directly.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hannes Mühleisen. Author. Kirill Müller. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mühleisen H, Müller K (2025). duckplyr: 'DuckDB'-Backed Version 'dplyr'. R package version 1.0.1.9009, https://github.com/tidyverse/duckplyr, https://duckplyr.tidyverse.org.","code":"@Manual{,   title = {duckplyr: A 'DuckDB'-Backed Version of 'dplyr'},   author = {Hannes Mühleisen and Kirill Müller},   year = {2025},   note = {R package version 1.0.1.9009, https://github.com/tidyverse/duckplyr},   url = {https://duckplyr.tidyverse.org}, }"},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"duckplyr-","dir":"","previous_headings":"","what":"A DuckDB-Backed Version of dplyr","title":"A DuckDB-Backed Version of dplyr","text":"drop-replacement dplyr, powered DuckDB speed. dplyr grammar data manipulation tidyverse. duckplyr package run existing dplyr code identical results, using DuckDB possible compute results faster. addition, can analyze larger--memory datasets straight files disk web. new dplyr, best place start data transformation chapter R Data Science.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A DuckDB-Backed Version of dplyr","text":"Install duckplyr CRAN : can also install development version duckplyr R-universe: GitHub :","code":"install.packages(\"duckplyr\") install.packages(\"duckplyr\", repos = c(\"https://tidyverse.r-universe.dev\", \"https://cloud.r-project.org\")) # install.packages(\"pak\") pak::pak(\"tidyverse/duckplyr\")"},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"drop-in-replacement-for-dplyr","dir":"","previous_headings":"","what":"Drop-in replacement for dplyr","title":"A DuckDB-Backed Version of dplyr","text":"Calling library(duckplyr) overwrites dplyr methods, enabling duckplyr entire session. following code aggregates inflight delay year month first half year. use variant nycflights13::flights dataset, timezone set UTC work around current limitation duckplyr, see vignette(\"limits\"). result plain tibble: Nothing computed yet. Querying number rows, column, starts computation: Note , unlike dplyr, results ordered, see ?config details. However, materialized, results stable: computation supported DuckDB, duckplyr automatically fall back dplyr. Restart R, call duckplyr::methods_restore() revert default dplyr implementation.","code":"library(conflicted) library(duckplyr) #> Loading required package: dplyr #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`. conflict_prefer(\"filter\", \"dplyr\") #> [conflicted] Will prefer dplyr::filter #> over any other package. flights_df() #> # A tibble: 336,776 × 19 #>     year month   day dep_time sched_d…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ #>    <int> <int> <int>    <int>     <int>   <dbl>   <int>   <int>   <dbl> #>  1  2013     1     1      517       515       2     830     819      11 #>  2  2013     1     1      533       529       4     850     830      20 #>  3  2013     1     1      542       540       2     923     850      33 #>  4  2013     1     1      544       545      -1    1004    1022     -18 #>  5  2013     1     1      554       600      -6     812     837     -25 #>  6  2013     1     1      554       558      -4     740     728      12 #>  7  2013     1     1      555       600      -5     913     854      19 #>  8  2013     1     1      557       600      -3     709     723     -14 #>  9  2013     1     1      557       600      -3     838     846      -8 #> 10  2013     1     1      558       600      -2     753     745       8 #> # ℹ 336,766 more rows #> # ℹ abbreviated names: ¹​sched_dep_time, ²​dep_delay, ³​arr_time, #> #   ⁴​sched_arr_time, ⁵​arr_delay #> # ℹ 10 more variables: carrier <chr>, flight <int>, tailnum <chr>, #> #   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, #> #   hour <dbl>, minute <dbl>, time_hour <dttm>  out <-   flights_df() |>   filter(!is.na(arr_delay), !is.na(dep_delay)) |>   mutate(inflight_delay = arr_delay - dep_delay) |>   summarize(     .by = c(year, month),     mean_inflight_delay = mean(inflight_delay),     median_inflight_delay = median(inflight_delay),   ) |>   filter(month <= 6) class(out) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" out$month #> [1] 1 2 3 4 5 6 out #> # A tibble: 6 × 4 #>    year month mean_inflight_delay median_inflight_delay #>   <int> <int>               <dbl>                 <dbl> #> 1  2013     1               -3.86                    -5 #> 2  2013     2               -5.15                    -6 #> 3  2013     3               -7.36                    -9 #> 4  2013     4               -2.67                    -5 #> 5  2013     5               -9.37                   -10 #> 6  2013     6               -4.24                    -7 flights_df() |>   summarize(     .by = origin,     dest = paste(sort(unique(dest)), collapse = \" \")   ) #> # A tibble: 3 × 2 #>   origin dest                                                           #>   <chr>  <chr>                                                          #> 1 EWR    ALB ANC ATL AUS AVL BDL BNA BOS BQN BTV BUF BWI BZN CAE CHS C… #> 2 LGA    ATL AVL BGR BHM BNA BOS BTV BUF BWI CAE CAK CHO CHS CLE CLT C… #> 3 JFK    ABQ ACK ATL AUS BHM BNA BOS BQN BTV BUF BUR BWI CHS CLE CLT C… duckplyr::methods_restore() #> ℹ Restoring dplyr methods."},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"analyzing-larger-than-memory-data","dir":"","previous_headings":"","what":"Analyzing larger-than-memory data","title":"A DuckDB-Backed Version of dplyr","text":"extended variant nycflights13::flights dataset also available download Parquet files. Using httpfs DuckDB extension, can query files directly R, without even downloading first. Like local data frames, queries remote data executed lazily. Unlike local data frames, default disallow automatic materialization result large order protect memory: results materialized explicitly requested, collect() call instance. printing, first rows result fetched. Complex queries can executed remote data. Note relevant columns fetched 2024 data isn’t even touched, ’s needed result. 10M rows analyzed 10 seconds internet, ’s bad. course, working Parquet, CSV, JSON files downloaded locally possible well. full compatibility, na.rm = FALSE default aggregation functions:","code":"year <- 2022:2024 base_url <- \"https://blobs.duckdb.org/flight-data-partitioned/\" files <- paste0(\"Year=\", year, \"/data_0.parquet\") urls <- paste0(base_url, files) tibble(urls) #> # A tibble: 3 × 1 #>   urls                                                                  #>   <chr>                                                                 #> 1 https://blobs.duckdb.org/flight-data-partitioned/Year=2022/data_0.pa… #> 2 https://blobs.duckdb.org/flight-data-partitioned/Year=2023/data_0.pa… #> 3 https://blobs.duckdb.org/flight-data-partitioned/Year=2024/data_0.pa… db_exec(\"INSTALL httpfs\") db_exec(\"LOAD httpfs\")  flights <- read_parquet_duckdb(urls) nrow(flights) #> Error: Materialization would result in more than 9090 rows. Use collect() or as_tibble() to materialize. flights #> # A duckplyr data frame: 110 variables #>     Year Quarter Month DayofMonth DayOfWeek FlightDate Report…¹ DOT_I…² #>    <dbl>   <dbl> <dbl>      <dbl>     <dbl> <date>     <chr>      <dbl> #>  1  2022       1     1         14         5 2022-01-14 YX         20452 #>  2  2022       1     1         15         6 2022-01-15 YX         20452 #>  3  2022       1     1         16         7 2022-01-16 YX         20452 #>  4  2022       1     1         17         1 2022-01-17 YX         20452 #>  5  2022       1     1         18         2 2022-01-18 YX         20452 #>  6  2022       1     1         19         3 2022-01-19 YX         20452 #>  7  2022       1     1         20         4 2022-01-20 YX         20452 #>  8  2022       1     1         21         5 2022-01-21 YX         20452 #>  9  2022       1     1         22         6 2022-01-22 YX         20452 #> 10  2022       1     1         23         7 2022-01-23 YX         20452 #> # ℹ more rows #> # ℹ abbreviated names: ¹​Reporting_Airline, ²​DOT_ID_Reporting_Airline #> # ℹ 102 more variables: IATA_CODE_Reporting_Airline <chr>, #> #   Tail_Number <chr>, Flight_Number_Reporting_Airline <dbl>, #> #   OriginAirportID <dbl>, OriginAirportSeqID <dbl>, #> #   OriginCityMarketID <dbl>, Origin <chr>, OriginCityName <chr>, #> #   OriginState <chr>, OriginStateFips <chr>, OriginStateName <chr>, #> #   OriginWac <dbl>, DestAirportID <dbl>, DestAirportSeqID <dbl>, #> #   DestCityMarketID <dbl>, Dest <chr>, DestCityName <chr>, #> #   DestState <chr>, DestStateFips <chr>, DestStateName <chr>, #> #   DestWac <dbl>, CRSDepTime <chr>, DepTime <chr>, DepDelay <dbl>, #> #   DepDelayMinutes <dbl>, DepDel15 <dbl>, … flights |>   count(Year) #> # A duckplyr data frame: 2 variables #>    Year       n #>   <dbl>   <int> #> 1  2022 6729125 #> 2  2023 6847899 #> 3  2024 3461319 out <-   flights |>   mutate(InFlightDelay = ArrDelay - DepDelay) |>   summarize(     .by = c(Year, Month),     MeanInFlightDelay = mean(InFlightDelay, na.rm = TRUE),     MedianInFlightDelay = median(InFlightDelay, na.rm = TRUE),   ) |>   filter(Year < 2024)  out |>   explain() #> ┌---------------------------┐ #> │       HASH_GROUP_BY       │ #> │    --------------------   │ #> │          Groups:          │ #> │             #0            │ #> │             #1            │ #> │                           │ #> │        Aggregates:        │ #> │          mean(#2)         │ #> │         median(#3)        │ #> │                           │ #> │       ~6729125 Rows       │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │            Year           │ #> │           Month           │ #> │       InFlightDelay       │ #> │       InFlightDelay       │ #> │                           │ #> │       ~13458250 Rows      │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │         PROJECTION        │ #> │    --------------------   │ #> │            Year           │ #> │           Month           │ #> │       InFlightDelay       │ #> │                           │ #> │       ~13458250 Rows      │ #> └-------------┬-------------┘ #> ┌-------------┴-------------┐ #> │       READ_PARQUET        │ #> │    --------------------   │ #> │         Function:         │ #> │        READ_PARQUET       │ #> │                           │ #> │        Projections:       │ #> │            Year           │ #> │           Month           │ #> │          DepDelay         │ #> │          ArrDelay         │ #> │                           │ #> │       File Filters:       │ #> │  (CAST(Year AS DOUBLE) <  │ #> │           2024.0)         │ #> │                           │ #> │    Scanning Files: 2/3    │ #> │                           │ #> │       ~13458250 Rows      │ #> └---------------------------┘  out |>   print() |>   system.time() #> # A duckplyr data frame: 4 variables #>     Year Month MeanInFlightDelay MedianInFlightDelay #>    <dbl> <dbl>             <dbl>               <dbl> #>  1  2022    11             -5.21                  -7 #>  2  2023    11             -7.10                  -8 #>  3  2022     8             -5.27                  -7 #>  4  2023     4             -4.54                  -6 #>  5  2022     7             -5.13                  -7 #>  6  2022     4             -4.88                  -6 #>  7  2023     8             -5.73                  -7 #>  8  2023     7             -4.47                  -7 #>  9  2022     2             -6.52                  -8 #> 10  2023     5             -6.17                  -7 #> # ℹ more rows #>    user  system elapsed  #>   1.145   0.455   9.402 flights |>   summarize(mean(ArrDelay - DepDelay)) #> # A duckplyr data frame: 1 variable #>   `mean(ArrDelay - DepDelay)` #>                         <dbl> #> 1                          NA"},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further reading","title":"A DuckDB-Backed Version of dplyr","text":"vignette(\"large\"): Tools working large data vignette(\"prudence\"): duckplyr can help protect memory working large data vignette(\"fallback\"): fallback dplyr works internally vignette(\"limits\"): Translation dplyr employed duckplyr, current limitations vignette(\"duckdb\"): Using full power DuckDB vignette(\"developers\"): Using duckplyr individual data frames packages vignette(\"telemetry\"): Telemetry duckplyr","code":""},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"A DuckDB-Backed Version of dplyr","text":"encounter clear bug, please file issue minimal reproducible example GitHub. questions discussion, please use forum.posit.co.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"A DuckDB-Backed Version of dplyr","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Anti join — anti_join.duckplyr_df","title":"Anti join — anti_join.duckplyr_df","text":"method dplyr::anti_join() generic. anti_join() returns rows x without match y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anti join — anti_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' anti_join(x, y, by = NULL, copy = FALSE, ..., na_matches = c(\"na\", \"never\"))"},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anti join — anti_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . ... parameters passed onto methods. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/anti_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anti join — anti_join.duckplyr_df","text":"","code":"library(duckplyr) band_members %>% anti_join(band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 1 × 2 #>   name  band   #>   <chr> <chr>  #> 1 Mick  Stones"},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Order rows using column values — arrange.duckplyr_df","title":"Order rows using column values — arrange.duckplyr_df","text":"method dplyr::arrange() generic. See \"Fallbacks\" section differences implementation. arrange() orders rows data frame values selected columns. Unlike dplyr verbs, arrange() largely ignores grouping; need explicitly mention grouping variables (use  .by_group = TRUE) order group , functions variables evaluated per data frame, per group.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order rows using column values — arrange.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' arrange(.data, ..., .by_group = FALSE, .locale = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order rows using column values — arrange.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Variables, functions variables. Use desc() sort variable descending order. .by_group TRUE, sort first grouping variable. Applies grouped data frames . .locale locale sort character vectors . NULL, default, uses \"C\" locale unless dplyr.legacy_locale global option escape hatch active. See dplyr-locale help page details. single string stringi::stri_locale_list() supplied, used locale sort . example, \"en\" sort American English locale. requires stringi package. \"C\" supplied, character vectors always sorted C locale. require stringi often much faster supplying locale identifier. C locale English locales, \"en\", particularly comes data containing mix upper lower case letters. explained detail locale help page Default locale section.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Order rows using column values — arrange.duckplyr_df","text":"DuckDB translation arrange.duckplyr_df() .by_group = TRUE, providing value .locale argument, providing value dplyr.legacy_locale option. features fall back dplyr::arrange(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/arrange.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order rows using column values — arrange.duckplyr_df","text":"","code":"library(duckplyr) arrange(mtcars, cyl, disp) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #>                     carb #> Toyota Corolla         1 #> Honda Civic            2 #> Fiat 128               1 #> Fiat X1-9              1 #> Lotus Europa           2 #> Datsun 710             1 #> Toyota Corona          1 #> Porsche 914-2          2 #> Volvo 142E             2 #> Merc 230               2 #> Merc 240D              2 #> Ferrari Dino           6 #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Merc 280               4 #> Merc 280C              4 #> Valiant                1 #> Hornet 4 Drive         1 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Maserati Bora          8 #> AMC Javelin            2 #> Dodge Challenger       2 #> Camaro Z28             4 #> Ford Pantera L         4 #> Hornet Sportabout      2 #> Duster 360             4 #> Pontiac Firebird       2 #> Chrysler Imperial      4 #> Lincoln Continental    4 #> Cadillac Fleetwood     4 arrange(mtcars, desc(disp)) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #>                     carb #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Pontiac Firebird       2 #> Hornet Sportabout      2 #> Duster 360             4 #> Ford Pantera L         4 #> Camaro Z28             4 #> Dodge Challenger       2 #> AMC Javelin            2 #> Maserati Bora          8 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Hornet 4 Drive         1 #> Valiant                1 #> Merc 280               4 #> Merc 280C              4 #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Merc 240D              2 #> Ferrari Dino           6 #> Merc 230               2 #> Volvo 142E             2 #> Porsche 914-2          2 #> Toyota Corona          1 #> Datsun 710             1 #> Lotus Europa           2 #> Fiat X1-9              1 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a duckplyr data frame — as_duckplyr_df","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"functions convert data-frame-like input object class \"duckpylr_df\". objects, dplyr verbs dplyr::mutate(), dplyr::select() dplyr::filter()  attempt use DuckDB. possible, original dplyr implementation used. as_duckplyr_df() requires input plain data frame tibble, fail classes, including subclasses \"data.frame\" \"tbl_df\". behavior likely change, rely . as_duckplyr_tibble() converts input tibble duckplyr data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"","code":"as_duckplyr_df(.data)  as_duckplyr_tibble(.data)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":".data data frame tibble transform","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"as_duckplyr_df(), object class \"duckplyr_df\", inheriting classes .data argument. as_duckplyr_tibble(), object class c(\"duckplyr_df\", class(tibble())) .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"Set DUCKPLYR_FALLBACK_INFO DUCKPLYR_FORCE environment variables control behavior, see config details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a duckplyr data frame — as_duckplyr_df","text":"","code":"tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a duckplyr frame to a dbplyr table — as_tbl","title":"Convert a duckplyr frame to a dbplyr table — as_tbl","text":"function converts lazy duckplyr frame data frame dbplyr table duckplyr's internal connection. allows using dbplyr functions data, including hand-written SQL queries. Use as_duckdb_tibble() convert back lazy duckplyr frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a duckplyr frame to a dbplyr table — as_tbl","text":"","code":"as_tbl(.data)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a duckplyr frame to a dbplyr table — as_tbl","text":".data lazy duckplyr frame data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a duckplyr frame to a dbplyr table — as_tbl","text":"dbplyr table.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/as_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a duckplyr frame to a dbplyr table — as_tbl","text":"","code":"df <- duckdb_tibble(a = 1L) df #> # A duckplyr data frame: 1 variable #>       a #>   <int> #> 1     1  tbl <- as_tbl(df) tbl #> # Source:   table<as_tbl_duckplyr_SwlKLUUEdL> [?? x 1] #> # Database: DuckDB v1.2.1 [unknown@Linux 6.8.0-1021-azure:R 4.4.3//tmp/RtmpLX3QWG/duckplyr/duckplyr2ab85e694173.duckdb] #>       a #>   <int> #> 1     1  tbl %>%   mutate(b = sql(\"a + 1\")) %>%   as_duckdb_tibble() #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <int> #> 1     1     2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/collect.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Force conversion to a data frame — collect.duckplyr_df","title":"Force conversion to a data frame — collect.duckplyr_df","text":"method dplyr::collect() generic. collect() converts input tibble, materializing lazy operations.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/collect.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force conversion to a data frame — collect.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' collect(x, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/collect.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force conversion to a data frame — collect.duckplyr_df","text":"x data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... Arguments passed methods","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/collect.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force conversion to a data frame — collect.duckplyr_df","text":"","code":"library(duckplyr) df <- duckdb_tibble(x = c(1, 2), .lazy = TRUE) df #> # A duckplyr data frame: 2 variables #>       x .lazy #>   <dbl> <lgl> #> 1     1 TRUE  #> 2     2 TRUE  try(print(df$x)) #> [1] 1 2 df <- collect(df) df #> # A tibble: 2 × 2 #>       x .lazy #>   <dbl> <lgl> #> 1     1 TRUE  #> 2     2 TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute results — compute.duckplyr_df","title":"Compute results — compute.duckplyr_df","text":"method dplyr::compute() generic. duckplyr frame, compute() executes query stores (temporary) table, Parquet CSV file. result duckplyr frame can used subsequent dplyr verbs.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute results — compute.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' compute(   x,   ...,   prudence = NULL,   name = NULL,   schema_name = NULL,   temporary = TRUE )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute results — compute.duckplyr_df","text":"x duckplyr frame. ... Arguments passed methods prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"lavish\": regardless size, \"stingy\": never, \"thrifty\": maximum size 1 million cells. default inherit input. argument provided convenience. effect can achieved forwarding output as_duckdb_tibble() desired prudence. See vignette(\"prudence\") information. name name table store result . schema_name schema store result , defaults current schema. temporary Set FALSE store result permanent table.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute.duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute results — compute.duckplyr_df","text":"duckplyr frame.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute results — compute.duckplyr_df","text":"","code":"library(duckplyr) df <- duckdb_tibble(x = c(1, 2)) df <- mutate(df, y = 2) explain(df) #> ┌───────────────────────────┐ #> │         PROJECTION        │ #> │    ────────────────────   │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~2 Rows          │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │     R_DATAFRAME_SCAN      │ #> │    ────────────────────   │ #> │      Text: data.frame     │ #> │       Projections: x      │ #> │                           │ #> │          ~2 Rows          │ #> └───────────────────────────┘ df <- compute(df) explain(df) #> ┌───────────────────────────┐ #> │         SEQ_SCAN          │ #> │    ────────────────────   │ #> │           Table:          │ #> │    duckplyr_ieexomb92Q    │ #> │                           │ #> │   Type: Sequential Scan   │ #> │                           │ #> │        Projections:       │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~2 Rows          │ #> └───────────────────────────┘"},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute results to a CSV file — compute_csv","title":"Compute results to a CSV file — compute_csv","text":"duckplyr frame, function executes query stores results CSV file, without converting R data frame. result duckplyr frame can used subsequent dplyr verbs. function can also used CSV writer regular data frames.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute results to a CSV file — compute_csv","text":"","code":"compute_csv(x, path, ..., prudence = NULL, options = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute results to a CSV file — compute_csv","text":"x duckplyr frame. path path Parquet file create. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"lavish\": regardless size, \"stingy\": never, \"thrifty\": maximum size 1 million cells. default inherit input. argument provided convenience. effect can achieved forwarding output as_duckdb_tibble() desired prudence. See vignette(\"prudence\") information. options list additional options pass create storage format, see https://duckdb.org/docs/sql/statements/copy.html#csv-options details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute results to a CSV file — compute_csv","text":"duckplyr frame.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute results to a CSV file — compute_csv","text":"","code":"library(duckplyr) df <- data.frame(x = c(1, 2)) df <- mutate(df, y = 2) path <- tempfile(fileext = \".csv\") df <- compute_csv(df, path) readLines(path) #> [1] \"x,y\"     \"1.0,2.0\" \"2.0,2.0\""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute results to a Parquet file — compute_parquet","title":"Compute results to a Parquet file — compute_parquet","text":"duckplyr frame, function executes query stores results Parquet file, without converting R data frame. result duckplyr frame can used subsequent dplyr verbs. function can also used Parquet writer regular data frames.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute results to a Parquet file — compute_parquet","text":"","code":"compute_parquet(x, path, ..., prudence = NULL, options = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute results to a Parquet file — compute_parquet","text":"x duckplyr frame. path path Parquet file create. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"lavish\": regardless size, \"stingy\": never, \"thrifty\": maximum size 1 million cells. default inherit input. argument provided convenience. effect can achieved forwarding output as_duckdb_tibble() desired prudence. See vignette(\"prudence\") information. options list additional options pass create Parquet file, see https://duckdb.org/docs/sql/statements/copy.html#parquet-options details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute results to a Parquet file — compute_parquet","text":"duckplyr frame.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/compute_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute results to a Parquet file — compute_parquet","text":"","code":"library(duckplyr) df <- data.frame(x = c(1, 2)) df <- mutate(df, y = 2) path <- tempfile(fileext = \".parquet\") df <- compute_parquet(df, path) explain(df) #> ┌───────────────────────────┐ #> │       READ_PARQUET        │ #> │    ────────────────────   │ #> │         Function:         │ #> │        READ_PARQUET       │ #> │                           │ #> │        Projections:       │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~2 Rows          │ #> └───────────────────────────┘"},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration options — config","title":"Configuration options — config","text":"behavior duckplyr can fine-tuned several environment variables, one option.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":"environment-variables","dir":"Reference","previous_headings":"","what":"Environment variables","title":"Configuration options — config","text":"DUCKPLYR_TEMP_DIR: Set path temporary files can created. default, tempdir() used. DUCKPLYR_OUTPUT_ORDER: TRUE, row output order preserved. default may change row order dplyr keep stable. Preserving order leads complicated execution plans less potential optimization, thus may slower. DUCKPLYR_FORCE: TRUE, fail duckdb handle request. DUCKPLYR_CHECK_ROUNDTRIP: TRUE, check columns roundtripped perfectly creating relational object data frame, slow, mostly useful debugging. default check roundtrip attributes. DUCKPLYR_EXPERIMENTAL: TRUE, pass experimental = TRUE certain duckdb functions. Currently unused. DUCKPLYR_METHODS_OVERWRITE: TRUE, call methods_overwrite() package loaded. See fallback options related printing, logging, uploading fallback events.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configuration options — config","text":"","code":"# Sys.setenv(DUCKPLYR_OUTPUT_ORDER = TRUE) data.frame(a = 3:1) %>%   as_duckdb_tibble() %>%   inner_join(data.frame(a = 1:4), by = \"a\") #> # A duckplyr data frame: 1 variable #>       a #>   <int> #> 1     1 #> 2     2 #> 3     3  withr::with_envvar(c(DUCKPLYR_OUTPUT_ORDER = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckdb_tibble() %>%     inner_join(data.frame(a = 1:4), by = \"a\") }) #> # A duckplyr data frame: 1 variable #>       a #>   <int> #> 1     3 #> 2     2 #> 3     1  # Sys.setenv(DUCKPLYR_FORCE = TRUE) add_one <- function(x) {   x + 1 }  data.frame(a = 3:1) %>%   as_duckdb_tibble() %>%   mutate(b = add_one(a)) #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <dbl> #> 1     3     4 #> 2     2     3 #> 3     1     2  try(withr::with_envvar(c(DUCKPLYR_FORCE = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckdb_tibble() %>%     mutate(b = add_one(a)) })) #> Error in mutate(., b = add_one(a)) :  #>   Can't translate function `add_one()`.  # Sys.setenv(DUCKPLYR_FALLBACK_INFO = TRUE) withr::with_envvar(c(DUCKPLYR_FALLBACK_INFO = \"TRUE\"), {   data.frame(a = 3:1) %>%     as_duckdb_tibble() %>%     mutate(b = add_one(a)) }) #> Error processing duckplyr query with DuckDB, falling back to dplyr. #> Caused by error in `mutate()`: #> ! Can't translate function `add_one()`. #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <dbl> #> 1     3     4 #> 2     2     3 #> 3     1     2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the observations in each group — count.duckplyr_df","title":"Count the observations in each group — count.duckplyr_df","text":"method dplyr::count() generic. See \"Fallbacks\" section differences implementation. count() lets quickly count unique values one variables: df %>% count(, b) roughly equivalent df %>% group_by(, b) %>% summarise(n = n()). count() paired tally(), lower-level helper equivalent df %>% summarise(n = n()). Supply wt perform weighted counts, switching summary n = n() n = sum(wt).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the observations in each group — count.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' count(   x,   ...,   wt = NULL,   sort = FALSE,   name = NULL,   .drop = group_by_drop_default(x) )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the observations in each group — count.duckplyr_df","text":"x data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). ... <data-masking> Variables group . wt <data-masking> Frequency weights. Can NULL variable: NULL (default), counts number rows group. variable, computes sum(wt) group. sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, use nn. column called n nn, 'll use nnn, , adding ns gets new name. .drop Handling factor levels appear data, passed group_by(). count(): FALSE include counts empty groups (.e. levels factors exist data). add_count(): deprecated since actually affect output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Count the observations in each group — count.duckplyr_df","text":"DuckDB translation count.duckplyr_df() complex expressions ..., .drop = FALSE, sort = TRUE. features fall back dplyr::count(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/count.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the observations in each group — count.duckplyr_df","text":"","code":"library(duckplyr) count(mtcars, am) #>   am  n #> 1  0 19 #> 2  1 13"},{"path":"https://duckplyr.tidyverse.org/dev/reference/db_exec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a statement for the default connection — db_exec","title":"Execute a statement for the default connection — db_exec","text":"duckplyr package relies DBI connection -memory database. db_exec() function allows running SQL statements side effects connection. can used execute statements start PRAGMA, SET, ATTACH , e.g., set credentials, change configuration options, attach databases. See https://duckdb.org/docs/configuration/overview.html information configuration options, https://duckdb.org/docs/sql/statements/attach.html attaching databases.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/db_exec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a statement for the default connection — db_exec","text":"","code":"db_exec(sql, ..., con = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/db_exec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a statement for the default connection — db_exec","text":"sql statement run. ... dots future extensions must empty. con connection, defaults default connection.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/db_exec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a statement for the default connection — db_exec","text":"return value DBI::dbExecute() call, invisibly.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/db_exec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a statement for the default connection — db_exec","text":"","code":"db_exec(\"SET threads TO 2\")"},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Parquet, CSV, and other files using DuckDB — df_from_file","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"df_from_file() uses arbitrary table functions read data. See https://duckdb.org/docs/data/overview documentation available functions options. read multiple files schema, pass wildcard character vector path argument, duckplyr_df_from_file() thin wrapper around df_from_file() calls as_duckplyr_df() output. functions ingest data file using table function. results transparently converted data frame, data read resulting data frame actually accessed. df_from_csv() reads CSV file using read_csv_auto() table function. duckplyr_df_from_csv() thin wrapper around df_from_csv() calls as_duckplyr_df() output. df_from_parquet() reads Parquet file using read_parquet() table function. duckplyr_df_from_parquet() thin wrapper around df_from_parquet() calls as_duckplyr_df() output. df_to_parquet() writes data frame Parquet file via DuckDB. data frame duckplyr_df, materialization occurs outside R. existing file overwritten. function requires duckdb >= 0.10.0.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"","code":"df_from_file(path, table_function, ..., options = list(), class = NULL)  duckplyr_df_from_file(   path,   table_function,   ...,   options = list(),   class = NULL )  df_from_csv(path, ..., options = list(), class = NULL)  duckplyr_df_from_csv(path, ..., options = list(), class = NULL)  df_from_parquet(path, ..., options = list(), class = NULL)  duckplyr_df_from_parquet(path, ..., options = list(), class = NULL)  df_to_parquet(data, path)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"path Path files, glob patterns * ? supported. table_function name table-valued DuckDB function \"read_parquet\", \"read_csv\", \"read_csv_auto\" \"read_json\". ... dots future extensions must empty. options Arguments DuckDB function indicated table_function. class class output. default, tibble created. returned object always data frame. Use class = \"data.frame\" class = character() create plain data frame. data data frame written disk.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"data frame df_from_file(), duckplyr_df duckplyr_df_from_file(), extended provided class.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/df_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Parquet, CSV, and other files using DuckDB — df_from_file","text":"","code":"# Create simple CSV file path <- tempfile(\"duckplyr_test_\", fileext = \".csv\") write.csv(data.frame(a = 1:3, b = letters[4:6]), path, row.names = FALSE)  # Reading is immediate df <- df_from_csv(path) #> Warning: `df_from_csv()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `read_csv_duckdb()` instead.  # Materialization only upon access names(df) #> [1] \"a\" \"b\" df$a #> [1] 1 2 3  # Return as tibble, specify column types: df_from_file(   path,   \"read_csv\",   options = list(delim = \",\", types = list(c(\"DOUBLE\", \"VARCHAR\"))),   class = class(tibble()) ) #> Warning: `df_from_file()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `read_file_duckdb()` instead. #> # A tibble: 3 × 2 #>       a b     #>   <dbl> <chr> #> 1     1 d     #> 2     2 e     #> 3     3 f      # Read multiple file at once path2 <- tempfile(\"duckplyr_test_\", fileext = \".csv\") write.csv(data.frame(a = 4:6, b = letters[7:9]), path2, row.names = FALSE)  duckplyr_df_from_csv(file.path(tempdir(), \"duckplyr_test_*.csv\")) #> Warning: `duckplyr_df_from_csv()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `read_csv_duckdb()` instead. #> # A duckplyr data frame: 2 variables #>       a b     #>   <dbl> <chr> #> 1     4 g     #> 2     5 h     #> 3     6 i     #> 4     1 d     #> 5     2 e     #> 6     3 f      unlink(c(path, path2))  # Write a Parquet file: path_parquet <- tempfile(fileext = \".parquet\") df_to_parquet(df, path_parquet) #> Warning: `df_to_parquet()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `compute_parquet()` instead. #> NULL  # With a duckplyr_df, the materialization occurs outside of R: df %>%   as_duckplyr_df() %>%   mutate(b = a + 1) %>%   df_to_parquet(path_parquet) #> Warning: `as_duckplyr_df()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `as_duckdb_tibble()` instead. #> NULL  duckplyr_df_from_parquet(path_parquet) #> Warning: `duckplyr_df_from_parquet()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `read_parquet_duckdb()` instead. #> # A duckplyr data frame: 2 variables #>       a     b #>   <dbl> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  unlink(path_parquet)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep distinct/unique rows — distinct.duckplyr_df","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"method dplyr::distinct() generic. Keep unique/distinct rows data frame. similar unique.data.frame() considerably faster.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' distinct(.data, ..., .keep_all = FALSE)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Optional variables use determining uniqueness. multiple rows given combination inputs, first row preserved. omitted, use variables data frame. .keep_all TRUE, keep variables .data. combination ... distinct, keeps first row values.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/distinct.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep distinct/unique rows — distinct.duckplyr_df","text":"","code":"df <- duckdb_tibble(   x = sample(10, 100, rep = TRUE),   y = sample(10, 100, rep = TRUE) ) nrow(df) #> [1] 100 nrow(distinct(df)) #> [1] 64"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"duckplyr data frames — duckdb_tibble","title":"duckplyr data frames — duckdb_tibble","text":"Data frames backed duckplyr special class, \"duckplyr_df\", addition default classes. ensures dplyr methods dispatched correctly. objects, dplyr verbs dplyr::mutate(), dplyr::select() dplyr::filter()  use DuckDB. duckdb_tibble() works like tibble::tibble(). as_duckdb_tibble() converts data frame dplyr lazy table duckplyr data frame. generic function can overridden custom classes. is_duckdb_tibble() returns TRUE x duckplyr data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"duckplyr data frames — duckdb_tibble","text":"","code":"duckdb_tibble(..., .prudence = c(\"lavish\", \"thrifty\", \"stingy\"))  as_duckdb_tibble(x, ..., prudence = c(\"lavish\", \"thrifty\", \"stingy\"))  is_duckdb_tibble(x)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"duckplyr data frames — duckdb_tibble","text":"... duckdb_tibble(), passed tibble::tibble(). as_duckdb_tibble(), passed methods. x object convert test. prudence, .prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"lavish\": regardless size, \"stingy\": never, \"thrifty\": maximum size 1 million cells. default \"lavish\" duckdb_tibble() as_duckdb_tibble(), may different functions. See vignette(\"prudence\") information.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"duckplyr data frames — duckdb_tibble","text":"duckdb_tibble() as_duckdb_tibble(), object following classes: \"prudent_duckplyr_df\" prudence \"lavish\" \"duckplyr_df\" Classes tibble::tibble is_duckdb_tibble(), scalar logical.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":"fine-tuning-prudence","dir":"Reference","previous_headings":"","what":"Fine-tuning prudence","title":"duckplyr data frames — duckdb_tibble","text":"prudence argument can also named numeric vector least one cells rows limit cells (values) rows resulting data frame automatic materialization. limits specified, enforced. equivalent \"thrifty\" c(cells = 1e6).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckdb_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"duckplyr data frames — duckdb_tibble","text":"","code":"x <- duckdb_tibble(a = 1) x #> # A duckplyr data frame: 1 variable #>       a #>   <dbl> #> 1     1  library(dplyr) x %>%   mutate(b = 2) #> # A duckplyr data frame: 2 variables #>       a     b #>   <dbl> <dbl> #> 1     1     2  x$a #> [1] 1  y <- duckdb_tibble(a = 1, .prudence = \"stingy\") y #> # A duckplyr data frame: 1 variable #>       a #>   <dbl> #> 1     1 try(length(y$a)) #> Error : Materialization is disabled, use collect() or as_tibble() to materialize. length(collect(y)$a) #> [1] 1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","title":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","text":"drop-replacement 'dplyr', powered 'DuckDB' performance. Offers convenient utilities working -memory larger--memory data retaining full 'dplyr' compatibility.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"duckplyr: A 'DuckDB'-Backed Version of 'dplyr' — duckplyr-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) Authors: Hannes Mühleisen (ORCID) contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a statement for the default connection — duckplyr_execute","title":"Execute a statement for the default connection — duckplyr_execute","text":"duckplyr package relies DBI connection -memory database. duckplyr_execute() function allows running SQL statements connection , e.g., set credentials attach databases. See https://duckdb.org/docs/configuration/overview.html information configuration options.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a statement for the default connection — duckplyr_execute","text":"","code":"duckplyr_execute(sql)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a statement for the default connection — duckplyr_execute","text":"sql statement run.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a statement for the default connection — duckplyr_execute","text":"return value DBI::dbExecute() call, invisibly.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/duckplyr_execute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a statement for the default connection — duckplyr_execute","text":"","code":"duckplyr_execute(\"SET threads TO 2\") #> Warning: `duckplyr_execute()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `db_exec()` instead."},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Explain details of a tbl — explain.duckplyr_df","title":"Explain details of a tbl — explain.duckplyr_df","text":"method dplyr::explain() generic. generic function gives details object print(), focused human readable output str().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explain details of a tbl — explain.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' explain(x, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explain details of a tbl — explain.duckplyr_df","text":"x object explain ... parameters possibly used generic","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explain details of a tbl — explain.duckplyr_df","text":"input, invisibly.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/explain.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explain details of a tbl — explain.duckplyr_df","text":"","code":"library(duckplyr) df <- duckdb_tibble(x = c(1, 2)) df <- mutate(df, y = 2) explain(df) #> ┌───────────────────────────┐ #> │         PROJECTION        │ #> │    ────────────────────   │ #> │             x             │ #> │             y             │ #> │                           │ #> │          ~2 Rows          │ #> └─────────────┬─────────────┘ #> ┌─────────────┴─────────────┐ #> │     R_DATAFRAME_SCAN      │ #> │    ────────────────────   │ #> │      Text: data.frame     │ #> │       Projections: x      │ #> │                           │ #> │          ~2 Rows          │ #> └───────────────────────────┘"},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":null,"dir":"Reference","previous_headings":"","what":"Fallback to dplyr — fallback","title":"Fallback to dplyr — fallback","text":"duckplyr package aims providing fully compatible drop-replacement dplyr. achieve , carefully selected subset dplyr's operations, R functions, R data types implemented. Whenever request handled DuckDB, duckplyr falls back dplyr. See vignette(\"fallback\")` details. assist future development, fallback situations can logged console local file uploaded analysis. default, duckplyr log upload anything. functions environment variables page control process. fallback_sitrep() prints current settings fallback printing, logging, uploading, number reports ready upload, location logs. fallback_config() configures current settings fallback printing, logging, uploading. settings affect computation results can configured, design. configuration stored file tools::R_user_dir(\"duckplyr\", \"config\") . duckplyr package loaded, configuration read file, corresponding environment variables set. fallback_review() prints available reports review console. fallback_upload() uploads available reports central server analysis. server hosted AWS reports stored private S3 bucket. authorized personnel access reports. fallback_purge() deletes available reports.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fallback to dplyr — fallback","text":"","code":"fallback_sitrep()  fallback_config(   ...,   reset_all = FALSE,   info = NULL,   logging = NULL,   autoupload = NULL,   log_dir = NULL,   verbose = NULL )  fallback_review(oldest = NULL, newest = NULL, detail = TRUE)  fallback_upload(oldest = NULL, newest = NULL, strict = TRUE)  fallback_purge(oldest = NULL, newest = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fallback to dplyr — fallback","text":"... dots future extensions must empty. reset_all Set TRUE reset settings defaults. R session must restarted changes take effect. info Set TRUE enable fallback printing. logging Set FALSE disable fallback logging, set TRUE explicitly enable . autoupload Set TRUE enable automatic fallback uploading, set FALSE disable . log_dir Set location logs file system. directory created exist. verbose Set TRUE enable verbose logging. oldest, newest number oldest newest reports review. specified, reports dispayed. detail Print full content reports. Set FALSE print file names. strict TRUE, function aborts reports fail upload. FALSE, message printed.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fallback to dplyr — fallback","text":"Logging default, can turned . Uploading opt-. following environment variables control logging uploading: DUCKPLYR_FALLBACK_INFO controls human-friendly alerts fallback events. TRUE, message printed fallback dplyr occurs DuckDB handle request. messages never logged. DUCKPLYR_FALLBACK_COLLECT controls logging, set 1 greater enable logging. value 0, logging disabled. Future versions duckplyr may start logging additional data thus require higher value enable logging. Set 99 enable logging future versions. Use usethis::edit_r_environ() edit environment file. DUCKPLYR_FALLBACK_AUTOUPLOAD controls uploading, set 1 greater enable uploading. value 0, uploading disabled. Currently, uploading active value 1 greater. Future versions duckplyr may start logging additional data thus require higher value enable uploading. Set 99 enable uploading future versions. Use usethis::edit_r_environ() edit environment file. DUCKPLYR_FALLBACK_LOG_DIR controls location logs. must point directory (existing ) logs written. default, logs written directory user's cache directory returned tools::R_user_dir(\"duckplyr\", \"cache\"). DUCKPLYR_FALLBACK_VERBOSE controls printing log data, set TRUE FALSE enable disable printing. value TRUE, message printed console fallback situation. setting relevant logging enabled, mostly useful duckplyr's internal tests. code related fallback logging uploading fallback.R telemetry.R files.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/fallback.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fallback to dplyr — fallback","text":"","code":"fallback_sitrep() #> The duckplyr package is configured to fall back to dplyr when it #> encounters an incompatibility. Fallback events can be collected and #> uploaded for analysis to guide future development. By default, data #> will be collected but no data will be uploaded. #> ✖ Fallback printing is disabled. #> ✔ Fallback logging is enabled. #> ℹ Fallback logging is not controlled, see `?duckplyr::fallback()`. #> ℹ Logs are written to /home/runner/.cache/R/duckplyr/telemetry. #> ✖ Automatic fallback uploading is disabled. #> ✔ Number of reports ready for upload: 1. #> → Review with `duckplyr::fallback_review()`, upload with #>   `duckplyr::fallback_upload()`. #> ℹ See `?duckplyr::fallback_config()` for details."},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep rows that match a condition — filter.duckplyr_df","title":"Keep rows that match a condition — filter.duckplyr_df","text":"method dplyr::filter() generic. See \"Fallbacks\" section differences implementation. filter() function used subset data frame, retaining rows satisfy conditions. retained, row must produce value TRUE conditions. Note condition evaluates NA row dropped, unlike base subsetting [.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep rows that match a condition — filter.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' filter(.data, ..., .by = NULL, .preserve = FALSE)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep rows that match a condition — filter.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Expressions return logical value, defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Keep rows that match a condition — filter.duckplyr_df","text":"DuckDB translation filter.duckplyr_df() filter conditions, grouped operation (.set). features fall back dplyr::filter(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/filter.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep rows that match a condition — filter.duckplyr_df","text":"","code":"df <- duckdb_tibble(x = 1:3, y = 3:1) filter(df, x >= 2) #> # A duckplyr data frame: 2 variables #>       x     y #>   <int> <int> #> 1     2     2 #> 2     3     1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/flights_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Flight data — flights_df","title":"Flight data — flights_df","text":"Provides variant nycflights13::flights compatible duckplyr, tibble: timezone set UTC work around current limitation duckplyr, see vignette(\"limits\"). Call as_duckdb_tibble() enable duckplyr operations.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/flights_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flight data — flights_df","text":"","code":"flights_df()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/flights_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flight data — flights_df","text":"","code":"flights_df() #> # A tibble: 336,776 × 19 #>     year month   day dep_time sched_dep_time dep_delay arr_time #>    <int> <int> <int>    <int>          <int>     <dbl>    <int> #>  1  2013     1     1      517            515         2      830 #>  2  2013     1     1      533            529         4      850 #>  3  2013     1     1      542            540         2      923 #>  4  2013     1     1      544            545        -1     1004 #>  5  2013     1     1      554            600        -6      812 #>  6  2013     1     1      554            558        -4      740 #>  7  2013     1     1      555            600        -5      913 #>  8  2013     1     1      557            600        -3      709 #>  9  2013     1     1      557            600        -3      838 #> 10  2013     1     1      558            600        -2      753 #> # ℹ 336,766 more rows #> # ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, #> #   carrier <chr>, flight <int>, tailnum <chr>, origin <chr>, #> #   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, #> #   minute <dbl>, time_hour <dttm>"},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Full join — full_join.duckplyr_df","title":"Full join — full_join.duckplyr_df","text":"method dplyr::full_join() generic. See \"Fallbacks\" section differences implementation. full_join() keeps observations x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full join — full_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' full_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full join — full_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Full join — full_join.duckplyr_df","text":"DuckDB translation full_join.duckplyr_df() implicit cross join, value multiple argument default \"\". features fall back dplyr::full_join(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/full_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full join — full_join.duckplyr_df","text":"","code":"library(duckplyr) full_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 4 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Mick  Stones  NA     #> 4 Keith NA      guitar"},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the First Parts of an Object — head.duckplyr_df","title":"Return the First Parts of an Object — head.duckplyr_df","text":"method head() generic. See \"Fallbacks\" section differences implementation. Return first rows data.frame","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the First Parts of an Object — head.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' head(x, n = 6L, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the First Parts of an Object — head.duckplyr_df","text":"x data.frame n positive integer, many rows return. ... used yet.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Return the First Parts of an Object — head.duckplyr_df","text":"DuckDB translation head.duckplyr_df() negative n. features fall back head(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/head.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the First Parts of an Object — head.duckplyr_df","text":"","code":"head(mtcars, 2) #>               mpg cyl disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner join — inner_join.duckplyr_df","title":"Inner join — inner_join.duckplyr_df","text":"method dplyr::inner_join() generic. See \"Fallbacks\" section differences implementation. inner_join() keeps observations x matching key y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner join — inner_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' inner_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner join — inner_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Inner join — inner_join.duckplyr_df","text":"DuckDB translation inner_join.duckplyr_df() implicit crossjoin, value multiple argument default \"\". value unmatched argument default \"drop\". features fall back dplyr::inner_join(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/inner_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner join — inner_join.duckplyr_df","text":"","code":"library(duckplyr) inner_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 2 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass"},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect — intersect.duckplyr_df","title":"Intersect — intersect.duckplyr_df","text":"method dplyr::intersect() generic. See \"Fallbacks\" section differences implementation. intersect(x, y) finds rows x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect — intersect.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' intersect(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect — intersect.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Intersect — intersect.duckplyr_df","text":"DuckDB translation intersect.duckplyr_df() column names duplicated one tables, column names different tables. features fall back dplyr::intersect(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/intersect.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersect — intersect.duckplyr_df","text":"","code":"df1 <- duckdb_tibble(x = 1:3) df2 <- duckdb_tibble(x = 3:5) intersect(df1, df2) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     3"},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Class predicate for duckplyr data frames — is_duckplyr_df","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"Tests input object class \"duckplyr_df\".","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"","code":"is_duckplyr_df(.data)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":".data object test","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"TRUE input object class \"duckplyr_df\", otherwise FALSE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/is_duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class predicate for duckplyr data frames — is_duckplyr_df","text":"","code":"tibble(a = 1:3) %>%   is_duckplyr_df() #> Warning: `is_duckplyr_df()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `is_duckdb_tibble()` instead. #> [1] FALSE  tibble(a = 1:3) %>%   as_duckplyr_df() %>%   is_duckplyr_df() #> [1] TRUE"},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve details about the most recent computation — last_rel","title":"Retrieve details about the most recent computation — last_rel","text":"result computed, specified \"relation\" object. function retrieves object last computation led materialization data frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve details about the most recent computation — last_rel","text":"","code":"last_rel()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/last_rel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve details about the most recent computation — last_rel","text":"duckdb \"relation\" object, NULL computation performed yet.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Left join — left_join.duckplyr_df","title":"Left join — left_join.duckplyr_df","text":"method dplyr::left_join() generic. See \"Fallbacks\" section differences implementation. left_join() keeps observations x.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left join — left_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' left_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left join — left_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Left join — left_join.duckplyr_df","text":"DuckDB translation left_join.duckplyr_df() implicit cross join, value multiple argument default \"\". value unmatched argument default \"drop\". features fall back dplyr::left_join(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/left_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left join — left_join.duckplyr_df","text":"","code":"library(duckplyr) left_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 3 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Mick  Stones  NA"},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward all dplyr methods to duckplyr — methods_overwrite","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"calling methods_overwrite(), dplyr methods redirected duckplyr duraton session, call methods_restore(). methods_overwrite() function called automatically package loaded environment variable DUCKPLYR_METHODS_OVERWRITE set TRUE.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"","code":"methods_overwrite()  methods_restore()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"Called side effects.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/methods_overwrite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward all dplyr methods to duckplyr — methods_overwrite","text":"","code":"tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  methods_overwrite() #> ✔ Overwriting dplyr methods with duckplyr methods. #> ℹ Turn off with `duckplyr::methods_restore()`.  tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  methods_restore() #> ℹ Restoring dplyr methods.  tibble(a = 1:3) %>%   mutate(b = a + 1) #> # A tibble: 3 × 2 #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — mutate.duckplyr_df","title":"Create, modify, and delete columns — mutate.duckplyr_df","text":"method dplyr::mutate() generic. mutate() creates new columns functions existing variables. can also modify (name existing column) delete columns (setting value NULL).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — mutate.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' mutate(   .data,   ...,   .by = NULL,   .keep = c(\"all\", \"used\", \"unused\", \"none\"),   .before = NULL,   .after = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — mutate.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .keep Control columns .data retained output. Grouping columns columns created ... always kept. \"\" retains columns .data. default. \"used\" retains columns used ... create new columns. useful checking work, displays inputs outputs side--side. \"unused\" retains columns used ... create new columns. useful generate new columns, longer need columns used generate . \"none\" retain extra columns .data. grouping variables columns created ... kept. ., .<tidy-select> Optionally, control new columns appear (default add right hand side). See relocate() details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/mutate.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — mutate.duckplyr_df","text":"","code":"library(duckplyr) df <- data.frame(x = c(1, 2)) df <- mutate(df, y = 2) df #>   x y #> 1 1 2 #> 2 2 2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational implementer's interface — new_relational","title":"Relational implementer's interface — new_relational","text":"constructor generics described define class helps separating dplyr's user interface actual underlying operations. longer term, help packages implement dplyr interface (dbplyr, dtplyr, arrow similar) focus core details functionality, rather intricacies dplyr's user interface. new_relational() constructs object class \"relational\". Users encouraged provide class argument. typical use case create wrapper function. rel_to_df() extracts data frame representation relational object, used dplyr::collect(). rel_filter() keeps rows match predicate, used dplyr::filter(). rel_project() selects columns creates new columns, used dplyr::select(), dplyr::rename(), dplyr::mutate(), dplyr::relocate(), others. rel_aggregate() combines several rows one, used dplyr::summarize(). rel_order() reorders rows columns expressions, used dplyr::arrange(). rel_join() joins merges two tables, used dplyr::left_join(), dplyr::right_join(), dplyr::inner_join(), dplyr::full_join(), dplyr::cross_join(), dplyr::semi_join(), dplyr::anti_join(). rel_limit() limits number rows table, used utils::head(). rel_distinct() keeps distinct rows table, used dplyr::distinct(). rel_set_intersect() returns rows present tables, used generics::intersect(). rel_set_diff() returns rows present tables, used generics::setdiff(). rel_set_symdiff() returns rows present tables, used dplyr::symdiff(). rel_union_all() returns rows present tables, used dplyr::union_all(). rel_explain() prints explanation plan executed relational object. rel_alias() returns alias name relational object. rel_set_alias() sets alias name relational object. rel_names() returns column names character vector, used colnames().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational implementer's interface — new_relational","text":"","code":"new_relational(..., class = NULL)  rel_to_df(rel, ...)  rel_filter(rel, exprs, ...)  rel_project(rel, exprs, ...)  rel_aggregate(rel, groups, aggregates, ...)  rel_order(rel, orders, ascending, ...)  rel_join(   left,   right,   conds,   join = c(\"inner\", \"left\", \"right\", \"outer\", \"cross\", \"semi\", \"anti\"),   join_ref_type = c(\"regular\", \"natural\", \"cross\", \"positional\", \"asof\"),   ... )  rel_limit(rel, n, ...)  rel_distinct(rel, ...)  rel_set_intersect(rel_a, rel_b, ...)  rel_set_diff(rel_a, rel_b, ...)  rel_set_symdiff(rel_a, rel_b, ...)  rel_union_all(rel_a, rel_b, ...)  rel_explain(rel, ...)  rel_alias(rel, ...)  rel_set_alias(rel, alias, ...)  rel_names(rel, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational implementer's interface — new_relational","text":"... Reserved future extensions, must empty. class Classes added front \"relational\" base class. rel, rel_a, rel_b, left, right relational object. exprs list \"relational_relexpr\" objects filter , created new_relexpr(). groups list expressions group . aggregates list expressions aggregates compute. orders list expressions order . ascending logical vector describing sort order. conds list expressions use join. join type join. join_ref_type ref type join. n number rows. alias new alias","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational implementer's interface — new_relational","text":"new_relational() returns new relational object. rel_to_df() returns data frame. rel_names() returns character vector. generics return modified relational object.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relational.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational implementer's interface — new_relational","text":"","code":"new_dfrel <- function(x) {   stopifnot(is.data.frame(x))   new_relational(list(x), class = \"dfrel\") } mtcars_rel <- new_dfrel(mtcars[1:5, 1:4])  rel_to_df.dfrel <- function(rel, ...) {   unclass(rel)[[1]] } rel_to_df(mtcars_rel) #>                    mpg cyl disp  hp #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Datsun 710        22.8   4  108  93 #> Hornet 4 Drive    21.4   6  258 110 #> Hornet Sportabout 18.7   8  360 175  rel_filter.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the predicates defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, nrow(df))), ]) }  rel_filter(   mtcars_rel,   list(     relexpr_function(       \"gt\",       list(relexpr_reference(\"cyl\"), relexpr_constant(\"6\"))     )   ) ) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_project.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[seq_len(min(3, ncol(df)))]) }  rel_project(   mtcars_rel,   list(relexpr_reference(\"cyl\"), relexpr_reference(\"disp\")) ) #> [[1]] #>                    mpg cyl disp #> Mazda RX4         21.0   6  160 #> Mazda RX4 Wag     21.0   6  160 #> Datsun 710        22.8   4  108 #> Hornet 4 Drive    21.4   6  258 #> Hornet Sportabout 18.7   8  360 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_order.dfrel <- function(rel, exprs, ...) {   df <- unclass(rel)[[1]]    # A real implementation would evaluate the expressions defined   # by the exprs argument   new_dfrel(df[order(df[[1]]), ]) }  rel_order(   mtcars_rel,   list(relexpr_reference(\"mpg\")) ) #> [[1]] #>                    mpg cyl disp  hp #> Hornet Sportabout 18.7   8  360 175 #> Mazda RX4         21.0   6  160 110 #> Mazda RX4 Wag     21.0   6  160 110 #> Hornet 4 Drive    21.4   6  258 110 #> Datsun 710        22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\" rel_join.dfrel <- function(left, right, conds, join, ...) {   left_df <- unclass(left)[[1]]   right_df <- unclass(right)[[1]]    # A real implementation would evaluate the expressions   # defined by the conds argument,   # use different join types based on the join argument,   # and implement the join itself instead of relaying to left_join().   new_dfrel(dplyr::left_join(left_df, right_df)) }  rel_join(new_dfrel(data.frame(mpg = 21)), mtcars_rel) #> Joining with `by = join_by(mpg)` #> [[1]] #>   mpg cyl disp  hp #> 1  21   6  160 110 #> 2  21   6  160 110 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_limit.dfrel <- function(rel, n, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[seq_len(n), ]) }  rel_limit(mtcars_rel, 3) #> [[1]] #>                mpg cyl disp  hp #> Mazda RX4     21.0   6  160 110 #> Mazda RX4 Wag 21.0   6  160 110 #> Datsun 710    22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_distinct.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    new_dfrel(df[!duplicated(df), ]) }  rel_distinct(new_dfrel(mtcars[1:3, 1:4])) #> [[1]] #>             mpg cyl disp  hp #> Mazda RX4  21.0   6  160 110 #> Datsun 710 22.8   4  108  93 #>  #> attr(,\"class\") #> [1] \"dfrel\"      \"relational\"  rel_names.dfrel <- function(rel, ...) {   df <- unclass(rel)[[1]]    names(df) }  rel_names(mtcars_rel) #> [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Relational expressions — new_relexpr","title":"Relational expressions — new_relexpr","text":"functions provide backend-agnostic way construct expression trees built column references, constants, functions. subexpressions expression tree can alias. new_relexpr() constructs object class \"relational_relexpr\". used higher-level constructors, users rarely need call directly. relexpr_reference() constructs reference column. relexpr_constant() wraps constant value. relexpr_function() applies function. arguments function list expression objects. relexpr_comparison() wraps comparison expression. relexpr_window() applies function window, similarly SQL clause. relexpr_set_alias() assigns alias expression.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relational expressions — new_relexpr","text":"","code":"new_relexpr(x, class = NULL)  relexpr_reference(name, rel = NULL, alias = NULL)  relexpr_constant(val, alias = NULL)  relexpr_function(name, args, alias = NULL)  relexpr_comparison(cmp_op, exprs)  relexpr_window(   expr,   partitions,   order_bys = list(),   offset_expr = NULL,   default_expr = NULL,   alias = NULL )  relexpr_set_alias(expr, alias = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relational expressions — new_relexpr","text":"x object. class Classes added front \"relational_relexpr\" base class. name name column function reference. rel name relation reference. alias alias new expression. val value use constant expression. args Function arguments, list expr objects. cmp_op Comparison operator, e.g., \"<\" \"==\". exprs Expressions compare, list expr objects. expr expr object. partitions Partitions, list expr objects. order_bys variables order results (list). offset_expr offset relational expression. default_expr default relational expression.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relational expressions — new_relexpr","text":"object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\" object class \"relational_relexpr\"","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/new_relexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relational expressions — new_relexpr","text":"","code":"relexpr_set_alias(   alias = \"my_predicate\",   relexpr_function(     \"<\",     list(       relexpr_reference(\"my_number\"),       relexpr_constant(42)     )   ) ) #> List of 3 #>  $ name : chr \"<\" #>  $ args :List of 2 #>   ..$ :List of 3 #>   .. ..$ name : chr \"my_number\" #>   .. ..$ rel  : NULL #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_reference\" \"relational_relexpr\" #>   ..$ :List of 2 #>   .. ..$ val  : num 42 #>   .. ..$ alias: NULL #>   .. ..- attr(*, \"class\")= chr [1:2] \"relational_relexpr_constant\" \"relational_relexpr\" #>  $ alias: chr \"my_predicate\" #>  - attr(*, \"class\")= chr [1:2] \"relational_relexpr_function\" \"relational_relexpr\""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a single column — pull.duckplyr_df","title":"Extract a single column — pull.duckplyr_df","text":"method dplyr::pull() generic. See \"Fallbacks\" section differences implementation. pull() similar $. mostly useful looks little nicer pipes, also works remote data frames, can optionally name output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a single column — pull.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' pull(.data, var = -1, name = NULL, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a single column — pull.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. var variable specified : literal variable name positive integer, giving position counting left negative integer, giving position counting right. default returns last column (assumption column created recently). argument taken expression supports quasiquotation (can unquote column names column locations). name optional parameter specifies column used names named vector. Specified similar manner var. ... use methods.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Extract a single column — pull.duckplyr_df","text":"DuckDB translation pull.duckplyr_df() selection returns columns. features fall back dplyr::pull(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/pull.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a single column — pull.duckplyr_df","text":"","code":"library(duckplyr) pull(mtcars, cyl) #>  [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4 pull(mtcars, 1) #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 #> [14] 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 #> [27] 26.0 30.4 15.8 19.7 15.0 21.4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_csv_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Read CSV files using DuckDB — read_csv_duckdb","title":"Read CSV files using DuckDB — read_csv_duckdb","text":"read_csv_duckdb() reads CSV file using DuckDB's read_csv_auto() table function.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_csv_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read CSV files using DuckDB — read_csv_duckdb","text":"","code":"read_csv_duckdb(   path,   ...,   prudence = c(\"thrifty\", \"lavish\", \"stingy\"),   options = list() )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_csv_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read CSV files using DuckDB — read_csv_duckdb","text":"path Path files, glob patterns * ? supported. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"thrifty\": maximum size 1 million cells, \"lavish\": regardless size, \"stingy\": never. default \"thrifty\" ingestion functions, may different functions. See vignette(\"prudence\") information. options Arguments DuckDB read_csv_auto table function.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_csv_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read CSV files using DuckDB — read_csv_duckdb","text":"","code":"# Create simple CSV file path <- tempfile(\"duckplyr_test_\", fileext = \".csv\") write.csv(data.frame(a = 1:3, b = letters[4:6]), path, row.names = FALSE)  # Reading is immediate df <- read_csv_duckdb(path)  # Names are always available names(df) #> [1] \"a\" \"b\"  # Materialization upon access is turned off by default try(print(df$a)) #> [1] 1 2 3  # Materialize explicitly collect(df)$a #> [1] 1 2 3  # Automatic materialization with prudence = \"lavish\" df <- read_csv_duckdb(path, prudence = \"lavish\") df$a #> [1] 1 2 3  # Specify column types read_csv_duckdb(   path,   options = list(delim = \",\", types = list(c(\"DOUBLE\", \"VARCHAR\"))) ) #> # A duckplyr data frame: 2 variables #>       a b     #>   <dbl> <chr> #> 1     1 d     #> 2     2 e     #> 3     3 f"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_file_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Read files using DuckDB — read_file_duckdb","title":"Read files using DuckDB — read_file_duckdb","text":"read_file_duckdb() uses arbitrary readers read data. See https://duckdb.org/docs/data/overview documentation available functions options. read multiple files schema, pass wildcard character vector path argument,","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_file_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read files using DuckDB — read_file_duckdb","text":"","code":"read_file_duckdb(   path,   table_function,   ...,   prudence = c(\"thrifty\", \"lavish\", \"stingy\"),   options = list() )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_file_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read files using DuckDB — read_file_duckdb","text":"path Path files, glob patterns * ? supported. table_function name table-valued DuckDB function \"read_parquet\", \"read_csv\", \"read_csv_auto\" \"read_json\". ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"thrifty\": maximum size 1 million cells, \"lavish\": regardless size, \"stingy\": never. default \"thrifty\" ingestion functions, may different functions. See vignette(\"prudence\") information. options Arguments DuckDB function indicated table_function.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_file_duckdb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read files using DuckDB — read_file_duckdb","text":"duckplyr frame, see as_duckdb_tibble() details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_file_duckdb.html","id":"fine-tuning-prudence","dir":"Reference","previous_headings":"","what":"Fine-tuning prudence","title":"Read files using DuckDB — read_file_duckdb","text":"prudence argument can also named numeric vector least one cells rows limit cells (values) rows resulting data frame automatic materialization. limits specified, enforced. equivalent \"thrifty\" c(cells = 1e6).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_json_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Read JSON files using DuckDB — read_json_duckdb","title":"Read JSON files using DuckDB — read_json_duckdb","text":"read_json_duckdb() reads JSON file using DuckDB's read_json() table function.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_json_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read JSON files using DuckDB — read_json_duckdb","text":"","code":"read_json_duckdb(   path,   ...,   prudence = c(\"thrifty\", \"lavish\", \"stingy\"),   options = list() )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_json_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read JSON files using DuckDB — read_json_duckdb","text":"path Path files, glob patterns * ? supported. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"thrifty\": maximum size 1 million cells, \"lavish\": regardless size, \"stingy\": never. default \"thrifty\" ingestion functions, may different functions. See vignette(\"prudence\") information. options Arguments DuckDB read_json table function.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_json_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read JSON files using DuckDB — read_json_duckdb","text":"","code":"if (FALSE) { # identical(Sys.getenv(\"IN_PKGDOWN\"), \"TRUE\")  # Create and read a simple JSON file path <- tempfile(\"duckplyr_test_\", fileext = \".json\") writeLines('[{\"a\": 1, \"b\": \"x\"}, {\"a\": 2, \"b\": \"y\"}]', path)  # Reading needs the json extension db_exec(\"INSTALL json\") db_exec(\"LOAD json\") read_json_duckdb(path) }"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_parquet_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Parquet files using DuckDB — read_parquet_duckdb","title":"Read Parquet files using DuckDB — read_parquet_duckdb","text":"read_parquet_duckdb() reads Parquet file using DuckDB's read_parquet() table function.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_parquet_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Parquet files using DuckDB — read_parquet_duckdb","text":"","code":"read_parquet_duckdb(   path,   ...,   prudence = c(\"thrifty\", \"lavish\", \"stingy\"),   options = list() )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_parquet_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Parquet files using DuckDB — read_parquet_duckdb","text":"path Path files, glob patterns * ? supported. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"thrifty\": maximum size 1 million cells, \"lavish\": regardless size, \"stingy\": never. default \"thrifty\" ingestion functions, may different functions. See vignette(\"prudence\") information. options Arguments DuckDB read_parquet table function.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_sql_duckdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Return SQL query as duckdb_tibble — read_sql_duckdb","title":"Return SQL query as duckdb_tibble — read_sql_duckdb","text":"Runs query returns duckplyr frame.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_sql_duckdb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return SQL query as duckdb_tibble — read_sql_duckdb","text":"","code":"read_sql_duckdb(   sql,   ...,   prudence = c(\"thrifty\", \"lavish\", \"stingy\"),   con = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_sql_duckdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return SQL query as duckdb_tibble — read_sql_duckdb","text":"sql SQL run. ... dots future extensions must empty. prudence Memory protection, controls DuckDB may convert intermediate results DuckDB-managed memory data frames R memory. \"thrifty\": maximum size 1 million cells, \"lavish\": regardless size, \"stingy\": never. default \"thrifty\" ingestion functions, may different functions. See vignette(\"prudence\") information. con connection, defaults default connection.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_sql_duckdb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return SQL query as duckdb_tibble — read_sql_duckdb","text":"Using data frames calling environment supported yet, see https://github.com/duckdb/duckdb-r/issues/645 details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/read_sql_duckdb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return SQL query as duckdb_tibble — read_sql_duckdb","text":"","code":"read_sql_duckdb(\"FROM duckdb_settings()\") #> # A duckplyr data frame: 5 variables #>    name                              value description input_type scope #>    <chr>                             <chr> <chr>       <chr>      <chr> #>  1 access_mode                       auto… Access mod… VARCHAR    GLOB… #>  2 allocator_background_threads      false Whether to… BOOLEAN    GLOB… #>  3 allocator_bulk_deallocation_flus… 512.… If a bulk … VARCHAR    GLOB… #>  4 allocator_flush_threshold         128.… Peak alloc… VARCHAR    GLOB… #>  5 allow_community_extensions        true  Allow to l… BOOLEAN    GLOB… #>  6 allow_extensions_metadata_mismat… false Allow to l… BOOLEAN    GLOB… #>  7 allow_persistent_secrets          true  Allow the … BOOLEAN    GLOB… #>  8 allow_unredacted_secrets          false Allow prin… BOOLEAN    GLOB… #>  9 allow_unsigned_extensions         false Allow to l… BOOLEAN    GLOB… #> 10 allowed_directories               []    List of di… VARCHAR[]  GLOB… #> # ℹ more rows"},{"path":"https://duckplyr.tidyverse.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Change column order — relocate.duckplyr_df","title":"Change column order — relocate.duckplyr_df","text":"method dplyr::relocate() generic. See \"Fallbacks\" section differences implementation. Use relocate() change column positions, using syntax select() make easy move blocks columns .","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change column order — relocate.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' relocate(.data, ..., .before = NULL, .after = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change column order — relocate.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> Columns move. ., .<tidy-select> Destination columns selected .... Supplying neither move columns left-hand side; specifying error.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Change column order — relocate.duckplyr_df","text":"DuckDB translation relocate.duckplyr_df() selection returns columns. features fall back dplyr::relocate(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/relocate.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change column order — relocate.duckplyr_df","text":"","code":"df <- duckdb_tibble(a = 1, b = 1, c = 1, d = \"a\", e = \"a\", f = \"a\") relocate(df, f) #> # A duckplyr data frame: 6 variables #>   f         a     b     c d     e     #>   <chr> <dbl> <dbl> <dbl> <chr> <chr> #> 1 a         1     1     1 a     a"},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns — rename.duckplyr_df","title":"Rename columns — rename.duckplyr_df","text":"method dplyr::rename() generic. See \"Fallbacks\" section differences implementation. rename() changes names individual variables using new_name = old_name syntax.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns — rename.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' rename(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns — rename.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... rename(): <tidy-select> Use new_name = old_name rename selected variables. rename_with(): additional arguments passed onto .fn.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Rename columns — rename.duckplyr_df","text":"DuckDB translation rename.duckplyr_df() selection returns columns. features fall back dplyr::rename(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/rename.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns — rename.duckplyr_df","text":"","code":"library(duckplyr) rename(mtcars, thing = mpg) #>                     thing cyl  disp  hp drat    wt  qsec vs am gear #> Mazda RX4            21.0   6 160.0 110 3.90 2.620 16.46  0  1    4 #> Mazda RX4 Wag        21.0   6 160.0 110 3.90 2.875 17.02  0  1    4 #> Datsun 710           22.8   4 108.0  93 3.85 2.320 18.61  1  1    4 #> Hornet 4 Drive       21.4   6 258.0 110 3.08 3.215 19.44  1  0    3 #> Hornet Sportabout    18.7   8 360.0 175 3.15 3.440 17.02  0  0    3 #> Valiant              18.1   6 225.0 105 2.76 3.460 20.22  1  0    3 #> Duster 360           14.3   8 360.0 245 3.21 3.570 15.84  0  0    3 #> Merc 240D            24.4   4 146.7  62 3.69 3.190 20.00  1  0    4 #> Merc 230             22.8   4 140.8  95 3.92 3.150 22.90  1  0    4 #> Merc 280             19.2   6 167.6 123 3.92 3.440 18.30  1  0    4 #> Merc 280C            17.8   6 167.6 123 3.92 3.440 18.90  1  0    4 #> Merc 450SE           16.4   8 275.8 180 3.07 4.070 17.40  0  0    3 #> Merc 450SL           17.3   8 275.8 180 3.07 3.730 17.60  0  0    3 #> Merc 450SLC          15.2   8 275.8 180 3.07 3.780 18.00  0  0    3 #> Cadillac Fleetwood   10.4   8 472.0 205 2.93 5.250 17.98  0  0    3 #> Lincoln Continental  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3 #> Chrysler Imperial    14.7   8 440.0 230 3.23 5.345 17.42  0  0    3 #> Fiat 128             32.4   4  78.7  66 4.08 2.200 19.47  1  1    4 #> Honda Civic          30.4   4  75.7  52 4.93 1.615 18.52  1  1    4 #> Toyota Corolla       33.9   4  71.1  65 4.22 1.835 19.90  1  1    4 #> Toyota Corona        21.5   4 120.1  97 3.70 2.465 20.01  1  0    3 #> Dodge Challenger     15.5   8 318.0 150 2.76 3.520 16.87  0  0    3 #> AMC Javelin          15.2   8 304.0 150 3.15 3.435 17.30  0  0    3 #> Camaro Z28           13.3   8 350.0 245 3.73 3.840 15.41  0  0    3 #> Pontiac Firebird     19.2   8 400.0 175 3.08 3.845 17.05  0  0    3 #> Fiat X1-9            27.3   4  79.0  66 4.08 1.935 18.90  1  1    4 #> Porsche 914-2        26.0   4 120.3  91 4.43 2.140 16.70  0  1    5 #> Lotus Europa         30.4   4  95.1 113 3.77 1.513 16.90  1  1    5 #> Ford Pantera L       15.8   8 351.0 264 4.22 3.170 14.50  0  1    5 #> Ferrari Dino         19.7   6 145.0 175 3.62 2.770 15.50  0  1    5 #> Maserati Bora        15.0   8 301.0 335 3.54 3.570 14.60  0  1    5 #> Volvo 142E           21.4   4 121.0 109 4.11 2.780 18.60  1  1    4 #>                     carb #> Mazda RX4              4 #> Mazda RX4 Wag          4 #> Datsun 710             1 #> Hornet 4 Drive         1 #> Hornet Sportabout      2 #> Valiant                1 #> Duster 360             4 #> Merc 240D              2 #> Merc 230               2 #> Merc 280               4 #> Merc 280C              4 #> Merc 450SE             3 #> Merc 450SL             3 #> Merc 450SLC            3 #> Cadillac Fleetwood     4 #> Lincoln Continental    4 #> Chrysler Imperial      4 #> Fiat 128               1 #> Honda Civic            2 #> Toyota Corolla         1 #> Toyota Corona          1 #> Dodge Challenger       2 #> AMC Javelin            2 #> Camaro Z28             4 #> Pontiac Firebird       2 #> Fiat X1-9              1 #> Porsche 914-2          2 #> Lotus Europa           2 #> Ford Pantera L         4 #> Ferrari Dino           6 #> Maserati Bora          8 #> Volvo 142E             2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Right join — right_join.duckplyr_df","title":"Right join — right_join.duckplyr_df","text":"method dplyr::right_join() generic. See \"Fallbacks\" section differences implementation. right_join() keeps observations y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right join — right_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' right_join(   x,   y,   by = NULL,   copy = FALSE,   suffix = c(\".x\", \".y\"),   ...,   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL )"},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right join — right_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. ... parameters passed onto methods. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Right join — right_join.duckplyr_df","text":"DuckDB translation right_join.duckplyr_df() implicit cross join, value multiple argument default \"\". value unmatched argument default \"drop\". features fall back dplyr::right_join(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/right_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right join — right_join.duckplyr_df","text":"","code":"library(duckplyr) right_join(band_members, band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 3 × 3 #>   name  band    plays  #>   <chr> <chr>   <chr>  #> 1 John  Beatles guitar #> 2 Paul  Beatles bass   #> 3 Keith NA      guitar"},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep or drop columns using their names and types — select.duckplyr_df","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"method dplyr::select() generic. See \"Fallbacks\" section differences implementation. Select (optionally rename) variables data frame, using concise mini-language makes easy refer variables based name (e.g. :f selects columns left f right) type (e.g. (.numeric) selects numeric columns).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' select(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"DuckDB translation select.duckplyr_df() expression, selection returns columns. features fall back dplyr::select(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/select.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep or drop columns using their names and types — select.duckplyr_df","text":"","code":"library(duckplyr) select(mtcars, mpg) #>                      mpg #> Mazda RX4           21.0 #> Mazda RX4 Wag       21.0 #> Datsun 710          22.8 #> Hornet 4 Drive      21.4 #> Hornet Sportabout   18.7 #> Valiant             18.1 #> Duster 360          14.3 #> Merc 240D           24.4 #> Merc 230            22.8 #> Merc 280            19.2 #> Merc 280C           17.8 #> Merc 450SE          16.4 #> Merc 450SL          17.3 #> Merc 450SLC         15.2 #> Cadillac Fleetwood  10.4 #> Lincoln Continental 10.4 #> Chrysler Imperial   14.7 #> Fiat 128            32.4 #> Honda Civic         30.4 #> Toyota Corolla      33.9 #> Toyota Corona       21.5 #> Dodge Challenger    15.5 #> AMC Javelin         15.2 #> Camaro Z28          13.3 #> Pontiac Firebird    19.2 #> Fiat X1-9           27.3 #> Porsche 914-2       26.0 #> Lotus Europa        30.4 #> Ford Pantera L      15.8 #> Ferrari Dino        19.7 #> Maserati Bora       15.0 #> Volvo 142E          21.4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Semi join — semi_join.duckplyr_df","title":"Semi join — semi_join.duckplyr_df","text":"method dplyr::semi_join() generic. semi_join() returns rows x match y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Semi join — semi_join.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' semi_join(x, y, by = NULL, copy = FALSE, ..., na_matches = c(\"na\", \"never\"))"},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Semi join — semi_join.duckplyr_df","text":"x, y pair data frames, data frame extensions (e.g. tibble), lazy data frames (e.g. dbplyr dtplyr). See Methods, , details. join specification created join_by(), character vector variables join . NULL, default, *_join() perform natural join, using variables common across x y. message lists variables can check correct; suppress message supplying explicitly. join different variables x y, use join_by() specification. example, join_by(== b) match x$y$b. join multiple variables, use join_by() specification multiple expressions. example, join_by(== b, c == d) match x$y$b x$c y$d. column names x y, can shorten listing variable names, like join_by(, c). join_by() can also used perform inequality, rolling, overlap joins. See documentation ?join_by details types joins. simple equality joins, can alternatively specify character vector variable names join . example, = c(\"\", \"b\") joins x$y$x$b y$b. variable names differ x y, use named character vector like = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\"). perform cross-join, generating combinations x y, see cross_join(). copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . ... parameters passed onto methods. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/semi_join.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Semi join — semi_join.duckplyr_df","text":"","code":"library(duckplyr) band_members %>% semi_join(band_instruments) #> Joining with `by = join_by(name)` #> # A tibble: 2 × 2 #>   name  band    #>   <chr> <chr>   #> 1 John  Beatles #> 2 Paul  Beatles"},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Set difference — setdiff.duckplyr_df","title":"Set difference — setdiff.duckplyr_df","text":"method dplyr::setdiff() generic. See \"Fallbacks\" section differences implementation. setdiff(x, y) finds rows x y.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set difference — setdiff.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' setdiff(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set difference — setdiff.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Set difference — setdiff.duckplyr_df","text":"DuckDB translation setdiff.duckplyr_df() column names duplicated one tables, column names different tables. features fall back dplyr::setdiff(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/setdiff.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set difference — setdiff.duckplyr_df","text":"","code":"df1 <- duckdb_tibble(x = 1:3) df2 <- duckdb_tibble(x = 3:5) setdiff(df1, df2) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     2 #> 2     1 setdiff(df2, df1) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     5 #> 2     4"},{"path":"https://duckplyr.tidyverse.org/dev/reference/slice_head.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset rows using their positions — slice_head.duckplyr_df","title":"Subset rows using their positions — slice_head.duckplyr_df","text":"method dplyr::slice_head() generic. slice_head() selects first rows.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/slice_head.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset rows using their positions — slice_head.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' slice_head(.data, ..., n, prop, by = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/slice_head.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset rows using their positions — slice_head.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... slice(): <data-masking> Integer row values. Provide either positive values keep, negative values drop. values provided must either positive negative. Indices beyond number rows input silently ignored. slice_*(), arguments passed methods. n, prop Provide either n, number rows, prop, proportion rows select. neither supplied, n = 1 used. n greater number rows group (prop > 1), result silently truncated group size. prop rounded towards zero generate integer number rows. negative value n prop subtracted group size. example, n = -2 group 5 rows select 5 - 2 = 3 rows; prop = -0.25 8 rows select 8 * (1 - 0.25) = 6 rows.  <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/slice_head.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Subset rows using their positions — slice_head.duckplyr_df","text":"DuckDB translation slice_head.duckplyr_df() prop provided, negative n. features fall back dplyr::slice_head(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/slice_head.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset rows using their positions — slice_head.duckplyr_df","text":"","code":"library(duckplyr) df <- data.frame(x = 1:3) df <- slice_head(df, n = 2) df #>   x #> 1 1 #> 2 2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show stats — stats_show","title":"Show stats — stats_show","text":"Prints statistics many calls handled DuckDB. output shows total number requests current session, split fallbacks dplyr requests handled duckdb.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show stats — stats_show","text":"","code":"stats_show()"},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show stats — stats_show","text":"Called side effect.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/stats_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show stats — stats_show","text":"","code":"stats_show() #> 🛠: 53 #> 🔨:  7 #> 🦆: 46 #> anti_join.data.frame, arrange.data.frame, compute, count.data.frame, distinct, explain, filter, full_join.data.frame, group_by.data.frame, head, inner_join, inner_join.data.frame, intersect, left_join.data.frame, mutate, mutate.data.frame, relocate, setdiff  tibble(a = 1:3) %>%   as_duckplyr_tibble() %>%   mutate(b = a + 1) #> Warning: `as_duckplyr_tibble()` was deprecated in duckplyr 1.0.0. #> ℹ Please use `as_duckdb_tibble()` instead. #> # A duckplyr data frame: 2 variables #>       a     b #>   <int> <dbl> #> 1     1     2 #> 2     2     3 #> 3     3     4  stats_show() #> 🛠: 55 #> 🔨:  7 #> 🦆: 48 #> anti_join.data.frame, arrange.data.frame, compute, count.data.frame, distinct, explain, filter, full_join.data.frame, group_by.data.frame, head, inner_join, inner_join.data.frame, intersect, left_join.data.frame, mutate, mutate.data.frame, relocate, setdiff"},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise each group down to one row — summarise.duckplyr_df","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"method dplyr::summarise() generic. See \"Fallbacks\" section differences implementation. summarise() creates new data frame. returns one row combination grouping variables; grouping variables, output single row summarising observations input. contain one column grouping variable one column summary statistics specified.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' summarise(.data, ..., .by = NULL, .groups = NULL)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise each group down to one row — summarise.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs summary functions. name name variable result. value can : vector length 1, e.g. min(x), n(), sum(.na(y)). data frame, add multiple columns single expression. Returning values size 0 >1 deprecated 1.1.0. Please use reframe() instead. . <tidy-select> Optionally, selection columns group just operation, functioning alternative group_by(). details examples, see ?dplyr_by. .groups Grouping structure result. \"drop_last\": dropping last level grouping. supported option version 1.0.0. \"drop\": levels grouping dropped. \"keep\": grouping structure .data. \"rowwise\": row group. .groups specified, chosen based number rows results: results 1 row, get \"drop_last\". number rows varies, get \"keep\" (note returning variable number rows deprecated favor reframe(), also unconditionally drops levels grouping). addition, message informs choice, unless result ungrouped, option \"dplyr.summarise.inform\" set FALSE, summarise() called function package.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"DuckDB translation summarise.duckplyr_df() .groups = \"rowwise\". features fall back dplyr::summarise(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/summarise.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise each group down to one row — summarise.duckplyr_df","text":"","code":"library(duckplyr) summarise(mtcars, mean = mean(disp), n = n()) #>       mean  n #> 1 230.7219 32"},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric difference — symdiff.duckplyr_df","title":"Symmetric difference — symdiff.duckplyr_df","text":"method dplyr::symdiff() generic. See \"Fallbacks\" section differences implementation. symdiff(x, y)  computes symmetric difference, .e. rows x y rows y x.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric difference — symdiff.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' symdiff(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric difference — symdiff.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Symmetric difference — symdiff.duckplyr_df","text":"DuckDB translation symdiff.duckplyr_df() column names duplicated one tables, column names different tables. features fall back dplyr::symdiff(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/symdiff.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetric difference — symdiff.duckplyr_df","text":"","code":"df1 <- duckdb_tibble(x = 1:3) df2 <- duckdb_tibble(x = 3:5) symdiff(df1, df2) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     4 #> 2     1 #> 3     5 #> 4     2"},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create, modify, and delete columns — transmute.duckplyr_df","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"method dplyr::transmute() generic. See \"Fallbacks\" section differences implementation. transmute() creates new data frame containing specified computations. superseded can perform job mutate(.keep = \"none\").","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' transmute(.data, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <data-masking> Name-value pairs. name gives name column output. value can : vector length 1, recycled correct length. vector length current group (whole data frame ungrouped). NULL, remove column. data frame tibble, create multiple columns output.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"DuckDB translation transmute.duckplyr_df() selection returns columns: features fall back dplyr::transmute(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/transmute.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create, modify, and delete columns — transmute.duckplyr_df","text":"","code":"library(duckplyr) transmute(mtcars, mpg2 = mpg*2) #>                     mpg2 #> Mazda RX4           42.0 #> Mazda RX4 Wag       42.0 #> Datsun 710          45.6 #> Hornet 4 Drive      42.8 #> Hornet Sportabout   37.4 #> Valiant             36.2 #> Duster 360          28.6 #> Merc 240D           48.8 #> Merc 230            45.6 #> Merc 280            38.4 #> Merc 280C           35.6 #> Merc 450SE          32.8 #> Merc 450SL          34.6 #> Merc 450SLC         30.4 #> Cadillac Fleetwood  20.8 #> Lincoln Continental 20.8 #> Chrysler Imperial   29.4 #> Fiat 128            64.8 #> Honda Civic         60.8 #> Toyota Corolla      67.8 #> Toyota Corona       43.0 #> Dodge Challenger    31.0 #> AMC Javelin         30.4 #> Camaro Z28          26.6 #> Pontiac Firebird    38.4 #> Fiat X1-9           54.6 #> Porsche 914-2       52.0 #> Lotus Europa        60.8 #> Ford Pantera L      31.6 #> Ferrari Dino        39.4 #> Maserati Bora       30.0 #> Volvo 142E          42.8"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Union — union.duckplyr_df","title":"Union — union.duckplyr_df","text":"method dplyr::union() generic. union(x, y) finds rows either x y, excluding duplicates. implementation forwards distinct(union_all(x, y)).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/union.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union — union.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' union(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union — union.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/union.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union — union.duckplyr_df","text":"","code":"df1 <- duckdb_tibble(x = 1:3) df2 <- duckdb_tibble(x = 3:5) union(df1, df2) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     5 #> 2     2 #> 3     3 #> 4     4 #> 5     1"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Union of all — union_all.duckplyr_df","title":"Union of all — union_all.duckplyr_df","text":"method dplyr::union_all() generic. See \"Fallbacks\" section differences implementation. union_all(x, y) finds rows either x y, including duplicates.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union of all — union_all.duckplyr_df","text":"","code":"# S3 method for class 'duckplyr_df' union_all(x, y, ...)"},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union of all — union_all.duckplyr_df","text":"x, y Pair compatible data frames. pair data frames compatible column names (possibly different orders) compatible types. ... dots future extensions must empty.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"fallbacks","dir":"Reference","previous_headings":"","what":"Fallbacks","title":"Union of all — union_all.duckplyr_df","text":"DuckDB translation union_all.duckplyr_df() column names duplicated one tables, column names different tables. features fall back dplyr::union_all(), see vignette(\"fallback\") details.","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/reference/union_all.duckplyr_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union of all — union_all.duckplyr_df","text":"","code":"df1 <- duckdb_tibble(x = 1:3) df2 <- duckdb_tibble(x = 3:5) union_all(df1, df2) #> # A duckplyr data frame: 1 variable #>       x #>   <int> #> 1     1 #> 2     2 #> 3     3 #> 4     3 #> 5     4 #> 6     5"},{"path":"https://duckplyr.tidyverse.org/dev/reference/unsupported.html","id":null,"dir":"Reference","previous_headings":"","what":"Verbs not implemented in duckplyr — unsupported","title":"Verbs not implemented in duckplyr — unsupported","text":"following dplyr generics counterpart method duckplyr. want help add new verb, please refer contributing guide https://duckplyr.tidyverse.org/CONTRIBUTING.html#support-new-verbs","code":""},{"path":"https://duckplyr.tidyverse.org/dev/reference/unsupported.html","id":"unsupported-verbs","dir":"Reference","previous_headings":"","what":"Unsupported verbs","title":"Verbs not implemented in duckplyr — unsupported","text":"verbs, duckplyr fall back dplyr. dplyr::add_count() dplyr::cross_join() dplyr::() dplyr::group_by() dplyr::group_indices() dplyr::group_keys() dplyr::group_map() dplyr::group_modify() dplyr::group_nest() dplyr::group_size() dplyr::group_split() dplyr::group_trim() dplyr::groups() dplyr::n_groups() dplyr::nest_by() dplyr::nest_join() dplyr::reframe() dplyr::rename_with() dplyr::rows_append() dplyr::rows_delete() dplyr::rows_insert() dplyr::rows_patch() dplyr::rows_update() dplyr::rows_upsert() dplyr::rowwise() generics::setequal() dplyr::slice_head() dplyr::slice_sample() dplyr::slice_tail() dplyr::slice() dplyr::ungroup()","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-1-0-1-9009","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 1.0.1.9009 (2025-04-11)","text":"Verbose conflict_prefer() (#667, #684).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-1-0-1-9008","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 1.0.1.9008 (2025-04-10)","text":"Typos + clarification edits “large” vignette (@mine-cetinkaya-rundel, #665).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-1-0-1-9008","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 1.0.1.9008 (2025-04-10)","text":"Snapshot updates rcc-smoke (null) (#675).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-1-0-1-9007","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 1.0.1.9007 (2025-04-02)","text":"Register Ark methods Positron’s Variables Pane (@DavisVaughan, #661).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-1-0-1-9006","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 1.0.1.9006 (2025-03-27)","text":"Implement n_distinct() macro support na.rm = TRUE (@joakimlinde, #572, #655).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1-9006","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1.9006 (2025-03-27)","text":"Use roxyglobals CRAN rather GitHub (@andreranza, #659). Space EOL.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-1-0-1-9006","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 1.0.1.9006 (2025-03-27)","text":"Recommend pak::pak().","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-1-0-1-9005","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 1.0.1.9005 (2025-03-12)","text":"Translate dplyr::coalesce().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1-9005","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1.9005 (2025-03-12)","text":"Bring tools patch date (@joakimlinde, #647).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1-9004","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1.9004 (2025-03-11)","text":"Internal rel_to_df() needs prudence argument (#644).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-1-0-1-9003","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 1.0.1.9003 (2025-03-10)","text":"Joins longer materialize input data package used methods_overwrite() library(duckplyr) (#641).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-1-0-1-9003","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 1.0.1.9003 (2025-03-10)","text":"compute() fallback, failures reported client (#637). Implement slice_head() (#640).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1-9003","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1.9003 (2025-03-10)","text":"Fix sync scripts add reproducible code (#639).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1-9002","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1.9002 (2025-03-09)","text":"Check loadability extensino test (#636).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"fledge-1-0-1-9001","dir":"Changelog","previous_headings":"","what":"fledge","title":"duckplyr 1.0.1.9001 (2025-02-28)","text":"CRAN release v1.0.1 (#624).","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-1-0-1-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 1.0.1.9000 (2025-02-22)","text":"Correct formatting controlled fallbacks Sys.setenv(DUCKPLYR_FALLBACK_INFO = TRUE).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-101-2025-02-21","dir":"Changelog","previous_headings":"","what":"duckplyr 1.0.1 (2025-02-21)","title":"duckplyr 1.0.1 (2025-02-21)","text":"CRAN release: 2025-02-27","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 1.0.1 (2025-02-21)","text":"Check extensions can loaded running examples vignettes (#620). Show source error data frame converted duck frame (#614). Correct formatting controlled fallbacks Sys.setenv(DUCKPLYR_FALLBACK_INFO = TRUE)","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-1-0-1","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 1.0.1 (2025-02-21)","text":"Require duckdb >= 1.2.0 (#619). Break version duckdb 2.0.0 (#623).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-1-0-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 1.0.1 (2025-02-21)","text":"Separate ?compute_parquet ?compute_csv (#610, #622). Italicize book title README (@wibeasley, #607). Fix typo filter(.= ...) error message (@maelle, #611). Fix link documentation (#600, #601).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-100-2025-02-02","dir":"Changelog","previous_headings":"","what":"duckplyr 1.0.0 (2025-02-02)","title":"duckplyr 1.0.0 (2025-02-02)","text":"CRAN release: 2025-02-07","code":""},{"path":[]},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"large-data-1-0-0","dir":"Changelog","previous_headings":"Features","what":"Large data","title":"duckplyr 1.0.0 (2025-02-02)","text":"Improved support handling large data files S3: ingestion read_parquet_duckdb() others, materialization as_duckdb_tibble(), compute.duckplyr_df() compute_file(). See vignette(\"large\") details. Control automatic materialization duckplyr frames new prudence argument as_duckdb_tibble(), duckdb_tibble(), compute.duckplyr_df() compute_file(). See vignette(\"prudence\") details.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"Features","what":"New functions","title":"duckplyr 1.0.0 (2025-02-02)","text":"read_csv_duckdb() others, deprecating duckplyr_df_from_csv() df_from_csv() (#210, #396, #459). read_sql_duckdb() (experimental) run SQL queries default DuckDB connection return result duckplyr frame (duckdb/duckdb-r#32, #397). db_exec() execute configuration queries default duckdb connection (#39, #165, #227, #404, #459). duckdb_tibble() (#382, #457). as_duckdb_tibble(), replaces as_duckplyr_tibble() as_duckplyr_df() (#383, #457) supports dbplyr connections duckdb database (#86, #211, #226). compute_parquet() compute_csv(), implement compute.duckplyr_df() (#409, #430). fallback_config() create configuration file settings affect behavior (#216, #426). is_duckdb_tibble(), deprecates is_duckplyr_df() (#391, #392). last_rel() retrieve last relation object used materialization (#209, #375). Add \"prudent_duckplyr_df\" class stops automatic materialization requires collect() (#381, #390).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"translations-1-0-0","dir":"Changelog","previous_headings":"Features","what":"Translations","title":"duckplyr 1.0.0 (2025-02-02)","text":"Partial support across() mutate() summarise() (#296, #306, #318, @lionel-, @DavisVaughan). Implement na.rm handling sum(), min(), max(), () (), fallback window functions (#205, #566). Add support sub() gsub() (@toppyy, #420). Handle dplyr::desc() (#550). Avoid forwarding .na() .nan() support non-numeric data, avoid checking roundtrip timestamp data (#482). Correctly handle missing values if_else(). Limit number items can handled %% (#319). duckdb_tibble() checks columns can represented DuckDB (#537). Fall back dplyr passing multiple joins (#323).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"error-messages-1-0-0","dir":"Changelog","previous_headings":"Features","what":"Error messages","title":"duckplyr 1.0.0 (2025-02-02)","text":"Improve fallback error message explicitly materializing (#432, #456). Point native CSV reader encountering data frames read readr (#127, #469). Improve as_duckdb_tibble() error message invalid x (@maelle, #339).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"behavior-1-0-0","dir":"Changelog","previous_headings":"Features","what":"Behavior","title":"duckplyr 1.0.0 (2025-02-02)","text":"Depend dplyr instead reexporting generics (#405). Nothing changes users scripts. using duckplyr package, now also need import dplyr. Fallback logging now default, can disabled configuration (#422). default DuckDB connection now based file, location defaults subdirectory tempdir() can controlled DUCKPLYR_TEMP_DIR environment variable (#439, #448, #561). collect() returns tibble (#438, #447). explain() returns input, invisibly (#331).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 1.0.0 (2025-02-02)","text":"Compute ptype join columns safe way without materialization, entire data frame (#289). Internal expr_scrub() (used telemetry) can handle function-definitions (@toppyy, #268, #271). Harden telemetry code invalid arguments (#321).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-1-0-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 1.0.0 (2025-02-02)","text":"New articles: vignette(\"large\"), vignette(\"prudence\"), vignette(\"fallback\"), vignette(\"limits\"), vignette(\"developers\"), vignette(\"telemetry\") (#207, #504). New flights_df() used instead palmerpenguins::penguins (#408). Move tidyverse GitHub organization, new repository URL https://github.com/tidyverse/duckplyr/ (#225). Avoid base pipe examples compatibility R 4.0.0 (#463, #466).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"performance-1-0-0","dir":"Changelog","previous_headings":"","what":"Performance","title":"duckplyr 1.0.0 (2025-02-02)","text":"Comparison expressions translated way allows pushed Parquet (@toppyy, #270). Printing duckplyr frame longer materializes (#255, #378). Prefer vctrs::new_data_frame() tibble() (#500).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-041-2024-07-11","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.1 (2024-07-11)","title":"duckplyr 0.4.1 (2024-07-11)","text":"CRAN release: 2024-07-12","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-1","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.1 (2024-07-11)","text":"df_from_file() related functions support multiple files (#194, #195), show clear error message non-string path arguments (#182), create tibble default (#177). New as_duckplyr_tibble() convert data frame duckplyr tibble (#177). Support descending sort character non-numeric data (@toppyy, #92, #175). Avoid setting memory limit (#193). Check compatibility join columns (#168, #185). Explicitly list supported functions, add contributing guide, add analysis scripts GitHub activity data (#179).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.1 (2024-07-11)","text":"Add contributing guide (#179). Show startup message package load telemetry configured (#188, #198). ?df_from_file shows read multiple files (#181, #186) specify CSV column types (#140, #189), shown correctly reference index (#173, #190). Discuss dbplyr README (#145, #191). Add analysis scripts GitHub activity data (#179).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-040-2024-05-21","dir":"Changelog","previous_headings":"","what":"duckplyr 0.4.0 (2024-05-21)","title":"duckplyr 0.4.0 (2024-05-21)","text":"CRAN release: 2024-05-21","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.4.0 (2024-05-21)","text":"Use built-rfuns extension implement equality inequality operators, improve translation .integer(), NA %% (#83, #154, #148, #155, #159, #160). Reexport non-deprecated dplyr functions (#144, #163). library(duckplyr) calls methods_overwrite() (#164). allow constant patterns grepl(). Explicitly reject calls named arguments now. Reduce default memory limit 1 GB.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.4.0 (2024-05-21)","text":"Stricter type checks set operations intersect(), setdiff(), symdiff(), union(), union_all() (#169). Distinguish constant NA used expression (#157). head(-1) forwards default implementation (#131, #156). Fix cli syntax internal error message (#151). careful detection row names data frame. Always check roundtrip timestamp columns. left_join() join functions call auto_copy(). reset expression depth set . Require fallback result contains duplicate column names ignoring case. row_number() returns integer. .na(NaN) TRUE. summarise(count = n(), count = n()) creates one column named count. Correct wording instructions enabling fallback logging (@TimTaylor, #141).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-4-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.4.0 (2024-05-21)","text":"Remove styler dependency (#137, #138). Avoid error stats collection.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-4-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.4.0 (2024-05-21)","text":"Mention wildcards read multiple files ?df_from_file (@andreranza, #133, #134).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-4-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.4.0 (2024-05-21)","text":"Reenable tests now run successfully (#166). Synchronize tests (#153). Test vec_ptype() materialize (#149). Improve telemetry tests. Promote equality checks expect_identical() capture differences doubles integers.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-032-2024-03-17","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.2 (2024-03-17)","title":"duckplyr 0.3.2 (2024-03-17)","text":"CRAN release: 2024-03-17","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.2 (2024-03-17)","text":"Run autoupload function checked static analysis (#122).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-2","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.2 (2024-03-17)","text":"New df_to_parquet() write Parquet, new convenience functions df_from_csv(), duckdb_df_from_csv(), df_from_parquet() duckdb_df_from_parquet() (#87, #89, #96, #128).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-031-2024-03-08","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.1 (2024-03-08)","title":"duckplyr 0.3.1 (2024-03-08)","text":"CRAN release: 2024-03-10","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.1 (2024-03-08)","text":"Forbid reuse new columns created summarise() (#72, #106). summarise() longer restores subclass. Disambiguate computation log10() log(). Fix division zero positive negative numbers.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-1","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.1 (2024-03-08)","text":"New fallback_sitrep() related functionality collecting telemetry data (#102, #107, #110, #111, #115). data collected default, message displayed per session every eight hours. Opt opt setting environment variables. Implement group_by() methods collect fallback information (#94, #104, #105). Set memory limit temporary directory duckdb. Implement suppressWarnings() identity function. Prefer cli::cli_abort() stop() rlang::abort() (#114). Translate .data$.env$. Strict checks column class, supporting integer, numeric, logical, Date, POSIXct, difftime now. environment variable DUCKPLYR_METHODS_OVERWRITE set TRUE, loading duckplyr automatically calls methods_overwrite().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"internal-0-3-1","dir":"Changelog","previous_headings":"","what":"Internal","title":"duckplyr 0.3.1 (2024-03-08)","text":"Better duckdb tests. Use standalone purrr dplyr compatibility.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-3-1","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.3.1 (2024-03-08)","text":"Add tests correct base log() log10().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-3-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.3.1 (2024-03-08)","text":"methods_overwrite() methods_restore() show message.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-030-2023-12-10","dir":"Changelog","previous_headings":"","what":"duckplyr 0.3.0 (2023-12-10)","title":"duckplyr 0.3.0 (2023-12-10)","text":"CRAN release: 2023-12-11","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.3.0 (2023-12-10)","text":"grepl(x = NA) gives correct results. Fix auto_copy() non-data-frame input. Add output order preservation filters. distinct() now preserves order corner cases (#77, #78). Consistent computation log(0) log(-1) (#75, #76).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"duckplyr 0.3.0 (2023-12-10)","text":"allow constants mutate() actually representable duckdb (#73). Avoid translating ifelse(), support if_else() (#79).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-3-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.3.0 (2023-12-10)","text":"Separate explain new relational examples (@wibeasley, #84).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"testing-0-3-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"duckplyr 0.3.0 (2023-12-10)","text":"Add test TPC-H queries can processed.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-3-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.3.0 (2023-12-10)","text":"Sync dplyr 1.1.4 (#82). Remove dplyr_reconstruct() method (#48). Render README. Fix code generated meta_replay(). Bump constructive dependency. Fix output order arrange() case ties. Update duckdb tests. implement newer slice_sample(), sample_n() sample_frac() (#74). Sync generated files (#71).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-023-2023-11-08","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.3 (2023-11-08)","title":"duckplyr 0.2.3 (2023-11-08)","text":"CRAN release: 2023-11-08","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"performance-0-2-3","dir":"Changelog","previous_headings":"","what":"Performance","title":"duckplyr 0.2.3 (2023-11-08)","text":"Join using DISTINCT faster execution (duckdb/duckdb-r#41, #68).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-2-3","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.2.3 (2023-11-08)","text":"Add stability README output (@maelle, #62, #65).","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-022-2023-10-16","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.2 (2023-10-16)","title":"duckplyr 0.2.2 (2023-10-16)","text":"CRAN release: 2023-10-16","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.2.2 (2023-10-16)","text":"summarise() keeps \"duckplyr_df\" class (#63, #64). Fix compatibility duckdb >= 0.9.1.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-2-2","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.2.2 (2023-10-16)","text":"Skip tests give different output dev tidyselect. Import utils::globalVariables().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-2-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.2.2 (2023-10-16)","text":"Small README improvements (@maelle, #34, #57). Fix 301 README.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-021-2023-09-16","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.1 (2023-09-16)","title":"duckplyr 0.2.1 (2023-09-16)","text":"CRAN release: 2023-09-17 Improve documentation. Work around problem dplyr_reconstruct() R 4.3. Rename duckdb_from_file() df_from_file(). Unexport private duckdb_rel_from_df(), rel_from_df(), wrap_df() wrap_integer(). Reexport %>% tibble().","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-020-2023-09-10","dir":"Changelog","previous_headings":"","what":"duckplyr 0.2.0 (2023-09-10)","title":"duckplyr 0.2.0 (2023-09-10)","text":"CRAN release: 2023-09-10 Implement relational API DuckDB.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"duckplyr-010-2023-07-03","dir":"Changelog","previous_headings":"","what":"duckplyr 0.1.0 (2023-07-03)","title":"duckplyr 0.1.0 (2023-07-03)","text":"CRAN release: 2023-07-07","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"duckplyr 0.1.0 (2023-07-03)","text":"Fix examples.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"chore-0-1-0","dir":"Changelog","previous_headings":"","what":"Chore","title":"duckplyr 0.1.0 (2023-07-03)","text":"Add CRAN install instructions. Satisfy R CMD check. Document argument. Error NOTE. Remove relexpr_window() now.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"duckplyr 0.1.0 (2023-07-03)","text":"Clean reference.","code":""},{"path":"https://duckplyr.tidyverse.org/dev/news/index.html","id":"uncategorized-0-1-0","dir":"Changelog","previous_headings":"","what":"Uncategorized","title":"duckplyr 0.1.0 (2023-07-03)","text":"Initial version, exporting: - new_relational() construct objects class \"relational\" - Generics rel_aggregate(), rel_distinct(), rel_filter(), rel_join(), rel_limit(), rel_names(), rel_order(), rel_project(), rel_set_diff(), rel_set_intersect(), rel_set_symdiff(), rel_to_df(), rel_union_all() - new_relexpr() construct objects class \"relational_relexpr\" - Expression builders relexpr_constant(), relexpr_function(), relexpr_reference(), relexpr_set_alias(), relexpr_window()","code":""}]
